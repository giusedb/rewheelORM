!function(t,n,e){"use strict";function i(){this.handlers=[],this.strHandlers={}}function o(){var t={},e={},i=0;this.on=function(n,o){n in t||(t[n]=new Array);var r=i++;return t[n].push(o),e[r]=o,r},this.emit=function(n){if(n in t){var e=Array.prototype.slice.call(arguments,1);t[n].forEach(function(t){t.apply(null,e)})}},this.unbind=function(i){var o=0;if(i in e){var r=e[i+""];n(t).each(function(t,n){var e=[];for(var i in t)t[i]===r&&(e.push(i),o++);e.reverse().forEach(function(n){t.splice(n,1)})})}return delete e[i],o}}function r(t,n){this.getLogin=n,this.events=new o,this.$POST=m.bind(this),this.options={endPoint:t},this.on=this.events.on.bind(this)}function s(){var t=!1;this.touch=function(){t=!0},this.touched=function(){var n=t;return t=!1,n}}function a(t,e,i){if(!e)var e=[];var o=[];this.ask=function(i,r){n(e).contains(i)||(o.push(i),r||e.push(i),t.touch())},this.getAskedIndex=function(){return e},this.missings=function(){return n(o.splice(0,o.length)).unique().toArray()}}function c(t,e,i,o,r){var c=new s,u={},f={},d={},h={},p={};this.mainIndex=u,this.foreignKeys=f,this.m2m=d,this.m2mIndex=h,this.permissions=p,t.on("model-definition",function(t){var e=r.getIndexFor(t.name,"id");u[t.name]=new a(c,e,"mainIndex."+t.name),p[t.name]=new a(c,null,"permissions."+t.name),n(t.references).each(function(n){var e=t.name+"_"+n.id;f[e]=new a(c,r.getIndexFor(n.to,"id"),n.to+".id foreignKeys."+e)}),n(t.referencedBy).each(function(t){var n=t.by+"."+t.id;f[n]=new a(c,r.getIndexFor(t.by,t.id),t.by+"."+t.id+" foreignKeys."+n)}),n(t.manyToMany).each(function(t){t.indexName in d||(d[t.indexName]=[new a(c,null,"m2m."+t.indexName+"[0]"),new a(c,null,"m2m."+t.indexName+"[1]")]),t.indexName in h||(h[t.indexName]=new l(t,d[t.indexName]))})});var m=function(t,n,i,r){o.$post((n?v.reverse("/",t):t)+"s/list",{collection:i},function(n){o.gotData(n,r),delete e[t]})},g=function(t,i,o,r){n(i).each(d[t][o].ask.bind(d[t][o])),i=d[t][o].missings(),i.length?(e[t]=1,m(t,o,i,r)):r&&r()};this.getM2M=g;var y=function(){if(c.touched()){if(n(e).values().sum())return void c.touch();var t=!1;n(d).each(function(e,i){n(e).each(function(e,r){var s=e.missings();if(s=n(s).filter(Boolean).map(function(t){return parseInt(t)}).toArray(),s.length){var a=h[i],c=a["get"+(1-r)].bind(a);t=!0,m(i,r,s,function(t){var e=s.map(c);if(e.length){var a=i.split("/")[1-r];o.describe(a,function(){n(e).flatten().unique().each(function(t){u[a].ask(t,!0)})})}})}})}),n(u).each(function(e,r){var s=e.missings();if(s.length){t=!0;r in i?i[r].keys():n();o.fetch(r,{id:s},null,v.noop)}}),n(f).map(function(t,n){return[n,t.missings()]}).filter(function(t){return t[1].length}).each(function(n){t=!0;var e=n[1],i=n[0],r=i.split("."),s=r[0],a=r[1],c={};c[a]=e,o.fetch(s,c)}),n(n(p).map(function(t,n){return[n,t.missings()]}).filter(function(t){return t[1].length}).toObject()).each(function(i,r){t=!0,i.length&&(e[r]=1,o.$post(r+"/my_perms",{ids:n(i).unique().toArray()},function(t){o.gotPermissions(t.PERMISSIONS),delete e[r]}))})}};setInterval(y,50)}function u(){var t={},e={},i={},o=function(t,e,i){var o=[];if(i)for(var r in t)for(var s in e)o.push(n([t[r],e[s]]).flatten().toArray());else for(var r in t)for(var s in e)o.push([t[r],e[s]]);return o},r=function(t){for(var n=!1,e=t[0],i=1;i<t.length;++i)e=o(e,t[i],n),n=!0;return e},s=function(t){var e=r(n(t).values().toArray()),i=n(t).keys().toArray();return e.map(function(t){var n={};return i.forEach(function(e,i){n[e]=t[i]}),n})},a=function(t,e,i){var o=t.modelName,r=this.getIndexFor,s=(n(e).map(function(t,n){return[n,o+"."+n]}).toObject(),n(e).keys().map(function(t){return[t,r(o,t)]}).toObject());for(var a in e){var c=n(e[a]).difference(s[a]).toArray();if(c.length){var u=n([[a,c]]).toObject();return i||Array.prototype.push.apply(s[a],c),u}return null}},c=function(t,e){t.name in i||(i[t.name]=[]);var o=i[t.name],r=n(e).size();o.filter(v.makeFilter(t,e," && ",!0)).filter(function(t){n(t).size()>r})};this.filter=function(o,r){var u=o.modelName,l=n(r).size();switch(l){case 0:var f=t[u];return t[u]=!0,u in e&&delete e[u],u in i&&delete i[u],f?null:{};case 1:var d=a.call(this,o,r);return c.call(this,o,r),d}var h=this,p=n(r).keys().some(function(t){var n={};return n[t]=r[t],null==a.call(h,o,n,!0)});if(p)return null;u in i||(i[u]=[]);var m=s(r),g=i[u].filter(v.makeFilter(o,r," || ",!0));if(g.length){var y=[];for(var w in g)y.push.apply(y,m.filter(v.makeFilter(o,g[w]," && ",!0)));var N=n(m).difference(y).toArray()}else var N=m;if(N.length){i[u].push.apply(i[u],N);var N=n(r).keys().map(function(t){var e=n(N).pluck(t).unique().toArray();return[t,e.length?e:r[t]]}).toObject();return c(o,N),N}return null},this.getIndexFor=function(t,n){var i=t+"."+n;return i in e||(e[i]=[]),e[i]}}function l(t,e){var i=[];this.add=i.push.bind(i),this.add=function(t){console.log("adding "+t),n(i).find(t)||i.push(t)},this.get0=function(t){return e[1].ask(t),n(i).filter(function(n){return n[0]===t}).pluck("1").toArray()},this.get1=function(t){return e[0].ask(t),n(i).filter(function(n){return n[1]===t}).pluck("0").toArray()},this["get"+v.capitalize(t.indexName.split("/")[1])]=this.get1,this["get"+v.capitalize(t.indexName.split("/")[0])]=this.get0,this.del=function(t){for(var n=i.length,e=null,o=0;o<n;o++)if(i[o][0]===t[0]&&i[o][1]===t[1]){e=o;break}e&&i.splice(o,1),console.log("deleting ",t)}}function f(t,e,i,o){var r=Array.prototype.slice.call(arguments,4),s={};n(r).each(function(n){t.orm.on(n,function(){s={}})});var a={get:function(){return this.id in s||(s[this.id]=i.call(this)),s[this.id]}};o&&(a.set=function(t){t!==s[this.id]&&(o.call(this,t),this.id in s&&delete s[this.id])}),Object.defineProperty(t,e,a)}function d(t){this.resource=t._resource,this.formIdx=t.formIdx,this.fields=t.errors}function h(t,n){this.$orm=new g(new v.reWheelConnection(t,n),this),this.on=this.$orm.on.bind(this.$orm),this.emit=this.$orm.emit.bind(this.$orm),this.unbind=this.$orm.unbind.bind(this.$orm),this.addModelHandler=this.$orm.addModelHandler.bind(this.$orm),this.addPersistentAttributes=this.$orm.addPersistentAttributes.bind(this.$orm),this.utils=v}i.prototype.addHandler=function(t){var n=v.hash(t.toString());n in this.strHandlers||(this.strHandlers[n]=t,this.handlers.push(t))},i.prototype.handle=function(){var t=Array.prototype.slice.call(arguments,0);this.handlers.forEach(function(n){n.apply(null,t)})},i.prototype.handleBy=function(){var t=Array.prototype.slice.call(arguments,1),n=arguments[0];this.handlers.forEach(function(e){e.apply(n,t)})};var p=0,m=function(t,n,e,i,o){var r={accepts:"application/json",url:t,data:JSON.stringify(n),dataType:"json",success:e,error:i,method:"POST",contentType:"application/json"};return o&&(r.headers=o,r.crossDomain=!0),$.ajax(r)};r.prototype.status=function(t,n){if("lastRWTStatus"in localStorage&&!n){try{var e=JSON.parse(localStorage.lastRWTStatus);for(var i in e)this.options[i]=e[i]}catch(n){return this.status(t,!0)}return t&&t(e)}if(this._status_calling){var o=this;return setTimeout(function(){o.status(t)},50)}if(!this.options||!this.options.timestamp){this._status_calling=!0;var o=this;return this.$post("api/status",null,function(n){localStorage.lastRWTStatus=JSON.stringify(n),o._status_calling=!1;for(var e in n)o.options[e]=n[e];if(!n.user_id&&o.getLogin){var i=o.getLogin();i.constructor===Object&&o.login(i.username,i.password).then(function(n){for(var e in n)o.options[e]=n[e];localStorage.lastRWTStatus=JSON.stringify(n),t&&t(n)})}else t&&t(o.options)})}t&&t(this.options)},r.prototype.$post=function(t,n,e){var i=this;if(this.options&&this.options.token&&(n||(n={})),this.options.token){({token:this.options.token,application:this.options.application})}else;var o=v.xdr(this.options.endPoint+t,n,this.options.application,this.options.token).then(function(o){i.events.emit("http-response",o.responseText,o.status,t,n),i.events.emit("http-response-"+o.status,o.responseText,t,n),o.responseData&&i.events.emit("http-response-"+o.status+"-json",o.responseData,t,n),e&&e(o.responseData||o.responseText)},function(e){e.responseData?(i.events.emit("error-json",e.responseData,e.status,t,n,e),i.events.emit("error-json-"+e.status,e.responseData,t,n,e)):(i.events.emit("error-http",e.responseText,e.status,t,n,e),i.events.emit("error-http-"+e.status,e.responseText,t,n,e))});return o},r.prototype.login=function(t,n){var e=this.options.endPoint+"api/login",i=this;return new Promise(function(o,r){v.xdr(e,{username:t,password:n},function(t){for(var n in t)i.options[n]=t[n];o(t)},function(t,n,e){r(t.responseJSON)},null,i.options.token,!0)})},r.prototype.connect=function(t){var n=this,e=function(t){t.wsConnection=new v.wsConnect(t.options),t.wsConnection.onConnect(function(){t.events.emit("ws-connected",t.wsConnection)}),t.wsConnection.onDisconnect(function(){setTimeout(function(){e(t)},1e3)})};return this.status(function(i){"token"in n.options?t&&t(i):(console.log("connecting to "+n.options.endPoint),n.options.username&&n.options.password&&n.login(n.options.username,n.options.password,function(n){t&&t(n),console.log("renewing connection")})),i.token&&i.realtimeEndPoint&&!n.wsConnection&&e(n)})};var v={renameFunction:function(t,n){return new Function("return function (call) { return function "+t+" () { return call(this, arguments) }; };")()(Function.apply.bind(n))},cached:function(t,n){function e(){return this[n]||(this[n]=t.call(this,[arguments])),this[n]}return n||(n="_"+p++),e},$POST:m,reWheelConnection:r,log:function(){console.log(arguments)},xdr:function(t,e,i,o,r){return new Promise(function(s,a){var c;e||(e={}),XMLHttpRequest?(c=new XMLHttpRequest,c.onreadystatechange=function(){if(4===c.readyState){try{var t=JSON.parse(c.responseText)}catch(t){var t=null}var n={responseData:t,responseText:c.responseText,status:c.statusText,request:c};c.status>=200&&c.status<400?s(n):a(n)}}):XDomainRequest?(c=new XDomainRequest,c.onload=function(){s(c.responseText,c.statusText,c)}):a(new Error("CORS not supported")),c.open("POST",t,!0),c.onerror=a,c.setRequestHeader("Accept","application/json"),c.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),r||(e={args:JSON.stringify(e)}),o&&(e.token=o),i&&(e.application=i),e=n(e).map(function(t,n){return n+"="+encodeURI(t.toString())}).toArray().join("&"),c.send(e)})},capitalize:function(t){return t[0].toUpperCase()+t.slice(1).toLowerCase()},hash:function(t){t=t.toString();for(var n=1,e=0;e<t.length;e++)n*=1+t.charCodeAt(e);return(n%34958374957).toString()},makeFilter:function(t,e,i,o){if(i||(i=" && "),0===n(e).size())return function(t){return!0};var r=n(e).map(function(e,i){return e||(e=[null]),Array.isArray(e)||(e=[e]),o||"reference"!==t.fields[i].type?"string"===t.fields[i].type&&(e=e.map(JSON.stringify)):(i="_"+i,e=n(e).map(function(t){return t&&t.constructor!==Number?t.id:t}).toArray()),"("+n(e).map(function(t){return"(x."+i+" === "+t+")"}).join(" || ")+")"}).toArray().join(i);return new Function("x","return "+r)},sameAs:function(t,n){for(var e in t)if(n[e]!=t[e])return!1;return!0},wsConnect:function(t){if(t){var n=this;this.handlers={wizard:new i,onConnection:new i,onDisconnection:new i,onMessageJson:new i,onMessageText:new i},this.onWizard=this.handlers.wizard.addHandler.bind(this.handlers.wizard),this.onConnect=this.handlers.onConnection.addHandler.bind(this.handlers.onConnection),this.onDisconnect=this.handlers.onDisconnection.addHandler.bind(this.handlers.onDisconnection),this.onMessageJson=this.handlers.onMessageJson.addHandler.bind(this.handlers.onMessageJson),this.onMessageText=this.handlers.onMessageText.addHandler.bind(this.handlers.onMessageText),this.options=t;var o=new e(t.realtimeEndPoint);o.onopen=function(t){console.log("open : "+t),o.tenant(),n.handlers.onConnection.handle(t)},o.onmessage=function(t){if("message"==t.type)try{n.handlers.onMessageJson.handle($.parseJSON(t.data))}catch(e){n.handlers.onMessageText.handle(t.data)}else console.log(t)},o.onclose=function(){setTimeout(v.wsConnect,1e3),n.handlers.onDisconnection.handle()},o.tenant=function(){o.send("TENANT:"+n.options.application+":"+n.options.token)}}},pluralize:function(t,n){return t+"s"},beforeCall:function(t,n){var e=function(){n().then(t)};return e},cleanStorage:function(){n(localStorage).keys().each(function(t){delete localStorage[t]})},reverse:function(t,n){return n.split(t).reverse().join(t)},permutations:function(t){for(var n=[],e=t.length-1;e>=0;e--)for(var i=t.length-1;i>=0;i--)e!==i&&n.push([t[e],t[i]]);return n},bool:Boolean,noop:function(){},tzOffset:6e4*(new Date).getTimezoneOffset()},g=function(t,e){function o(t,n,e){this.klass=n,this.permissions=[],this.id=t;for(var i in e)this.push.apply(this,[i,e[i]])}if(t.constructor===String)var s=new r(t);else if(t.constructor===v.reWheelConnection)var s=t;this.connection=s,s.on("connected",function(){this.connected=!0});var a=s.events;this.on=a.on.bind(this),this.emit=a.emit.bind(this),this.unbind=a.unbind.bind(this),this.$post=s.$post.bind(s),a.on("ws-connected",function(t){console.info("Websocket connected"),t.onMessageJson(l.gotData.bind(l)),t.onMessageText(function(t){console.info("WS message : "+t)})}),a.on("ws-disconnected",function(t){console.error("Websocket disconnected")}),a.on("error-json-404",function(t,n,e,i){console.error("JSON error ",JSON.stringify(t)),delete b[n.split("/")[0]]});var l=this,h={auth_group:n({})},p={},m={},g={},y={},w={},N={},b={},A=new u(n),S=new c(a,b,h,this,A);this.validationEvent=a.on("error-json-513",function(t,n,e,i){currentContext.savingErrorHanlder&&currentContext.savingErrorHanlder(new d(t))});var x=function(t){return t in h?h[t]:(h[t]=n({}),h[t])},O=function(t){return t in UNLINKED?UNLINKED[t]:(UNLINKED[t]={},UNLINKED[t])};o.prototype.save=function(t){var e={permissions:n(this.permissions).map(function(t){return[t[0].id,t[1]]}).toObject()};e.id=this.id;this.klass.modelName;l.$post(this.klass.modelName+"/set_permissions",e,function(n,e,i,o){t(n)})},o.prototype.push=function(t,e){var i=n(e),o=n(this.klass.allPermissions).map(function(t){return[t,i.contains(t)]}).toObject(),r=n(this.permissions).map(function(t){return t[0].id});r.contains(t)?this.permissions[r.indexOf(t)][1]=o:this.permissions.push([h.auth_group.get(t),o])};var M=function(t){var i=n(t.fields);t.privateArgs&&(i=i.merge(t.privateArgs)),l.emit("model-definition",t);var r="if (!row) { row = {}};\n";r+=t.references.map(function(t){return"this._"+t.id+" = row."+t.id+";"}).join(";\n"),r+=i.map(function(t,n){return"date"==t.type||"datetime"==t.type?"this."+n+" = row."+n+"?new Date(row."+n+" * 1000 - "+v.tzOffset+"):null;\n":"boolean"==t.type?"this."+n+" = (row."+n+' === "T") || (row.'+n+" === true);\n":"this."+n+" = row."+n+";\n"}).toString("\n"),r+="if (permissions) {this._permissions = permissions && Lazy(permissions).map(function (x) { return [x, true] }).toObject();}";var s=new Function("row","permissions",r);s.prototype.orm=e,s.ref_translations={},s.modelName=t.name,s.references=n(t.references).pluck("id").toArray(),s.inverse_references=t.referencedBy.map(function(t){return t.by+"_"+t.id+"_set"}),s.referents=t.referencedBy.map(function(t){return[t.by,t.id]}),s.fieldsOrder=t.fieldOrder,s.allPermissions=t.permissions,n(t.representation).size()&&(s.prototype.toString=new Function("return this."+n(t.representation).toString(' + " " + this.'))),s.prototype.toUpperCase=function(){return this.toString().toUpperCase()},s.prototype.toLowerCase=function(){return this.toString().toLowerCase()},s.prototype.delete=function(){return e.delete(this.constructor.modelName,[this.id])},Object.defineProperty(s.prototype,"permissions",{get:function(){return this._permissions?this._permissions:void S.permissions[this.constructor.modelName].ask(this.id)}}),s.prototype.all_perms=function(t){var e=this.id;l.$post(this.constructor.modelName+"/all_perms",{id:this.id},function(i){var r=i,a={},c=n(r).pluck("group_id").unique().map(function(t){return""+t}).difference(h.auth_group.keys()).toArray();n(r).groupBy(function(t){return t.group_id}).each(function(t,e){a[e]=n(t).pluck("name").toArray()});var u=function(n){t(new o(e,s,a))};c.length?l.get("auth_group",c,u):u()})},s.prototype.save=function(t){var e=this.asRaw(),i=(s.fields,this.id),o=this.constructor.modelName;if(t)for(var r in t)e[r]=t[r];n(s.fieldsOrder).filter(function(t){return!0}).each(function(t){t in e&&delete e[t]});var a=l.$post(o+(i?"/post":"/put"),e);return t&&t.constructor===Function&&(a.context.savingErrorHanlder=t),a},s.prototype.copy=function(){var t=new this.constructor(this.asRaw());return t._permissions=this._permissions,t};var c="return {\n"+n(t.references).map(function(t){return t.id+" : this._"+t.id}).concat(i.map(function(t,n){return"date"==t.type||"datetime"==t.type?n+" : (this."+n+"?(Math.round(this."+n+".getTime() - this."+n+".getTimezoneOffset() * 60000) / 1000):null)":"boolean"==t.type?n+" : this."+n+'?"T":"F"':n+" : this."+n})).toString(",\n")+"};";s.prototype.asRaw=new Function(c),s.saveMulti=function(t,e,i){var o=[],r=n(s.fields).filter(function(t){return!t.writable}).pluck("id").toArray();n(t).map(function(t){return t.asRaw()}).each(function(t){n(r).each(function(n){delete t[n]}),o.push(t)}),l.$post(s.modelName,"put",{multiple:o,formIdx:l.formIdx++},function(t){l.gotData(t);var i=h[s.modelName],o=n(t[s.modelName].results).pluck("id").map(function(t){return i.get(t)}).toArray();e&&e(o)},i)},"extra_verbs"in t&&n(t.extra_verbs).each(function(t){var e=t[0],i=t[1],o="data = {id : this.id";i.length&&(o+=", "+n(i).map(function(t){return t+" : "+t}).join(",")),o+="};",i.push("cb"),s.prototype[e]=new Function(i,o+'W2S.W2P_POST(this.constructor.modelName,"'+e+'", data,function(data,status,headers,x){try{\n   if (!headers("nomodel")) {window.W2S.gotData(data,cb);}\n   else {if (cb) {cb(data)}}\n} catch(e){\nif (cb) {cb(data);}\n}\n});\n')}),"privateArgs"in t&&(s.privateArgs=n(t.privateArgs).keys().map(function(t){return[t,!0]}).toObject(),s.prototype.savePA=function(t){var e=this,i={id:this.id},o=this.constructor.privateArgs,r=this.constructor.fields,s=(new this.constructor(t).asRaw(),n(o).keys().map(function(t){return[t,r[t]]}).toObject());n(t).each(function(t,n){n in o&&s[n].writable&&(i[n]=t)}),l.$post(this.constructor.modelName+"/savePA",i,function(){n(i).each(function(t,n){e[n]=t})})}),w[s.modelName]=s;for(var u in t.fields)t.fields[u].id=u;return s.fields=n(t.fields).concat(n(t.privateArgs)).concat(n(t.references).tap(function(t){t.type=t.type||"reference"})).indexBy("id").toObject(),n(t.references).each(function(t){var n=t.to,i="_"+t.id;f(s.prototype,t.id,function(){if(!(n in h)){var t=this;l.describe(n,function(e){S.mainIndex[n].ask(t[i],!0)})}var e=n in h&&this[i]&&h[n].get(this[i]);return!e&&n in S.mainIndex?S.mainIndex[n].ask(this[i],!0):e},function(e){if(e&&e.constructor.modelName!=n)throw new TypeError("You can assign only "+n+" to "+t.id);this[i]=e.id},"new-"+n,"deleted-"+n,"updated-"+n,"new-model-"+n),s.prototype["get"+v.capitalize(t.id)]=function(){return e.get(n,this[i])}}),n(t.referencedBy).each(function(t){var n=t.by+"."+t.id,i=t.by+"_"+v.pluralize(t.id),o=t.by;s.prototype.hasOwnProperty(i)?$log.error("Tryed to redefine property "+i+"s for "+s.modelName):f(s.prototype,i,function(){var t=o in h?p[n].get(this.id+""):null;return S.foreignKeys[n].ask(this.id,!0),t},null,"new-"+o,"updated-"+o,"deleted-"+o),s.prototype["get"+v.capitalize(v.pluralize(t.by))]=function(){var n={};return n[t.id]=[this.id],e.query(t.by,n)}}),t.manyToMany&&(n(t.manyToMany).each(function(t){var e=t.indexName,i=t.first?0:1,o=t.model,r=S.m2mIndex[e]["get"+(1-i)];f(s.prototype,t.model+"s",function(){var t=this,e=[],i=r(t.id),s=null;return i.length&&(s=x(o).get.bind(h[o])),i&&s&&(e=n(i).map(s).filter(v.bool).toArray()),e},null,"received-m2m-"+e,"received-"+o),s.prototype["get"+v.capitalize(v.pluralize(o))]=function(){var t=this;return new Promise(function(s,a){try{S.getM2M(e,[t.id],i,function(e){var i=r(t.id);i.length?l.fetch(o,{id:i},null,function(){var t=h[o].get.bind(h[o]);s(n(i).map(t).filter(v.bool).toArray())}):s([])})}catch(t){console.error(t),a(t)}})},s.fields[v.capitalize(o)]={id:v.capitalize(o),name:v.capitalize(o),writable:!0,readable:!0,type:"M2M",validators:[]}}),s.prototype.unlinkReference=function(t){var e=!1,i=this.id,o=[];"Array"==t.constructor.name&&(e=!0,o=t,t=o[0]);var r=t.constructor.modelName;if(e)var a=n(o).pluck("id").map(function(t){return[i,t]}).toArray();else var a=[[i,t.id]];l.$post(s.modelName+"/"+r+"s/delete",{collection:a})},s.prototype.linkReference=function(t){var e=!1,i=this.id,o=[];"Array"==t.constructor.name&&(e=!0,o=t,t=o[0]);var r=t.constructor.modelName,a=s.modelName+"/"+r;if(e){var c=[];if(a in INDEX_M2M&&(c=n(o).pluck("id").difference(n(INDEX_M2M[a][0].get(this.id))).toArray()),a=r+"/"+s.modelName,a in INDEX_M2M&&(c=n(o).pluck("id").difference(n(INDEX_M2M[a][0].get(this.id))).toArray()),c.length){var u=n(c).map(function(t){return[i,t]}).toArray();W2P_POST(s.modelName,r+"s/put",{collection:u},function(t){})}}else{if(a in S.m2mIndex&&n(S.m2mIndex[a]["get"+v.capitalize(r)](t.id)).find(this))return;l.$post(s.modelName+"/"+r+"s/put",{collection:[[this.id,t.id]]})}}),a.emit("new-model",s),a.emit("new-model-"+s.modelName),s};this.gotData=function(t,e){if(console.info("gotData"),"string"!=typeof t){"_extra"in t&&delete t._extra;var i=t.TOONE,o=t.TOMANY,r=t.MANYTOMANY,s=t.PERMISSIONS,c=t.PA;if(delete t.TOONE,delete t.TOMANY,delete t.MANYTOMANY,delete t.PERMISSIONS,delete t.PA,c||(c={}),t=n(t).filter(function(t,n){return!("deleted"in t)||n in l.modelCache}).toObject(),"m2m"in t){var u=t.m2m;delete t.m2m}n(t).each(function(t,e){l.describe(e,function(i){var o=i;t.results&&t.results.length>0&&t.results[0].constructor==Array&&(t.results=n(t.results).map(function(t){return n(o.fieldsOrder).zip(t).toObject()}).toArray());var r=n(t.results),s=t.deleted;if(e in c){var u=c[e];n(r).each(function(t){t.id in u&&n(u[t.id]).each(function(n,e){t[e]=n})})}var l=x(e),f=l.source;s&&s.forEach(function(t){delete f[t]});var d=r.indexBy("id"),m=d.keys(),g=m.difference(l.keys().map(function(t){return parseInt(t)})),y=m.difference(g);y=y.filter(function(t){return!v.sameAs(d.get(t),l.get(t).asRaw())});var N=n(t.permissions?t.permissions:{}),b=g.map(function(t){return new o(d.get(t),N.get(t))}),A=[];y.each(function(t){var e=l.get(t),r=e.copy(),s=new o(d.get(t));n(i.fields).keys().each(function(t){e[t]=s[t]}),A.push([e,r])}),A.length&&a.emit("updated-"+e,A);var S=b.toArray();n(S).each(function(t){f[t.id]=t}),n(w[e].references).each(function(t){p[e+"."+t]=h[e].groupBy("_"+t)}),S.length&&a.emit("new-"+e,n(S),t.totalResults),s&&a.emit("deleted-"+e,s),a.emit("received-"+e)})}),i&&(console.error("TOONE"),n(i).each(function(t,n){console.log(n);O(n)})),o&&(console.error("TOMANY"),n(o).each(function(t,e){e in ASKED_UNLINKED||(ASKED_UNLINKED[e]=n([])),n(t).each(function(t){ASKED_UNLINKED[e].source.push(t)})})),r&&(console.error("MANYTOMANY"),n(r).each(function(t,e){var i=parseInt(e.split("|")[1]);e=e.split("|")[0],e in ASKED_M2M||(ASKED_M2M[e]=[{},{}]);var o=ASKED_M2M[e][i];n(t).each(function(t){o[t+""]=!0,o[t]=!0})})),u&&l.gotM2M(u),s&&l.gotPermissions(s),e&&e(t),a.emit("got-data")}else if(console.log("data "+t+" refused from gotData()"),e)return e(t)},this.gotPermissions=function(t){n(t).each(function(t,e){n(t[0]).each(function(t,i){e in h&&i in h[e].source&&(h[e].get(i)._permissions=n(t).map(function(t){return[t,!0]}).toObject())}),n(t[0]).size()&&l.emit("update-permissions-"+e,n(t[0]).keys().toArray())}),this.emit("update-permissions")},this.gotM2M=function(t){n(t).each(function(t,e){var i=S.m2mIndex[e];n(t).each(function(t){n(t).each(function(t,n){i[n](t)})}),a.emit("received-m2m"),a.emit("received-m2m-"+e)})},this.fetch=function(t,n,e,i){t in b?setTimeout(function(){l.fetch(t,n,e,i)},500):l.describe(t,function(e){return l.connection.options.realtimeEndPoint?(n=A.filter(e,n),n?(b[t]=!0,l.$post(t+"/list",{filter:n},function(n){l.gotData(n,i),delete b[t]},function(){delete b[t]})):i&&i(),n):void this.$post(t+"/list",sendData,function(e){n||GOT_ALL.source.push(t),l.gotData(e,i)})})},this.get=function(t,n,e){n.constructor!==Array&&(n=[n]),l.fetch(t,{id:n},null,function(){var i=[],o=h[t];for(var r in n)i.push(o.source[n[r]]);e(i)})},this.gotModel=function(t){for(var e in t){var i=t[e];localStorage["description:"+e]=JSON.stringify(t),w[e]=M(i),e in h||(h[e]=n({}))}},this.describe=function(t,n){var e=w[t];if(e)n&&n(e);else if(t in b)setTimeout(function(){l.describe(t,n)},500);else{if(t in N)return;var i="description:"+t;i in localStorage?(this.gotModel(JSON.parse(localStorage[i])),n&&n(w[t])):(b[t]=!0,this.$post(t+"/describe",null,function(e){l.gotModel(e),n&&n(w[t]),delete b[t]},function(n){this.events.modelNotFound.handle(t),N[t]=!0}))}},this.addModelHandler=function(t,n){var e=v.hash(n);t in m||(m[t]=new i),t in g||(g[t]={}),e in g[t]||(g[t][e]=!0,t in w?n(w[t]):m[t].addHandler(n))},this.addPersistentAttributes=function(t,e){var i=function(t,n){n.forEach(function(n){var e="pA:"+t.modelName+":"+n,i="__"+n;Object.defineProperty(t.prototype,n,{get:function(){if(!(i in this)){var t=localStorage[e+this.id];this[i]=t?JSON.parse(t):null}return this[i]},set:function(t){this[i]=t,localStorage[e+this.id]=JSON.stringify(t)}})})};t in y||(y[t]=[]);var o=y[t];if(e)var r=n(e).difference(o).toArray();else var r=o;r.length&&(t in w&&i(w[t],r),e&&Array.prototype.push.apply(o,r))},this.on("new-model",function(t){t.modelName in m&&m[t.modelName].handle(w[t.modelName]),t.modelName in y&&l.addPersistentAttributes(t.modelName)}),this.connect=function(t){this.isConnected?t(this.connection.options):this.connection.connect(function(n){l.isConnected=!0,t(n)})},this.query=function(t,e,i,o){var r=this;this.describe(t,function(s){e=n(e).map(function(t,n){return[n,Array.isArray(t)?t:[t]]}).toObject();var a=v.makeFilter(s,e),c=x(t);r.fetch(t,e,i,function(t){o(c.filter(a).values().toArray())})})},this.delete=function(t,n,e){return this.$post(t+"/delete",{id:n},e)}};h.prototype.getModel=function(t){var n=this;return new Promise(function(e,i){try{n.$orm.connect(function(){n.$orm.describe(t,e)})}catch(t){i(t)}})},h.prototype.get=function(t,n){var e=this,i=!1,o=t;return n.constructor!==Array&&(i=!0,n=[n]),new Promise(function(t,r){try{e.$orm.connect(function(){i?e.$orm.get(o,n,function(n){t(n[0])}):e.$orm.get(o,n,t)})}catch(t){r(t)}})},h.prototype.query=function(t,n,e){var i=this;return new Promise(function(o,r){var s=null;e&&e.constructor===Array&&e.length?s=e:e&&e.constructor===String&&e.length&&(s=e.split(","));try{i.$orm.isConnected?i.$orm.query(t,n,s,o):i.$orm.connect(function(){i.$orm.query(t,n,s,o)})}catch(t){r(t)}})},h.prototype.delete=function(t,n){var e=this;return new Promise(function(i,o){try{e.$orm.connected?e.$orm.delete(t,n,i):e.$orm.connect(function(){e.$orm.delete(t,n,i)})}catch(t){o(t)}})},t.rwt=h}(window,Lazy,SockJS);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
