!function(t,e,n){"use strict";function i(){this.handlers=[],this.strHandlers={}}function r(){var t={},n={},i=0;this.on=function(e,r){e in t||(t[e]=new Array);var o=i++;return t[e].push(r),n[o]=r,o},this.emit=function(e){if(e in t){var n=Array.prototype.slice.call(arguments,1);t[e].forEach(function(t){t.apply(null,n)})}},this.unbind=function(i){var r=0;if(i in n){var o=n[i+""];e(t).each(function(t,e){var n=[];for(var i in t)t[i]===o&&(n.push(i),r++);n.reverse().forEach(function(e){t.splice(e,1)})})}return delete n[i],r},this.once=function(t,e){var n=this,i=this.on(t,function(){e.apply(this,arguments),n.unbind(i)})}}function o(){return new Proxy({},{get:function(t,e){return"string"==typeof e?"toString"===e?y:v.mock:t[e]}})}function s(t,e){var i=new n(t);i.onopen=function(t){console.log("open : "+t),i.tenant(),e.emit("realtime-connection-open",t)},i.onmessage=function(t){if("message"==t.type)try{e.emit("realtime-message-json",JSON.parse(t.data))}catch(n){e.emit("realtime-message-text",JSON.parse(t.data))}else console.log("from realtime ",t)},i.onclose=function(){setTimeout(v.wsConnect,1e3),e.emit("realtime-connection-closed")},i.tenant=function(){i.send("TENANT:"+e.cachedStatus.application+":"+e.cachedStatus.token)},this.close=function(){i.close()}}function a(t,e){var n=new r;this.getLogin=e,this.endPoint=t.endsWith("/")?t:t+"/",this.on=n.on,this.unbind=n.unbind,this.emit=n.emit,this.once=n.once,this.cachedStatus={},this.isConnected=!1,this.isLoggedIn=!1}function c(){var t=!1;this.touch=function(){t=!0},this.touched=function(){var e=t;return t=!1,e}}function u(t,n,i,r){if(!n)var n=[];var o=[];this.ask=function(i,s){r&&i in r.source||e(n).contains(i)||(o.push(i),s||n.push(i),t.touch())},this.getAskedIndex=function(){return n},this.missings=function(){return e(o.splice(0,o.length)).unique().toArray()}}function l(t,n,i,r){var o=new c,s={},a={},l={},f={},h={};this.mainIndex=s,this.foreignKeys=a,this.m2m=l,this.m2mIndex=f,this.permissions=h,i.on("model-definition",function(t,n){var i=r.getIndexFor(t.name,"id");s[t.name]=new u(o,i,"mainIndex."+t.name,n),h[t.name]=new u(o,null,"permissions."+t.name),e(t.references).each(function(e){var n=t.name+"_"+e.id;a[n]=new u(o,r.getIndexFor(e.to,"id"),e.to+".id foreignKeys."+n)}),e(t.referencedBy).each(function(t){var e=t.by+"."+t.id;a[e]=new u(o,r.getIndexFor(t.by,t.id),t.by+"."+t.id+" foreignKeys."+e)}),e(t.manyToMany).each(function(t){t.indexName in l||(l[t.indexName]=[new u(o,null,"m2m."+t.indexName+"[0]"),new u(o,null,"m2m."+t.indexName+"[1]")]),t.indexName in f||(f[t.indexName]=new d(t,l[t.indexName]))})});var p=function(e,n,r,o){i.$post((n?v.reverse("/",e):e)+"s/list",{collection:r},function(n){i.gotData(n,o),delete t[e]})},m=function(n,i,r,o){e(i).each(l[n][r].ask.bind(l[n][r])),i=l[n][r].missings(),i.length?(t[n]=1,p(n,r,i,o)):o&&o()};this.getM2M=m;var g=function(){if(o.touched()){if(e(t).values().sum())return void o.touch();var r=!1;e(l).each(function(t,n){e(t).each(function(t,o){var a=t.missings();if(a=e(a).filter(Boolean).map(function(t){return parseInt(t)}).toArray(),a.length){var c=f[n],u=c["get"+(1-o)].bind(c);r=!0,p(n,o,a,function(t){var r=a.map(u);if(r.length){var c=n.split("/")[1-o];i.describe(c,function(){e(r).flatten().unique().each(function(t){s[c].ask(t,!0)})})}})}})}),e(s).each(function(t,o){var s=t.missings();if(s.length){r=!0;o in n?n[o].keys():e();i.fetch(o,{id:s},null,v.noop)}}),e(a).map(function(t,e){return[e,t.missings()]}).filter(function(t){return t[1].length}).each(function(t){r=!0;var e=t[1],n=t[0],o=n.split("."),s=o[0],a=o[1],c={};c[a]=e,i.fetch(s,c)}),e(e(h).map(function(t,e){return[e,t.missings()]}).filter(function(t){return t[1].length}).toObject()).each(function(n,o){r=!0,n.length&&(t[o]=1,i.$post(o+"/my_perms",{ids:e(n).unique().toArray()},function(e){i.gotPermissions(e.PERMISSIONS),delete t[o]}))})}};setInterval(g,50)}function f(){var t={},n={},i={},r=function(t,n,i){var r=[];if(i)for(var o in t)for(var s in n)r.push(e([t[o],n[s]]).flatten().toArray());else for(var o in t)for(var s in n)r.push([t[o],n[s]]);return r},o=function(t){for(var e=!1,n=t[0],i=1;i<t.length;++i)n=r(n,t[i],e),e=!0;return n},s=function(t){var n=o(e(t).values().toArray()),i=e(t).keys().toArray();return n.map(function(t){var e={};return i.forEach(function(n,i){e[n]=t[i]}),e})},a=function(t,n,i){var r=t.modelName,o=this.getIndexFor,s=(e(n).map(function(t,e){return[e,r+"."+e]}).toObject(),e(n).keys().map(function(t){return[t,o(r,t)]}).toObject());for(var a in n){var c=e(n[a]).difference(s[a]).toArray();if(c.length){var u=e([[a,c]]).toObject();return i||Array.prototype.push.apply(s[a],c),u}return null}},c=function(t,n){t.name in i||(i[t.name]=[]);var r=i[t.name],o=e(n).size();r.filter(v.makeFilter(t,n," && ",!0)).filter(function(t){e(t).size()>o})};this.filter=function(r,o){var u=r.modelName,l=e(o).size();switch(l){case 0:var f=t[u];return t[u]=!0,u in n&&delete n[u],u in i&&delete i[u],f?null:{};case 1:var d=a.call(this,r,o);return c.call(this,r,o),d}var h=this,p=e(o).keys().some(function(t){var e={};return e[t]=o[t],null==a.call(h,r,e,!0)});if(p)return null;u in i||(i[u]=[]);var m=s(o),g=i[u].filter(v.makeFilter(r,o," || ",!0));if(g.length){var y=[];for(var w in g)y.push.apply(y,m.filter(v.makeFilter(r,g[w]," && ",!0)));var b=e(m).difference(y).toArray()}else var b=m;if(b.length){i[u].push.apply(i[u],b);var b=e(o).keys().map(function(t){var n=e(b).pluck(t).unique().toArray();return[t,n.length?n:o[t]]}).toObject();return c(r,b),b}return null},this.getIndexFor=function(t,e){var i=t+"."+e;return i in n||(n[i]=[]),n[i]}}function d(t,n){var i=[];this.add=i.push.bind(i),this.add=function(t){e(i).find(t)||i.push(t)},this.get0=function(t){return n[1].ask(t),e(i).filter(function(e){return e[0]===t}).pluck("1").toArray()},this.get1=function(t){return n[0].ask(t),e(i).filter(function(e){return e[1]===t}).pluck("0").toArray()},this["get"+v.capitalize(t.indexName.split("/")[1])]=this.get1,this["get"+v.capitalize(t.indexName.split("/")[0])]=this.get0,this.del=function(t){for(var e=i.length,n=null,r=0;r<e;r++)if(i[r][0]===t[0]&&i[r][1]===t[1]){n=r;break}n&&i.splice(r,1),console.log("deleting ",t)}}function h(t,n,i,r){var o=Array.prototype.slice.call(arguments,4),s={};e(o).each(function(e){t.orm.on(e,function(){s={}})});var a={get:function(){return this.id in s||(s[this.id]=i.call(this)),s[this.id]}};r&&(a.set=function(t){isFinite(t)?(r.call(this,t),this.id in s&&delete s[this.id]):this.id in s&&delete s[this.id]}),Object.defineProperty(t,n,a)}function p(t){this.resource=t._resource,this.formIdx=t.formIdx,this.fields=t.errors}function m(t,e){this.$orm=new b(new v.reWheelConnection(t,e),this),this.on=this.$orm.on.bind(this.$orm),this.emit=this.$orm.emit.bind(this.$orm),this.unbind=this.$orm.unbind.bind(this.$orm),this.once=this.$orm.once,this.addModelHandler=this.$orm.addModelHandler.bind(this.$orm),this.addPersistentAttributes=this.$orm.addPersistentAttributes.bind(this.$orm),this.utils=v,this.logout=this.$orm.connection.logout.bind(this.$orm.connection)}i.prototype.addHandler=function(t){var e=v.hash(t.toString());e in this.strHandlers||(this.strHandlers[e]=t,this.handlers.push(t))},i.prototype.handle=function(){var t=Array.prototype.slice.call(arguments,0);this.handlers.forEach(function(e){e.apply(null,t)})},i.prototype.handleBy=function(){var t=Array.prototype.slice.call(arguments,1),e=arguments[0];this.handlers.forEach(function(n){n.apply(e,t)})};var g=0,y=function(){return""},v={renameFunction:function(t,e){return new Function("return function (call) { return function "+t+" () { return call(this, arguments) }; };")()(Function.apply.bind(e))},cached:function(t,e){function n(){return this[e]||(this[e]=t.call(this,[arguments])),this[e]}return e||(e="_"+g++),n},log:function(){console.log(arguments)},xdr:function(t,n,i,r,o){return new Promise(function(i,s){var a;n||(n={}),XMLHttpRequest?(a=new XMLHttpRequest,a.onreadystatechange=function(){if(4===a.readyState){try{var t=JSON.parse(a.responseText)}catch(t){var t=null}var e={responseData:t,responseText:a.responseText,status:a.status,request:a};a.status>=200&&a.status<400?i(e):s(e)}}):XDomainRequest?(a=new XDomainRequest,a.onload=function(){i(a.responseText,a.statusText,a)}):s(new Error("CORS not supported")),a.open("POST",t,!0),a.onerror=s,a.setRequestHeader("Accept","application/json"),r&&(n.__token__=r),o?(a.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),n=e(n).map(function(t,e){return e+"="+encodeURI(t.toString())}).toArray().join("&")):(a.setRequestHeader("Content-Type","text/plain"),n=e(n).size()?JSON.stringify(n):""),a.send(n)})},capitalize:function(t){return t[0].toUpperCase()+t.slice(1).toLowerCase()},hash:function(t){t=t.toString();for(var e=1,n=0;n<t.length;n++)e*=1+t.charCodeAt(n);return(e%34958374957).toString()},makeFilter:function(t,n,i,r){if(i||(i=" && "),0===e(n).size())return function(t){return!0};var o=e(n).map(function(n,i){return n||(n=[null]),Array.isArray(n)||(n=[n]),r||"reference"!==t.fields[i].type?"string"===t.fields[i].type&&(n=n.map(JSON.stringify)):(i="_"+i,n=e(n).map(function(t){return t&&t.constructor!==Number?t.id:t}).toArray()),"("+e(n).map(function(t){return t?t===orm.utils.mock&&console.error("makeFilter with Mock Object"):console.error("makeFilter x is null"),"(x."+i+" === "+t+")"}).join(" || ")+")"}).toArray().join(i);return new Function("x","return "+o)},sameAs:function(t,e){for(var n in t)if(e[n]!=t[n])return!1;return!0},pluralize:function(t,e){return t+"s"},beforeCall:function(t,e){var n=function(){e().then(t)};return n},cleanStorage:function(){e(localStorage).keys().each(function(t){delete localStorage[t]})},cleanDescription:function(){e(localStorage).filter(function(t,n){return e(n).startsWith("description:")}).keys().each(function(t){delete localStorage[t]})},reverse:function(t,e){return e.split(t).reverse().join(t)},permutations:function(t){for(var e=[],n=t.length-1;n>=0;n--)for(var i=t.length-1;i>=0;i--)n!==i&&e.push([t[n],t[i]]);return e},waitFor:function(t,e){var n=function(){t()?e():setTimeout(n,500)};setTimeout(n,500)},bool:Boolean,noop:function(){},tzOffset:6e4*(new Date).getTimezoneOffset(),transFieldType:{date:function(t){return new Date(1e3*t+v.tzOffset)},datetime:function(t){return new Date(1e3*t+v.tzOffset)},string:function(t){return t.toString()},text:function(t){return t.toString()},integer:function(t){return parseInt(t)},float:function(t){return parseFloat(t)}},mock:o()},w="lastRWTConnectionStatus";a.prototype.$post=function(t,e,n){var i=this,r=new Promise(function(r,o){v.xdr(i.endPoint+t,e,i.cachedStatus.application,i.cachedStatus.token).then(function(o){i.emit("http-response",o.responseText,o.status,t,e),i.emit("http-response-"+o.status,o.responseText,t,e),o.responseData&&i.emit("http-response-"+o.status+"-json",o.responseData,t,e),n&&n(o.responseData||o.responseText),r(o.responseData||o.responseText)},function(n){n.responseData?(i.emit("error-json",n.responseData,n.status,t,e,n),i.emit("error-json-"+n.status,n.responseData,t,e,n)):(i.emit("error-http",n.responseText,n.status,t,e,n),i.emit("error-http-"+n.status,n.responseText,t,e,n)),o(n.responseData||n.responseText)})});return r},a.prototype.status=function(t,n){var i="token:"+this.endPoint,r=this;if(n&&(this.cachedStatus={},delete localStorage[i]),this.statusWaiting)return void v.waitFor(function(){return!r.statusWaiting},function(){r.status(t,n)});if(!e(this.cachedStatus).size()){var o={};return i in localStorage&&(o.__token__=localStorage[i]),this.statusWaiting=!0,void this.$post("api/status",o,function(e){r.updateStatus(e),localStorage[i]=e.token,t(e),r.statusWaiting=!1})}t(this.cachedStatus),t(this.cachedStatus)},a.prototype.updateStatus=function(t){var e=parseFloat(localStorage.lastBuild)||1;e<t.last_build&&(v.cleanDescription(),localStorage.lastBuild=t.last_build),this.isConnected=Boolean(t.token),this.isLoggedIn=Boolean(t.user_id);var n=this.cachedStatus;if(this.cachedStatus=t,!n.user_id&&t.user_id)this.emit("logged-in",t.user_id);else if(n.user_id&&!t.user_id)this.emit("logged-out");else if(this.isConnected&&!this.isLoggedIn&&(this.emit("login-required"),this.getLogin)){var i=this.getLogin();i.constructor===Object?this.login(i.username,i.password,i.callBack):i.constructor===Promise&&i.then(function(t){this.login(t.username,t.password,t.callBack)})}!n.realtimeEndPoint&&t.realtimeEndPoint?this.wsConnection=new s(t.realtimeEndPoint,this):n.realtimeEndPoint&&!t.realtimeEndPoint&&(this.wsConnection.close(),delete this.wsConnection),this.emit("update-connection-status",t,n),localStorage[w]=JSON.stringify(t)},a.prototype.login=function(t,e){var n=this;return new Promise(function(i,r){v.xdr(n.endPoint+"api/login",{username:t||"",password:e||""},null,n.cachedStatus.token,!0).then(function(t){n.updateStatus(t.responseData),i({status:"success",userid:n.cachedStatus.user_id})},function(t){var e="Could not receive error from server";t.responseData&&"error"in t.responseData&&(e=t.responseData.error),i({error:e,status:"error"})})})},a.prototype.logout=function(){var t=this;return new Promise(function(e,n){t.$post("api/logout").then(function(n){t.updateStatus({}),delete localStorage[w],e()},n)})},a.prototype.connect=function(t){this.isLoggedIn?t(this.cachedStatus.user_id):(this.once("logged-in",function(e){t(e)}),this.status(t||v.noop))},v.reWheelConnection=a;var b=function(t,n){function r(t,e,n){this.klass=e,this.permissions=[],this.id=t;for(var i in n)this.push.apply(this,[i,n[i]])}if(t.constructor===String)var o=new a(t);else if(t.constructor===v.reWheelConnection)var o=t;this.connection=o,o.on("connected",function(){this.connected=!0}),this.on=o.on,this.emit=o.emit,this.unbind=o.unbind,this.once=o.once,this.$post=o.$post.bind(o),this.on("ws-connected",function(t){console.info("Websocket connected"),t.onMessageJson(s.gotData.bind(s)),t.onMessageText(function(t){console.info("WS message : "+t)})}),this.on("ws-disconnected",function(t){console.error("Websocket disconnected")}),this.on("error-json-404",function(t,e,n,i){console.error("JSON error ",JSON.stringify(t)),delete b[e.split("/")[0]]}),this.on("realtime-message-json",function(t){s.gotData(t)});var s=this,c={auth_group:e({})},u={},d={},m={},g={},y={},w={},b={},S=new f(e),A=new l(b,c,this,S);window.IDB=c,this.validationEvent=this.on("error-json-513",function(t,e,n,i){currentContext.savingErrorHanlder&&currentContext.savingErrorHanlder(new p(t))});var k=function(t){return t in c?c[t]:(c[t]=e({}),c[t])};r.prototype.save=function(t){var n={permissions:e(this.permissions).map(function(t){return[t[0].id,t[1]]}).toObject()};n.id=this.id;this.klass.modelName;s.$post(this.klass.modelName+"/set_permissions",n,function(e,n,i,r){t(e)})},r.prototype.push=function(t,n){var i=e(n),r=e(this.klass.allPermissions).map(function(t){return[t,i.contains(t)]}).toObject(),o=e(this.permissions).map(function(t){return t[0].id});o.contains(t)?this.permissions[o.indexOf(t)][1]=r:this.permissions.push([c.auth_group.get(t),r])};var N=function(t){t.fields.id.readable=!1,t.fields.id.writable=!1;var i=e(t.fields);t.privateArgs&&(i=i.merge(t.privateArgs)),s.emit("model-definition",t,k(t.name));var o="if (!row) { row = {}};\n";o+=t.references.map(function(t){return"this._"+t.id+" = row."+t.id+";"}).join(";\n"),o+=i.map(function(t,e){return"date"==t.type||"datetime"==t.type?"this."+e+" = row."+e+"?new Date(row."+e+" * 1000 - "+v.tzOffset+"):null;\n":"boolean"==t.type?"this."+e+" = (row."+e+' === "T") || (row.'+e+" === true);\n":"this."+e+" = row."+e+";\n"}).toString("\n"),o+="if (permissions) {this._permissions = permissions && Lazy(permissions).map(function (x) { return [x, true] }).toObject();}";var a=new Function("row","permissions",o);a.prototype.orm=n,a.ref_translations={},a.modelName=t.name,a.references=e(t.references).pluck("id").toArray(),a.inverse_references=t.referencedBy.map(function(t){return t.by+"_"+t.id+"_set"}),a.referents=t.referencedBy.map(function(t){return[t.by,t.id]}),a.fieldsOrder=t.fieldOrder,a.allPermissions=t.permissions,e(t.representation).size()&&(a.prototype.toString=new Function("return this."+e(t.representation).toString(' + " " + this.'))),a.prototype.toUpperCase=function(){return this.toString().toUpperCase()},a.prototype.toLowerCase=function(){return this.toString().toLowerCase()},a.prototype.delete=function(){return n.delete(this.constructor.modelName,[this.id])},Object.defineProperty(a.prototype,"permissions",{get:function(){return this._permissions?this._permissions:void A.permissions[this.constructor.modelName].ask(this.id)}}),a.prototype.all_perms=function(t){var n=this.id;s.$post(this.constructor.modelName+"/all_perms",{id:this.id},function(i){var o=i,u={},l=e(o).pluck("group_id").unique().map(function(t){return""+t}).difference(c.auth_group.keys()).toArray();e(o).groupBy(function(t){return t.group_id}).each(function(t,n){u[n]=e(t).pluck("name").toArray()});var f=function(e){t(new r(n,a,u))};l.length?s.get("auth_group",l,f):f()})},a.prototype.save=function(t){var n=this.asRaw(),i=a.fields,r=this.id,o=this.constructor.modelName;if(t)for(var c in t)n[c]=t[c];e(a.fieldsOrder).filter(function(t){return!i[t].writable}).each(function(t){t in n&&delete n[t]}),r&&(n.id=r);var u=s.$post(o+(r?"/post":"/put"),n);return t&&t.constructor===Function&&(u.context.savingErrorHanlder=t),u},a.prototype.copy=function(){var t=new this.constructor(this.asRaw());return t._permissions=this._permissions,t};var l="return {\n"+e(t.references).map(function(t){return t.id+" : this._"+t.id}).concat(i.map(function(t,e){return"date"==t.type||"datetime"==t.type?e+" : (this."+e+"?(Math.round(this."+e+".getTime() - this."+e+".getTimezoneOffset() * 60000) / 1000):null)":"boolean"==t.type?e+" : this."+e+'?"T":"F"':e+" : this."+e})).toString(",\n")+"};";a.prototype.asRaw=new Function(l),a.saveMulti=function(t,n,i){var r=[],o=e(a.fields).filter(function(t){return!t.writable}).pluck("id").toArray();e(t).map(function(t){return t.asRaw()}).each(function(t){e(o).each(function(e){delete t[e]}),r.push(t)}),s.$post(a.modelName,"put",{multiple:r,formIdx:s.formIdx++},function(t){s.gotData(t);var i=c[a.modelName],r=e(t[a.modelName].results).pluck("id").map(function(t){return i.get(t)}).toArray();n&&n(r)},i)},"extra_verbs"in t&&e(t.extra_verbs).each(function(t){var n=t[0],i=t[1],r="var data = {id : this.id";i.length&&(r+=", "+e(i).map(function(t){return t+" : "+t}).join(",")),r+="};\n",i=["post","gotData"].concat(i),i.push("cb");var o=r+' return post("'+a.modelName+"/"+n+'", data,cb);',c=new Function(i,o);a.prototype[n]=function(){var t=[s.$post,s.gotData].concat(Array.prototype.slice.call(arguments,0));return c.apply(this,t)}}),"privateArgs"in t&&(a.privateArgs=e(t.privateArgs).keys().map(function(t){return[t,!0]}).toObject(),a.prototype.savePA=function(t){var n=this,i={id:this.id},r=this.constructor.privateArgs,o=this.constructor.fields,a=(new this.constructor(t).asRaw(),e(r).keys().map(function(t){return[t,o[t]]}).toObject());e(t).each(function(t,e){e in r&&a[e].writable&&(i[e]=t)}),s.$post(this.constructor.modelName+"/savePA",i,function(){e(i).each(function(t,e){n[e]=t})})}),y[a.modelName]=a;for(var f in t.fields)t.fields[f].id=f;return a.fields=e(t.fields).concat(e(t.privateArgs)).concat(e(t.references).tap(function(t){t.type=t.type||"reference"})).indexBy("id").toObject(),e(a.fields).each(function(t){t.widget||("reference"===t.type?t.widget="choices":t.widget=t.type)}),e(t.references).each(function(t){var e=t.to,i="_"+t.id;h(a.prototype,t.id,function(){if(!this[i])return v.mock;if(!(e in c)){var t=this;s.describe(e,function(n){A.mainIndex[e].ask(t[i],!0)})}var n=e in c&&this[i]&&c[e].get(this[i]);return!n&&e in A.mainIndex?("number"==typeof this[i]?A.mainIndex[e].ask(this[i],!0):console.warn("null reference for "+i+"("+this.id+") resource "+a.modelName),v.mock):n},function(n){if(n){if(n.constructor!==v.mock&&n.constructor.modelName!==e)throw new TypeError("You can assign only "+e+" to "+t.id);this[i]=n.id}else this[i]=null},"new-"+e,"deleted-"+e,"updated-"+e,"new-model-"+e),a.prototype["get"+v.capitalize(t.id)]=function(){return n.get(e,this[i])}}),e(t.referencedBy).each(function(t){var e=t.by+"."+t.id,i=t.by+"_"+v.pluralize(t.id),r=t.by;a.prototype.hasOwnProperty(i)?console.error("Tryed to redefine property "+i+"s for "+a.modelName):h(a.prototype,i,function(){var t=r in c?u[e].get(this.id+""):null;return A.foreignKeys[e].ask(this.id,!0),t},null,"new-"+r,"updated-"+r,"deleted-"+r),a.prototype["get"+v.capitalize(v.pluralize(t.by))]=function(){var e={};return e[t.id]=[this.id],n.get(t.by,e)}}),t.manyToMany&&(e(t.manyToMany).each(function(t){var n=t.indexName,i=t.first?0:1,r=t.model,o=A.m2mIndex[n]["get"+(1-i)];h(a.prototype,t.model+"s",function(){var t=this,n=[],i=o(t.id),s=null;return i.length&&(s=k(r).get.bind(c[r])),i&&s&&(n=e(i).map(s).filter(v.bool).toArray()),n},null,"received-m2m-"+n,"received-"+r),a.prototype["get"+v.capitalize(v.pluralize(r))]=function(){var t=this;return new Promise(function(a,u){try{A.getM2M(n,[t.id],i,function(n){var i=o(t.id);i.length?s.fetch(r,{id:i},null,function(){var t=c[r].get.bind(c[r]);a(e(i).map(t).filter(v.bool).toArray())}):a([])})}catch(t){console.error(t),u(t)}})},a.fields[v.capitalize(r)]={id:v.capitalize(r),name:v.capitalize(r),writable:!0,readable:!0,type:"M2M",validators:[]}}),a.prototype.unlinkReference=function(t){var n=!1,i=this.id,r=[];"Array"==t.constructor.name&&(n=!0,r=t,t=r[0]);var o=t.constructor.modelName;if(n)var c=e(r).pluck("id").map(function(t){return[i,t]}).toArray();else var c=[[i,t.id]];s.$post(a.modelName+"/"+o+"s/delete",{collection:c})},a.prototype.linkReference=function(t){var n=!1,i=this.id,r=[];"Array"==t.constructor.name&&(n=!0,r=t,t=r[0]);var o=t.constructor.modelName,c=a.modelName+"/"+o;if(n){var u=[];if(c in INDEX_M2M&&(u=e(r).pluck("id").difference(e(INDEX_M2M[c][0].get(this.id))).toArray()),c=o+"/"+a.modelName,c in INDEX_M2M&&(u=e(r).pluck("id").difference(e(INDEX_M2M[c][0].get(this.id))).toArray()),u.length){var l=e(u).map(function(t){return[i,t]}).toArray();W2P_POST(a.modelName,o+"s/put",{collection:l},function(t){})}}else{if(c in A.m2mIndex&&e(A.m2mIndex[c]["get"+v.capitalize(o)](t.id)).find(this))return;s.$post(a.modelName+"/"+o+"s/put",{collection:[[this.id,t.id]]})}}),s.emit("new-model",a),s.emit("new-model-"+a.modelName),a};this.gotData=function(t,n){if(console.info("gotData"),"string"!=typeof t){"_extra"in t&&delete t._extra;var i=(t.TOONE,t.TOMANY,t.MANYTOMANY,t.PERMISSIONS),r=t.PA;if(delete t.TOONE,delete t.TOMANY,delete t.MANYTOMANY,delete t.PERMISSIONS,delete t.PA,r||(r={}),t=e(t).filter(function(t,e){return!("deleted"in t)||e in y}).toObject(),"m2m"in t){var o=t.m2m;delete t.m2m}e(t).each(function(t,n){s.describe(n,function(i){var o=i;t.results&&t.results.length>0&&t.results[0].constructor==Array&&(t.results=e(t.results).map(function(t){return e(o.fieldsOrder).zip(t).toObject()}).toArray());var a=e(t.results),l=t.deleted;if(n in r){var f=r[n];e(a).each(function(t){t.id in f&&e(f[t.id]).each(function(e,n){t[n]=e})})}var d=k(n),h=d.source;l&&l.forEach(function(t){delete h[t]});var p=a.indexBy("id").toObject(),m=e(p).keys(),g=m.difference(d.keys().map(function(t){return parseInt(t)})),w=m.difference(g);w=w.filter(function(t){return!v.sameAs(p[t],h[t].asRaw())}).toArray();var b=e(t.permissions?t.permissions:{}),S=g.map(function(t){return new o(p[t],b.get(t))}),A=[];e(i.references).map(function(t){return[t,1]}).toObject();w.forEach(function(t){var n=h[t],r=n.copy(),o=p.get(t);e(i.fields).each(function(t,e){switch(t.type){case"reference":n["_"+e]=o[e],n[e]=NaN;break;case"date":n[e]=new Date(1e3*o[e]);break;case"datetime":n[e]=new Date(1e3*o[e]);break;case"boolean":switch(o[e]){case null:n[e]=null;break;case"T":n[e]=!0;break;case"F":n[e]=!1;break;case!0:n[e]=!0;break;case!1:n[e]=!1}break;default:n[e]=o[e]}}),A.push([o,r])}),A.length&&s.emit("updated-"+n,A);var N=S.toArray();e(N).each(function(t){h[t.id]=t}),e(y[n].references).each(function(t){u[n+"."+t]=c[n].groupBy("_"+t)}),N.length&&s.emit("new-"+n,e(N),t.totalResults),l&&s.emit("deleted-"+n,l),s.emit("received-"+n)})}),o&&s.gotM2M(o),i&&s.gotPermissions(i),n&&n(t),s.emit("got-data")}else if(console.log("data "+t+" refused from gotData()"),n)return n(t)},this.gotPermissions=function(t){e(t).each(function(t,n){e(t[0]).each(function(t,i){n in c&&i in c[n].source&&(c[n].get(i)._permissions=e(t).map(function(t){return[t,!0]}).toObject())}),e(t[0]).size()&&s.emit("update-permissions-"+n,e(t[0]).keys().toArray())}),this.emit("update-permissions")},this.gotM2M=function(t){e(t).each(function(t,n){var i=A.m2mIndex[n];e(t).each(function(t){e(t).each(function(t,e){i[e](t)})}),s.emit("received-m2m"),s.emit("received-m2m-"+n)})},this.fetch=function(t,e,n,i){t in b?setTimeout(function(){s.fetch(t,e,n,i)},500):s.describe(t,function(n){return s.connection.cachedStatus.realtimeEndPoint?(e=S.filter(n,e),e?(b[t]=!0,s.$post(t+"/list",{filter:e}).then(function(e){s.gotData(e,i),delete b[t]},function(e){delete b[t]})):i&&i(),e):void this.$post(t+"/list",sendData,function(n){e||GOT_ALL.source.push(t),s.gotData(n,i)})}.bind(this))},this.get=function(t,e,n){e.constructor!==Array&&(e=[e]),s.fetch(t,{id:e},null,function(){var i=[],r=c[t];for(var o in e)i.push(r.source[e[o]]);n(i)})},this.gotModel=function(t){for(var n in t){var i=t[n];localStorage["description:"+n]=JSON.stringify(t),y[n]=N(i),n in c||(c[n]=e({}))}},this.describe=function(t,e){var n=y[t];if(n)e&&e(n);else if(t in b)setTimeout(function(){s.describe(t,e)},500);else{if(t in w)return;var i="description:"+t;i in localStorage?(this.gotModel(JSON.parse(localStorage[i])),e&&e(y[t])):(b[t]=!0,this.$post(t+"/describe",null,function(n){s.gotModel(n),e&&e(y[t]),delete b[t]},function(e){this.modelNotFound.handle(t),w[t]=!0}))}},this.addModelHandler=function(t,e){var n=v.hash(e);t in d||(d[t]=new i),t in m||(m[t]={}),n in m[t]||(m[t][n]=!0,t in y?e(y[t]):d[t].addHandler(e))},this.addPersistentAttributes=function(t,n){var i=function(t,e){e.forEach(function(e){var n="pA:"+t.modelName+":"+e,i="__"+e;Object.defineProperty(t.prototype,e,{get:function(){if(!(i in this)){var t=localStorage[n+this.id];this[i]=t?JSON.parse(t):null}return this[i]},set:function(t){this[i]=t,localStorage[n+this.id]=JSON.stringify(t)}})})};t in g||(g[t]=[]);var r=g[t];if(n)var o=e(n).difference(r).toArray();else var o=r;o.length&&(t in y&&i(y[t],o),n&&Array.prototype.push.apply(r,o))},this.on("new-model",function(t){t.modelName in d&&d[t.modelName].handle(y[t.modelName]),t.modelName in g&&s.addPersistentAttributes(t.modelName)}),this.query=function(t,n,i,r){var o=this;this.describe(t,function(s){n=e(n).map(function(t,e){return[e,Array.isArray(t)?t:[t]]}).toObject();var a=v.makeFilter(s,n),c=k(t);o.fetch(t,n,i,function(t){r(c.filter(a).values().toArray())})})},this.delete=function(t,e,n){return this.$post(t+"/delete",{id:e},n)},this.connect=function(t){this.connection.isLoggedIn?t():this.connection.connect(t)}};m.prototype.connect=function(){var t=this.$orm.connection;return new Promise(function(e,n){t.connect(e)})},m.prototype.login=function(t,e){return new Promise(function(n,i){this.$orm.connection.login(t,e,n)}.bind(this))},m.prototype.logout=function(t){return this.$orm.connection.logout()},m.prototype.getModel=function(t){var e=this;return new Promise(function(n,i){try{e.$orm.connect(function(){e.$orm.describe(t,n)})}catch(t){i(t)}})},m.prototype.get=function(t,e){var n,i=this,r=!1;return"number"==typeof e?(r=!0,n={id:[e]}):Array.isArray(e)?n={id:e}:"object"==typeof e?n=e:null===e&&(n={}),new Promise(function(e,o){try{i.$orm.connect(function(){i.$orm.query(t,n,null,function(t){e(r?t.length?t[0]:null:t)})})}catch(t){o(t)}})},m.prototype.delete=function(t,e){var n=this;return new Promise(function(i,r){try{n.$orm.connect(function(){n.$orm.delete(t,e,i)})}catch(t){r(t)}})},m.prototype.getLoggedUser=function(){var t=this;return this.$orm.connection.cachedStatus.user_id?this.get("auth_user",this.$orm.connection.cachedStatus.user_id):new Promise(function(e,n){t.once("logged-in",function(n){t.get("auth_user",n).then(e)})})},m.prototype.$sendToEndpoint=function(t,e){return this.$orm.$post(t,e)},m.prototype.login=function(t,e){return this.$orm.connection.login(t,e)},t.rwt=m}(window,Lazy,SockJS);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhbmRsZXJzLmpzIiwidXRpbHMuanMiLCJjb25uZWN0aW9uLmpzIiwidG91Y2hlci5qcyIsInZhY3V1bWNhY2hlci5qcyIsImF1dG9saW5rZXIuanMiLCJsaXN0Y2FjaGVyLmpzIiwibWFueXRvbWFueS5qcyIsImNhY2hlci5qcyIsIm9ybS5qcyJdLCJuYW1lcyI6WyJIYW5kbGVyIiwidGhpcyIsImhhbmRsZXJzIiwic3RySGFuZGxlcnMiLCJOYW1lZEV2ZW50TWFuYWdlciIsImV2ZW50cyIsImhhbmRsZXJJZCIsImlkeElkIiwib24iLCJuYW1lIiwiZnVuYyIsIkFycmF5IiwiaWQiLCJwdXNoIiwiZW1pdCIsImFyZ3MiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJhcmd1bWVudHMiLCJmb3JFYWNoIiwiZXZlbnQiLCJhcHBseSIsInVuYmluZCIsImhhbmRsZXIiLCJjb3VudCIsIkxhenkiLCJlYWNoIiwidiIsImsiLCJpZHgiLCJuIiwicmV2ZXJzZSIsIngiLCJzcGxpY2UiLCJvbmNlIiwiZXZlbnROYW1lIiwiaGFuZGxlckZ1bmN0aW9uIiwic2VsZiIsIm1vY2tPYmplY3QiLCJQcm94eSIsImdldCIsInRhcmdldCIsIm51bGxTdHJpbmciLCJ1dGlscyIsIm1vY2siLCJSZWFsdGltZUNvbm5lY3Rpb24iLCJlbmRQb2ludCIsInJ3dENvbm5lY3Rpb24iLCJjb25uZWN0aW9uIiwiU29ja0pTIiwib25vcGVuIiwiY29uc29sZSIsImxvZyIsInRlbmFudCIsIm9ubWVzc2FnZSIsInR5cGUiLCJKU09OIiwicGFyc2UiLCJkYXRhIiwiZSIsIm9uY2xvc2UiLCJzZXRUaW1lb3V0Iiwid3NDb25uZWN0Iiwic2VuZCIsImNhY2hlZFN0YXR1cyIsImFwcGxpY2F0aW9uIiwidG9rZW4iLCJjbG9zZSIsInJlV2hlZWxDb25uZWN0aW9uIiwiZ2V0TG9naW4iLCJlbmRzV2l0aCIsImlzQ29ubmVjdGVkIiwiaXNMb2dnZWRJbiIsIlRvdWNoZXIiLCJ0b3VjaGVkIiwidG91Y2giLCJ0IiwiVmFjdXVtQ2FjaGVyIiwiYXNrZWQiLCJwa0luZGV4IiwibWlzc2luZyIsImFzayIsImxhenkiLCJzb3VyY2UiLCJjb250YWlucyIsImdldEFza2VkSW5kZXgiLCJtaXNzaW5ncyIsImxlbmd0aCIsInVuaXF1ZSIsInRvQXJyYXkiLCJBdXRvTGlua2VyIiwiYWN0aXZlcyIsIklEQiIsIlcyUFJFU09VUkNFIiwibGlzdENhY2hlIiwibWFpbkluZGV4IiwiZm9yZWlnbktleXMiLCJtMm0iLCJtMm1JbmRleCIsInBlcm1pc3Npb25zIiwibW9kZWwiLCJpbmRleCIsImdldEluZGV4Rm9yIiwicmVmZXJlbmNlcyIsInJlZmVyZW5jZSIsImluZGV4TmFtZSIsInRvIiwicmVmZXJlbmNlZEJ5IiwiZmllbGQiLCJieSIsIm1hbnlUb01hbnkiLCJyZWxhdGlvbiIsIk1hbnlUb01hbnlSZWxhdGlvbiIsIm0ybUdldCIsImNvbGxlY3Rpb24iLCJjYWxsQmFjayIsIiRwb3N0IiwiZ290RGF0YSIsImdldE0yTSIsImJpbmQiLCJsaW5rVW5saW5rZWQiLCJ2YWx1ZXMiLCJzdW0iLCJjaGFuZ2VkIiwiaW5kZXhlcyIsImZpbHRlciIsIkJvb2xlYW4iLCJtYXAiLCJwYXJzZUludCIsIklOREVYIiwiZ2V0dGVyIiwiaWRzIiwib3RoZXJJbmRleCIsInNwbGl0IiwiZGVzY3JpYmUiLCJmbGF0dGVuIiwibW9kZWxOYW1lIiwia2V5cyIsImZldGNoIiwibm9vcCIsIm1haW5SZXNvdXJjZSIsImZpZWxkTmFtZSIsInRvT2JqZWN0IiwicmVzb3VyY2VOYW1lIiwiZ290UGVybWlzc2lvbnMiLCJQRVJNSVNTSU9OUyIsInNldEludGVydmFsIiwiTGlzdENhY2hlciIsImdvdEFsbCIsImNvbXBvc2l0ZUFza2VkIiwiY2FydGVzaWFuUHJvZHVjdDEiLCJ5IiwiaXNBcnJheSIsInJldCIsImEiLCJiIiwiY2FydGVzaWFuUHJvZHVjdCIsImFyciIsImV4cGxvZGVGaWx0ZXIiLCJwcm9kdWN0IiwiciIsImZpbHRlclNpbmdsZSIsInRlc3RPbmx5Iiwia2V5IiwiZGlmZmVyZW5jZSIsImNsZWFuQ29tcG9zaXRlcyIsImZpbHRlckxlbiIsInNpemUiLCJtYWtlRmlsdGVyIiwiaXRlbSIsImdvdCIsInRocyIsInNpbmdsZSIsInNvbWUiLCJmIiwiZXhwbG9kZWQiLCJwYXJ0aWFscyIsImJhZCIsInBsdWNrIiwiaXRlbXMiLCJhZGQiLCJmaW5kIiwiZ2V0MCIsImdldDEiLCJjYXBpdGFsaXplIiwiZGVsIiwibCIsImNhY2hlZFByb3BlcnR5QnlFdmVudHMiLCJwcm90byIsInByb3BlcnR5TmFtZSIsInNldHRlciIsInJlc3VsdCIsIm9ybSIsInByb3BlcnR5RGVmIiwidmFsdWUiLCJpc0Zpbml0ZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiVmFsaWRhdGlvbkVycm9yIiwicmVzb3VyY2UiLCJfcmVzb3VyY2UiLCJmb3JtSWR4IiwiZmllbGRzIiwiZXJyb3JzIiwicmVXaGVlbE9STSIsImxvZ2luRnVuYyIsIiRvcm0iLCJiYXNlT1JNIiwiYWRkTW9kZWxIYW5kbGVyIiwiYWRkUGVyc2lzdGVudEF0dHJpYnV0ZXMiLCJsb2dvdXQiLCJhZGRIYW5kbGVyIiwic3RySGFuZGxlciIsImhhc2giLCJ0b1N0cmluZyIsImhhbmRsZSIsImhhbmRsZUJ5IiwiY2FjaGVkS2V5SWR4IiwicmVuYW1lRnVuY3Rpb24iLCJmbiIsIkZ1bmN0aW9uIiwiY2FjaGVkIiwid3JhcHBlciIsInhkciIsInVybCIsImZvcm1FbmNvZGUiLCJQcm9taXNlIiwiYWNjZXB0IiwicmVqZWN0IiwicmVxIiwiWE1MSHR0cFJlcXVlc3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VEYXRhIiwicmVzcG9uc2VUZXh0IiwicmVzcG9uc2UiLCJzdGF0dXMiLCJyZXF1ZXN0IiwiWERvbWFpblJlcXVlc3QiLCJvbmxvYWQiLCJzdGF0dXNUZXh0IiwiRXJyb3IiLCJvcGVuIiwib25lcnJvciIsInNldFJlcXVlc3RIZWFkZXIiLCJfX3Rva2VuX18iLCJlbmNvZGVVUkkiLCJqb2luIiwic3RyaW5naWZ5IiwicyIsInRvVXBwZXJDYXNlIiwidG9Mb3dlckNhc2UiLCJzdHIiLCJjaGFyQ29kZUF0IiwidW5pZmllciIsImRvbnRUcmFuc2xhdGVGaWx0ZXIiLCJ2YWxzIiwiY29uc3RydWN0b3IiLCJOdW1iZXIiLCJlcnJvciIsInNhbWVBcyIsInBsdXJhbGl6ZSIsImJlZm9yZUNhbGwiLCJiZWZvcmUiLCJkZWNvcmF0b3IiLCJ0aGVuIiwiY2xlYW5TdG9yYWdlIiwibG9jYWxTdG9yYWdlIiwiY2xlYW5EZXNjcmlwdGlvbiIsInN0YXJ0c1dpdGgiLCJjaHIiLCJwZXJtdXRhdGlvbnMiLCJ3YWl0Rm9yIiwid2FpdGVyIiwiYm9vbCIsInR6T2Zmc2V0IiwiRGF0ZSIsImdldFRpbWV6b25lT2Zmc2V0IiwidHJhbnNGaWVsZFR5cGUiLCJkYXRlIiwiZGF0ZXRpbWUiLCJzdHJpbmciLCJ0ZXh0IiwiaW50ZWdlciIsImZsb2F0IiwicGFyc2VGbG9hdCIsIlNUQVRVU0tFWSIsInByb21pc2UiLCJ4aHIiLCJmb3JjZSIsInN0YXR1c1dhaXRpbmciLCJ1cGRhdGVTdGF0dXMiLCJsYXN0QnVpbGQiLCJsYXN0X2J1aWxkIiwidXNlcl9pZCIsIm9sZFN0YXR1cyIsImxvZ2luSW5mbyIsImxvZ2luIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsIm9iaiIsInJlYWx0aW1lRW5kUG9pbnQiLCJ3c0Nvbm5lY3Rpb24iLCJ1c2VyaWQiLCJvayIsImNvbm5lY3QiLCJvcHRpb25zIiwiZXh0T1JNIiwiUGVybWlzc2lvblRhYmxlIiwia2xhc3MiLCJTdHJpbmciLCJjb25uZWN0ZWQiLCJ3cyIsImluZm8iLCJvbk1lc3NhZ2VKc29uIiwib25NZXNzYWdlVGV4dCIsIm1lc3NhZ2UiLCJzZW50RGF0YSIsIndhaXRpbmdDb25uZWN0aW9ucyIsImF1dGhfZ3JvdXAiLCJSRVZJRFgiLCJidWlsZGVySGFuZGxlcnMiLCJidWlsZGVySGFuZGxlclVzZWQiLCJwZXJzaXN0ZW50QXR0cmlidXRlcyIsIm1vZGVsQ2FjaGUiLCJmYWlsZWRNb2RlbHMiLCJsaW5rZXIiLCJ3aW5kb3ciLCJ2YWxpZGF0aW9uRXZlbnQiLCJjdXJyZW50Q29udGV4dCIsInNhdmluZ0Vycm9ySGFubGRlciIsImdldEluZGV4Iiwic2F2ZSIsImNiIiwibXlQZXJtcyIsImdyb3VwX2lkIiwicGVybWlzc2lvbkxpc3QiLCJwIiwicGVybXMiLCJhbGxQZXJtaXNzaW9ucyIsImluZGV4T2YiLCJtYWtlTW9kZWxDbGFzcyIsInJlYWRhYmxlIiwid3JpdGFibGUiLCJwcml2YXRlQXJncyIsIm1lcmdlIiwiZnVuY1N0cmluZyIsIktsYXNzIiwicmVmX3RyYW5zbGF0aW9ucyIsImludmVyc2VfcmVmZXJlbmNlcyIsInJlZmVyZW50cyIsImZpZWxkc09yZGVyIiwiZmllbGRPcmRlciIsInJlcHJlc2VudGF0aW9uIiwiZGVsZXRlIiwiX3Blcm1pc3Npb25zIiwiYWxsX3Blcm1zIiwib2JqZWN0X2lkIiwiZ3JvdXBlZCIsInVua25vd25fZ3JvdXBzIiwiZ3JvdXBCeSIsIm8iLCJhc1JhdyIsIklEIiwiYXJnIiwiY29udGV4dCIsImNvcHkiLCJhc3IiLCJjb25jYXQiLCJzYXZlTXVsdGkiLCJvYmplY3RzIiwic2NvcGUiLCJyYXciLCJkZWxldGFibGUiLCJtdWx0aXBsZSIsImVsZW1zIiwidGFiIiwib2JqcyIsInJlc3VsdHMiLCJleHRyYV92ZXJicyIsImZ1bmNOYW1lIiwiZGRhdGEiLCJjb2RlIiwic2F2ZVBBIiwiVCIsIm9vIiwiUEEiLCJGcyIsImZpZWxkSWR4IiwidGFwIiwiaW5kZXhCeSIsIndpZGdldCIsInJlZiIsImV4dF9yZWYiLCJsb2NhbF9yZWYiLCJ3YXJuIiwiVHlwZUVycm9yIiwicmV2SW5kZXgiLCJoYXNPd25Qcm9wZXJ0eSIsIm9wdHMiLCJmaXJzdCIsIm9tb2RlbE5hbWUiLCJ2YWxpZGF0b3JzIiwidW5saW5rUmVmZXJlbmNlIiwiaW5zdGFuY2UiLCJpbnN0YW5jZXMiLCJvbW9kZWwiLCJsaW5rUmVmZXJlbmNlIiwicmVmcyIsIklOREVYX00yTSIsIlcyUF9QT1NUIiwiX2V4dHJhIiwiVE9PTkUiLCJUT01BTlkiLCJNQU5ZVE9NQU5ZIiwibW9kZWxDbGFzcyIsInppcCIsImRlbGV0ZWQiLCJNUEEiLCJyZWNvcmQiLCJpdGFiIiwidGFibGUiLCJpayIsIm5uZXciLCJ1cGRhdGVkIiwibmV3T2JqZWN0cyIsIm9sZEl0ZW0iLCJvbGRDb3B5IiwibmV3SXRlbSIsIk5hTiIsIm5vIiwidG90YWxSZXN1bHRzIiwiZ290TTJNIiwicm93IiwibSIsInZlcmIiLCJ0b2dldGhlciIsInNlbmREYXRhIiwiR09UX0FMTCIsImdvdE1vZGVsIiwiY2FjaGVLZXkiLCJtb2RlbE5vdEZvdW5kIiwiYXR0cmlidXRlcyIsImFkZFByb3BlcnR5IiwidmFsIiwia2F0dHIiLCJzZXQiLCJhdHRycyIsIm5ld0F0dHJzIiwicXVlcnkiLCJmaWx0ZXJGdW5jdGlvbiIsImdldE1vZGVsIiwiZ2V0TG9nZ2VkVXNlciIsInVzZXIiLCIkc2VuZFRvRW5kcG9pbnQiXSwibWFwcGluZ3MiOiI2QkFFQSxTQUFBQSxLQUNBQyxLQUFBQyxZQUNBRCxLQUFBRSxlQXlCQSxRQUFBQyxLQUNBLEdBQUFDLE1BQ0FDLEtBQ0FDLEVBQUEsQ0FDQU4sTUFBQU8sR0FBQSxTQUFBQyxFQUFBQyxHQUNBRCxJQUFBSixLQUNBQSxFQUFBSSxHQUFBLEdBQUFFLE9BRUEsSUFBQUMsR0FBQUwsR0FHQSxPQUZBRixHQUFBSSxHQUFBSSxLQUFBSCxHQUNBSixFQUFBTSxHQUFBRixFQUNBRSxHQUVBWCxLQUFBYSxLQUFBLFNBQUFMLEdBQ0EsR0FBQUEsSUFBQUosR0FBQSxDQUNBLEdBQUFVLEdBQUFKLE1BQUFLLFVBQUFDLE1BQUFDLEtBQUFDLFVBQUEsRUFDQWQsR0FBQUksR0FBQVcsUUFBQSxTQUFBQyxHQUNBQSxFQUFBQyxNQUFBLEtBQUFQLE9BSUFkLEtBQUFzQixPQUFBLFNBQUFDLEdBQ0EsR0FBQUMsR0FBQSxDQUNBLElBQUFELElBQUFsQixHQUFBLENBQ0EsR0FB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LElBQ0EvTCxFQUFBeUssS0FBQW1HLFFBQUEsV0FDQTVRLEVBQUF5SyxLQUFBbVAsTUFBQXpULEVBQUFYLEVBQUEsS0FBQSxTQUFBbkUsR0FFQXlLLEVBREF2RCxFQUNBbEgsRUFBQTZCLE9BQUE3QixFQUFBLEdBQUEsS0FFQUEsT0FJQSxNQUFBQyxHQUNBeUssRUFBQXpLLE9BMEJBaUosRUFBQTdMLFVBQUFtVixPQUFBLFNBQUExTixFQUFBTCxHQUNBLEdBQUE5RixHQUFBckMsSUFDQSxPQUFBLElBQUFrTyxTQUFBLFNBQUFDLEVBQUFDLEdBQ0EsSUFDQS9MLEVBQUF5SyxLQUFBbUcsUUFBQSxXQUNBNVEsRUFBQXlLLEtBQUFvSixPQUFBMU4sRUFBQUwsRUFBQWdHLEtBRUEsTUFBQXhLLEdBQ0F5SyxFQUFBekssT0FLQWlKLEVBQUE3TCxVQUFBcWIsY0FBQSxXQUNBLEdBQUEvWixHQUFBckMsSUFDQSxPQUFBQSxNQUFBOE0sS0FBQTlKLFdBQUFnQixhQUFBc08sUUFDQXRTLEtBQUF3QyxJQUFBLFlBQUF4QyxLQUFBOE0sS0FBQTlKLFdBQUFnQixhQUFBc08sU0FFQSxHQUFBcEUsU0FBQSxTQUFBQyxFQUFBQyxHQUNBL0wsRUFBQUgsS0FBQSxZQUFBLFNBQUFtYSxHQUNBaGEsRUFBQUcsSUFBQSxZQUFBNlosR0FBQTVMLEtBQUF0QyxRQU1BdkIsRUFBQTdMLFVBQUF1YixnQkFBQSxTQUFBdE8sRUFBQXRLLEdBQ0EsTUFBQTFELE1BQUE4TSxLQUFBMUYsTUFBQTRHLEVBQUF0SyxJQUdBa0osRUFBQTdMLFVBQUEwUixNQUFBLFNBQUFDLEVBQUFDLEdBQ0EsTUFBQTNTLE1BQUE4TSxLQUFBOUosV0FBQXlQLE1BQUFDLEVBQUFDIiwiZmlsZSI6InJ3dC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIEhhbmRsZXIoKXtcbiAgICB0aGlzLmhhbmRsZXJzID0gW107XG4gICAgdGhpcy5zdHJIYW5kbGVycyA9IHt9O1xufTtcblxuSGFuZGxlci5wcm90b3R5cGUuYWRkSGFuZGxlciA9IGZ1bmN0aW9uIChoYW5kbGVyKXtcbiAgICB2YXIgc3RySGFuZGxlciA9IHV0aWxzLmhhc2goaGFuZGxlci50b1N0cmluZygpKTtcbiAgICBpZiAoIShzdHJIYW5kbGVyIGluIHRoaXMuc3RySGFuZGxlcnMpKXtcbiAgICAgICAgdGhpcy5zdHJIYW5kbGVyc1tzdHJIYW5kbGVyXSA9IGhhbmRsZXI7XG4gICAgICAgIHRoaXMuaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICB9XG59O1xuSGFuZGxlci5wcm90b3R5cGUuaGFuZGxlID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywwKTtcbiAgICB0aGlzLmhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24oZnVuYyl7XG4gICAgICAgIGZ1bmMuYXBwbHkobnVsbCxhcmdzKTtcbiAgICB9KVxufTtcbkhhbmRsZXIucHJvdG90eXBlLmhhbmRsZUJ5ID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKTtcbiAgICB2YXIgdGhzID0gYXJndW1lbnRzWzBdO1xuICAgIHRoaXMuaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbihmdW5jKXtcbiAgICAgICAgZnVuYy5hcHBseSh0aHMsYXJncyk7XG4gICAgfSlcbn07XG5cblxuZnVuY3Rpb24gTmFtZWRFdmVudE1hbmFnZXIgKCl7XG4gICAgdmFyIGV2ZW50cyA9IHt9O1xuICAgIHZhciBoYW5kbGVySWQgPSB7fTtcbiAgICB2YXIgaWR4SWQgPSAwO1xuICAgIHRoaXMub24gPSBmdW5jdGlvbihuYW1lLCBmdW5jKXtcbiAgICAgICAgaWYgKCEobmFtZSBpbiBldmVudHMpKXtcbiAgICAgICAgICAgIGV2ZW50c1tuYW1lXSA9IG5ldyBBcnJheSgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpZCA9IGlkeElkICsrO1xuICAgICAgICBldmVudHNbbmFtZV0ucHVzaChmdW5jKTtcbiAgICAgICAgaGFuZGxlcklkW2lkXSA9IGZ1bmM7XG4gICAgICAgIHJldHVybiBpZDtcbiAgICB9O1xuICAgIHRoaXMuZW1pdCA9IGZ1bmN0aW9uKG5hbWUpe1xuICAgICAgICBpZiAobmFtZSBpbiBldmVudHMpe1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSk7XG4gICAgICAgICAgICBldmVudHNbbmFtZV0uZm9yRWFjaChmdW5jdGlvbihldmVudCl7XG4gICAgICAgICAgICAgICAgZXZlbnQuYXBwbHkobnVsbCxhcmdzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB0aGlzLnVuYmluZCA9IGZ1bmN0aW9uKGhhbmRsZXIpe1xuICAgICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgICBpZiAoaGFuZGxlciBpbiBoYW5kbGVySWQpe1xuICAgICAgICAgICAgdmFyIGZ1bmMgPSBoYW5kbGVySWRbaGFuZGxlciArICcnXTtcbiAgICAgICAgICAgIExhenkoZXZlbnRzKS5lYWNoKGZ1bmN0aW9uKHYsayl7XG4gICAgICAgICAgICAgICAgdmFyIGlkeCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIG4gaW4gdil7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2W25dID09PSBmdW5jKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkeC5wdXNoKG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZHgucmV2ZXJzZSgpLmZvckVhY2goZnVuY3Rpb24oeCl7XG4gICAgICAgICAgICAgICAgICAgIHYuc3BsaWNlKHgsMSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgaGFuZGxlcklkW2hhbmRsZXJdO1xuICAgICAgICByZXR1cm4gY291bnQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDYWxsIGV2ZW50IG9uY2VcbiAgICAgKi9cbiAgICB0aGlzLm9uY2UgPSBmdW5jdGlvbihldmVudE5hbWUsIGhhbmRsZXJGdW5jdGlvbikge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciBoYW5kbGVyID0gdGhpcy5vbihldmVudE5hbWUsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBoYW5kbGVyRnVuY3Rpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIHNlbGYudW5iaW5kKGhhbmRsZXIpO1xuICAgICAgICB9KVxuICAgIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNhY2hlZEtleUlkeCA9IDA7XG5cbnZhciBudWxsU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiAnJ307XG5cbmZ1bmN0aW9uIG1vY2tPYmplY3QoKXtcbiAgICByZXR1cm4gbmV3IFByb3h5KHt9LCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24odGFyZ2V0LCBuYW1lKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgID09PSAnc3RyaW5nJyl7XG4gICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09ICd0b1N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxTdHJpbmc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHV0aWxzLm1vY2s7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0W25hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSlcbn1cblxuLypcbnZhciAkUE9TVCA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY2FsbEJhY2ssIGVycm9yQmFjayxoZWFkZXJzKXtcbiAgICB2YXIgb3B0cyA9IHtcbiAgICAgICAgYWNjZXB0cyA6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgdXJsIDogdXJsLFxuICAgICAgICBkYXRhIDogSlNPTi5zdHJpbmdpZnkoZGF0YSksXG4gICAgICAgIGRhdGFUeXBlIDogJ2pzb24nLFxuICAgICAgICBzdWNjZXNzIDogY2FsbEJhY2ssXG4gICAgICAgIGVycm9yIDogZXJyb3JCYWNrLFxuICAgICAgICBtZXRob2QgOiAnUE9TVCcsXG4gICAgICAgIGNvbnRlbnRUeXBlIDogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgfTtcbiAgICBpZiAoaGVhZGVycyl7XG4gICAgICAgIG9wdHMuaGVhZGVycyA9IGhlYWRlcnM7XG4gICAgICAgIG9wdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gJC5hamF4KG9wdHMpO1xufVxuXG5cbmZ1bmN0aW9uIHJlV2hlZWxDb25uZWN0aW9uKGVuZFBvaW50LCBnZXRMb2dpbil7XG4gICAgLy8gbWFpbiBcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5nZXRMb2dpbiA9IGdldExvZ2luO1xuICAgIHRoaXMuZXZlbnRzID0gbmV3IE5hbWVkRXZlbnRNYW5hZ2VyKClcbiAgICB0aGlzLiRQT1NUID0gJFBPU1QuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9wdGlvbnMgPSB7ZW5kUG9pbnQgOiBlbmRQb2ludH07XG4gICAgdGhpcy5vbiA9IHRoaXMuZXZlbnRzLm9uLmJpbmQodGhpcyk7XG59O1xuXG5yZVdoZWVsQ29ubmVjdGlvbi5wcm90b3R5cGUudXBkYXRlU3RhdHVzID0gZnVuY3Rpb24oc3RhdHVzLCBjYWxsQmFjaywgZXJyb3IpIHtcbiAgICBpZiAoc3RhdHVzKSB7XG4gICAgICAgIHZhciBpc0xvZ2dlZCA9IChzdGF0dXMudXNlcl9pZCAmJiAhdGhpcy5vcHRpb25zLnVzZXJfaWQgKTtcbiAgICAgICAgZm9yICh2YXIgeCBpbiBzdGF0dXMpeyB0aGlzLm9wdGlvbnNbeF0gPSBzdGF0dXNbeF07IH1cbiAgICAgICAgbG9jYWxTdG9yYWdlLmxhc3RSV1RTdGF0dXMgPSBKU09OLnN0cmluZ2lmeShzdGF0dXMpO1xuICAgICAgICBpZiAoaXNMb2dnZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzLmVtaXQoJ2xvZ2luJywgdGhpcy5vcHRpb25zLnVzZXJfaWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghdGhpcy5vcHRpb25zLnVzZXJfaWQgJiYgdGhpcy5nZXRMb2dpbil7XG4gICAgICAgIHZhciBsb2dJbmZvID0gdGhpcy5nZXRMb2dpbihlcnJvcik7XG4gICAgICAgIGlmIChsb2dJbmZvLmNvbnN0cnVjdG9yID09PSBPYmplY3Qpe1xuICAgICAgICAgICAgdGhpcy5sb2dpbihsb2dJbmZvLnVzZXJuYW1lLCBsb2dJbmZvLnBhc3N3b3JkKVxuICAgICAgICAgICAgLnRoZW4oKGZ1bmN0aW9uKHN0YXR1cyl7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTdGF0dXMoc3RhdHVzLCBjYWxsQmFjayk7XG4gICAgICAgICAgICB9KS5iaW5kKHRoaXMpKTtcbiAgICAgICAgfSBlbHNlIGlmIChsb2dJbmZvLmNvbnN0cnVjdG9yID09PSBQcm9taXNlKSB7XG4gICAgICAgICAgICBsb2dJbmZvLnRoZW4oKGZ1bmN0aW9uKG9iail7XG4gICAgICAgICAgICAgICAgdmFyIHggPSB0aGlzLmxvZ2luKG9iai51c2VybmFtZSxvYmoucGFzc3dvcmQpO1xuICAgICAgICAgICAgICAgIHZhciBtYW5hZ2VFcnJvciA9IChmdW5jdGlvbihiYWQpe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVN0YXR1cyhudWxsLGNhbGxCYWNrLGJhZC5lcnJvcik7XG4gICAgICAgICAgICAgICAgfSkuYmluZCh0aGlzKTtcbiAgICAgICAgICAgICAgICBpZiAoY2FsbEJhY2spe1xuICAgICAgICAgICAgICAgICAgICB4LnRoZW4oY2FsbEJhY2ssbWFuYWdlRXJyb3IpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHgudGhlbihudWxsLCBtYW5hZ2VFcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkuYmluZCh0aGlzKSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsQmFjayAmJiBjYWxsQmFjayh0aGlzLm9wdGlvbnMpO1xuICAgIH0gICAgXG59XG5cbnJlV2hlZWxDb25uZWN0aW9uLnByb3RvdHlwZS5zdGF0dXMgPSBmdW5jdGlvbihjYWxsQmFjaywgZm9yY2Upe1xuICAgIGlmICgoJ2xhc3RSV1RTdGF0dXMnIGluIGxvY2FsU3RvcmFnZSkgJiYgIWZvcmNlKSB7XG4gICAgICAgIHRyeXtcbiAgICAgICAgICAgIHZhciBzdGF0dXMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5sYXN0UldUU3RhdHVzKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdHVzKHN0YXR1cyxjYWxsQmFjayk7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdHVzKGNhbGxCYWNrLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FsbEJhY2sgJiYgY2FsbEJhY2soc3RhdHVzKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3N0YXR1c19jYWxsaW5nKXtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgc2VsZi5zdGF0dXMoY2FsbEJhY2spO1xuICAgICAgICB9LDUwKTtcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMudGltZXN0YW1wKXtcbiAgICAgICAgY2FsbEJhY2sgJiYgY2FsbEJhY2sodGhpcy5vcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zdGF0dXNfY2FsbGluZyA9IHRydWU7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMuJHBvc3QoJ2FwaS9zdGF0dXMnLG51bGwsZnVuY3Rpb24oc3RhdHVzKXtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5sYXN0UldUU3RhdHVzID0gSlNPTi5zdHJpbmdpZnkoc3RhdHVzKTtcbiAgICAgICAgICAgIHNlbGYuX3N0YXR1c19jYWxsaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBzZWxmLnVwZGF0ZVN0YXR1cyhzdGF0dXMsY2FsbEJhY2spO1xuICAgICAgICB9KTsgICAgICAgIFxuICAgIH1cbn07XG5cbnJlV2hlZWxDb25uZWN0aW9uLnByb3RvdHlwZS4kcG9zdCA9IGZ1bmN0aW9uKHVybCwgZGF0YSxjYWxsQmFjayl7XG4gICAgdmFyIHRocyA9IHRoaXM7XG4gICAgaWYgKHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMudG9rZW4pe1xuICAgICAgICBpZiAoIWRhdGEpe1xuICAgICAgICAgICAgZGF0YSA9IHt9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMudG9rZW4pe1xuICAgICAgICB2YXIgaGVhZGVycyA9IHsgXG4gICAgICAgICAgICB0b2tlbiA6IHRoaXMub3B0aW9ucy50b2tlbixcbiAgICAgICAgICAgIGFwcGxpY2F0aW9uIDogdGhpcy5vcHRpb25zLmFwcGxpY2F0aW9uXG4gICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGhlYWRlcnMgPSBudWxsO1xuICAgIH1cblxuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24oYWNjZXB0LHJlamVjdCl7XG4gICAgICAgIHV0aWxzLnhkcih0aHMub3B0aW9ucy5lbmRQb2ludCArIHVybCwgZGF0YSwgdGhzLm9wdGlvbnMuYXBwbGljYXRpb24sIHRocy5vcHRpb25zLnRva2VuKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oeGhyKXtcbiAgICAgICAgICAgICAgICB0aHMuZXZlbnRzLmVtaXQoJ2h0dHAtcmVzcG9uc2UnLCB4aHIucmVzcG9uc2VUZXh0LCB4aHIuc3RhdHVzLCB1cmwsIGRhdGEpO1xuICAgICAgICAgICAgICAgIHRocy5ldmVudHMuZW1pdCgnaHR0cC1yZXNwb25zZS0nICsgeGhyLnN0YXR1cywgeGhyLnJlc3BvbnNlVGV4dCwgdXJsLCBkYXRhKTtcbiAgICAgICAgICAgICAgICBpZiAoeGhyLnJlc3BvbnNlRGF0YSl7XG4gICAgICAgICAgICAgICAgICAgIHRocy5ldmVudHMuZW1pdCgnaHR0cC1yZXNwb25zZS0nICsgeGhyLnN0YXR1cyArICctanNvbicsIHhoci5yZXNwb25zZURhdGEsIHVybCwgZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjYWxsQmFjaykgeyBjYWxsQmFjayggeGhyLnJlc3BvbnNlRGF0YSB8fCB4aHIucmVzcG9uc2VUZXh0ICl9O1xuICAgICAgICAgICAgICAgIGFjY2VwdCh4aHIucmVzcG9uc2VEYXRhIHx8IHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24oeGhyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHhoci5yZXNwb25zZURhdGEpe1xuICAgICAgICAgICAgICAgICAgICB0aHMuZXZlbnRzLmVtaXQoJ2Vycm9yLWpzb24nLCB4aHIucmVzcG9uc2VEYXRhLCB4aHIuc3RhdHVzLCB1cmwsIGRhdGEsIHhocik7XG4gICAgICAgICAgICAgICAgICAgIHRocy5ldmVudHMuZW1pdCgnZXJyb3ItanNvbi0nICsgeGhyLnN0YXR1cywgeGhyLnJlc3BvbnNlRGF0YSx1cmwsIGRhdGEsIHhocik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHRocy5ldmVudHMuZW1pdCgnZXJyb3ItaHR0cCcseGhyLnJlc3BvbnNlVGV4dCwgeGhyLnN0YXR1cyx1cmwsZGF0YSx4aHIpO1xuICAgICAgICAgICAgICAgICAgICB0aHMuZXZlbnRzLmVtaXQoJ2Vycm9yLWh0dHAtJyArIHhoci5zdGF0dXMsIHhoci5yZXNwb25zZVRleHQsdXJsLGRhdGEseGhyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVqZWN0KHhoci5yZXNwb25zZURhdGEgfHwgeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5yZVdoZWVsQ29ubmVjdGlvbi5wcm90b3R5cGUubG9naW4gPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpe1xuICAgIHZhciB1cmwgPSB0aGlzLm9wdGlvbnMuZW5kUG9pbnQgKyAnYXBpL2xvZ2luJztcbiAgICB2YXIgY29ubmVjdGlvbiA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGFjY2VwdCxyZWplY3Qpe1xuICAgICAgICB1dGlscy54ZHIodXJsLHsgdXNlcm5hbWU6IHVzZXJuYW1lLCBwYXNzd29yZCA6IHBhc3N3b3JkfSwgbnVsbCxjb25uZWN0aW9uLm9wdGlvbnMudG9rZW4sIHRydWUpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbih4aHIpe1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24udXBkYXRlU3RhdHVzKHhoci5yZXNwb25zZURhdGEpO1xuICAgICAgICAgICAgICAgIGFjY2VwdChzdGF0dXMpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24oeGhyKXtcbiAgICAgICAgICAgICAgICByZWplY3QoeGhyLnJlc3BvbnNlRGF0YSB8fCB4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgIH0pO1xuICAgIH0pO1xufTtcblxucmVXaGVlbENvbm5lY3Rpb24ucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbihjYWxsQmFjayl7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciB3c2Nvbm5lY3QgPSBmdW5jdGlvbihzZWxmKXtcbiAgICAgICAgc2VsZi53c0Nvbm5lY3Rpb24gPSBuZXcgdXRpbHMud3NDb25uZWN0KHNlbGYub3B0aW9ucyk7XG4gICAgICAgIHNlbGYud3NDb25uZWN0aW9uLm9uQ29ubmVjdChmdW5jdGlvbigpe1xuICAgICAgICAgICAgc2VsZi5ldmVudHMuZW1pdCgnd3MtY29ubmVjdGVkJywgc2VsZi53c0Nvbm5lY3Rpb24pO1xuICAgICAgICB9KTtcbiAgICAgICAgc2VsZi53c0Nvbm5lY3Rpb24ub25EaXNjb25uZWN0KGZ1bmN0aW9uKCl7IFxuICAgICAgICAgICAgaWYgKHNlbGYub3B0aW9ucyAmJiBzZWxmLm9wdGlvbnMucmVhbHRpbWVFbmRQb2ludCl7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICB3c2Nvbm5lY3Qoc2VsZik7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0sMTAwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gdGhpcy5zdGF0dXMoKGZ1bmN0aW9uKHN0YXR1cyl7XG4gICAgICAgIGlmICgndG9rZW4nIGluIHNlbGYub3B0aW9ucyl7XG4gICAgICAgICAgICBjYWxsQmFjayAmJiBjYWxsQmFjayhzdGF0dXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2Nvbm5lY3RpbmcgdG8gJyArIHNlbGYub3B0aW9ucy5lbmRQb2ludCk7XG4gICAgICAgICAgICBpZiAoc2VsZi5vcHRpb25zLnVzZXJuYW1lICYmIHNlbGYub3B0aW9ucy5wYXNzd29yZCl7XG4gICAgICAgICAgICAgICAgc2VsZi5sb2dpbihcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5vcHRpb25zLnVzZXJuYW1lLFxuICAgICAgICAgICAgICAgICAgICBzZWxmLm9wdGlvbnMucGFzc3dvcmQsXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbEJhY2sgJiYgY2FsbEJhY2soZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncmVuZXdpbmcgY29ubmVjdGlvbicpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGYub3B0aW9ucy50b2tlbiAmJiBzZWxmLm9wdGlvbnMucmVhbHRpbWVFbmRQb2ludCAmJiAoIXNlbGYud3NDb25uZWN0aW9uKSl7XG4gICAgICAgICAgICB3c2Nvbm5lY3Qoc2VsZik7XG4gICAgICAgIH1cbiAgICB9KS5iaW5kKHRoaXMpKTtcbn07XG5cbnJlV2hlZWxDb25uZWN0aW9uLnByb3RvdHlwZS5sb2dPdXQgPSBmdW5jdGlvbih1cmwsIGNhbGxCYWNrKXtcbiAgICByZXR1cm4gdGhpcy4kcG9zdCgnYXBpL2xvZ291dCcse30sKGZ1bmN0aW9uKHN0YXR1cykge1xuICAgICAgICBpZiAoJ2xhc3RSV1RTdGF0dXMnIGluIGxvY2FsU3RvcmFnZSkge1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsU3RvcmFnZS5sYXN0UldUU3RhdHVzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHtlbmRQb2ludDogdGhpcy5vcHRpb25zLmVuZFBvaW50fTtcbiAgICAgICAgaWYgKHRoaXMud3NDb25uZWN0aW9uKSB7IFxuICAgICAgICAgICAgdGhpcy53c0Nvbm5lY3Rpb24uY2xvc2UoKTtcbiAgICAgICAgICAgIHRoaXMud3NDb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodXJsKSB7IGxvY2F0aW9uID0gdXJsOyB9XG4gICAgICAgIGNhbGxCYWNrICYmIGNhbGxCYWNrKCk7XG4gICAgfSkuYmluZCh0aGlzKSk7XG59XG4qL1xudmFyIHV0aWxzID0ge1xuICAgIHJlbmFtZUZ1bmN0aW9uIDogZnVuY3Rpb24gKG5hbWUsIGZuKSB7XG4gICAgICAgIHJldHVybiAobmV3IEZ1bmN0aW9uKFwicmV0dXJuIGZ1bmN0aW9uIChjYWxsKSB7IHJldHVybiBmdW5jdGlvbiBcIiArIG5hbWUgK1xuICAgICAgICAgICAgXCIgKCkgeyByZXR1cm4gY2FsbCh0aGlzLCBhcmd1bWVudHMpIH07IH07XCIpKCkpKEZ1bmN0aW9uLmFwcGx5LmJpbmQoZm4pKTtcbiAgICB9LFxuICAgIGNhY2hlZCA6IGZ1bmN0aW9uKGZ1bmMsIGtleSl7XG4gICAgICAgIGlmICgha2V5KXsgICAgXG4gICAgICAgICAgICBrZXkgPSAnXycgKyBjYWNoZWRLZXlJZHgrKztcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB3cmFwcGVyKCl7XG4gICAgICAgICAgICBpZiAoIXRoaXNba2V5XSl7XG4gICAgICAgICAgICAgICAgdGhpc1trZXldID0gZnVuYy5jYWxsKHRoaXMsW2FyZ3VtZW50c10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXNba2V5XTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfSxcbi8vICAgICRQT1NUIDogJFBPU1QsXG4vLyAgICByZVdoZWVsQ29ubmVjdGlvbjogcmVXaGVlbENvbm5lY3Rpb24sXG4gICAgbG9nOiBmdW5jdGlvbigpeyBcbiAgICAgICAgY29uc29sZS5sb2coYXJndW1lbnRzKTtcbiAgICB9LFxuXG4gICAgeGRyOiBmdW5jdGlvbiAodXJsLCBkYXRhLCBhcHBsaWNhdGlvbix0b2tlbiwgZm9ybUVuY29kZSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogTWFrZSBhbiBIVFRQIFJlcXVlc3QgYW5kIHJldHVybiBpdHMgcHJvbWlzZS5cbiAgICAgICAgICovXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihhY2NlcHQsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHJlcTtcbiAgICAgICAgICAgIGlmICghZGF0YSkgeyBkYXRhID0ge307fVxuXG4gICAgICAgICAgICBpZihYTUxIdHRwUmVxdWVzdCkge1xuICAgICAgICAgICAgICAgIHJlcSA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICAgICAgIHJlcS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcS5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9IEpTT04ucGFyc2UocmVxLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChhKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzcG9uc2VEYXRhID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXNwb25zZSA9IHtyZXNwb25zZURhdGE6IHJlc3BvbnNlRGF0YSwgcmVzcG9uc2VUZXh0OiByZXEucmVzcG9uc2VUZXh0LHN0YXR1czogcmVxLnN0YXR1cywgcmVxdWVzdDogcmVxfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXEuc3RhdHVzID49IDIwMCAmJiByZXEuc3RhdHVzIDwgNDAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXB0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2UgaWYoWERvbWFpblJlcXVlc3Qpe1xuICAgICAgICAgICAgICAgIHJlcSA9IG5ldyBYRG9tYWluUmVxdWVzdCgpO1xuICAgICAgICAgICAgICAgIHJlcS5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgYWNjZXB0KHJlcS5yZXNwb25zZVRleHQscmVxLnN0YXR1c1RleHQsIHJlcSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignQ09SUyBub3Qgc3VwcG9ydGVkJykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXEub3BlbignUE9TVCcsIHVybCwgdHJ1ZSk7XG4gICAgICAgICAgICByZXEub25lcnJvciA9IHJlamVjdDtcbiAgICAgICAgICAgIHJlcS5zZXRSZXF1ZXN0SGVhZGVyKCdBY2NlcHQnLCdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICAgICAgICBpZiAodG9rZW4pIHsgZGF0YS5fX3Rva2VuX18gPSB0b2tlbiB9XG4gICAgICAgICAgICBpZiAoIWZvcm1FbmNvZGUpe1xuICAgICAgICAgICAgICAgIHJlcS5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LVR5cGUnLCd0ZXh0L3BsYWluJyk7XG4gICAgICAgICAgICAgICAgZGF0YSA9IExhenkoZGF0YSkuc2l6ZSgpP0pTT04uc3RyaW5naWZ5KGRhdGEpOicnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXEuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyk7XG4gICAgICAgICAgICAgICAgZGF0YSA9IExhenkoZGF0YSkubWFwKGZ1bmN0aW9uKHYsayl7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gayArICc9JyArIGVuY29kZVVSSSh2LnRvU3RyaW5nKCkpOyAgXG4gICAgICAgICAgICAgICAgfSkudG9BcnJheSgpLmpvaW4oJyYnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcS5zZW5kKGRhdGEpO1xuICAgIC8vICAgICAgICByZXEuc2VuZChudWxsKTtcbiAgICAgICAgfSlcbiAgICB9LFxuICAgIFxuICAgIGNhcGl0YWxpemUgOiBmdW5jdGlvbiAocykge1xuICAgICAgICByZXR1cm4gc1swXS50b1VwcGVyQ2FzZSgpICsgcy5zbGljZSgxKS50b0xvd2VyQ2FzZSgpO1xuICAgIH0sXG5cbiAgICBoYXNoIDogZnVuY3Rpb24oc3RyKXtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhhc2hlZCBmdW5jdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgc3RyID0gc3RyLnRvU3RyaW5nKCk7XG4gICAgICAgIHZhciByZXQgPSAxO1xuICAgICAgICBmb3IgKHZhciB4ID0gMDt4PHN0ci5sZW5ndGg7eCsrKXtcbiAgICAgICAgICAgIHJldCAqPSAoMSArIHN0ci5jaGFyQ29kZUF0KHgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKHJldCAlIDM0OTU4Mzc0OTU3KS50b1N0cmluZygpO1xuICAgIH0sXG5cbiAgICBtYWtlRmlsdGVyIDogZnVuY3Rpb24gKG1vZGVsLCBmaWx0ZXIsIHVuaWZpZXIsIGRvbnRUcmFuc2xhdGVGaWx0ZXIpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1ha2UgZmlsdGVyIGZvciBBcnJheS5maWx0ZXIgZnVuY3Rpb24gYXMgYW4gYW5kIG9mIG9yXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoIXVuaWZpZXIpIHsgdW5pZmllciA9ICcgJiYgJzt9XG4gICAgICAgIGlmIChMYXp5KGZpbHRlcikuc2l6ZSgpID09PSAwKXtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih4KXsgcmV0dXJuIHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc291cmNlID0gTGF6eShmaWx0ZXIpLm1hcChmdW5jdGlvbih2YWxzLCBmaWVsZCl7XG4gICAgICAgICAgICBpZiAoIXZhbHMpIHsgdmFscyA9IFtudWxsXX1cbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWxzKSl7XG4gICAgICAgICAgICAgICAgdmFscyA9IFt2YWxzXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZG9udFRyYW5zbGF0ZUZpbHRlciAmJiAobW9kZWwuZmllbGRzW2ZpZWxkXS50eXBlID09PSAncmVmZXJlbmNlJykpIHtcbiAgICAgICAgICAgICAgICBmaWVsZCA9ICdfJyArIGZpZWxkO1xuICAgICAgICAgICAgICAgIHZhbHMgPSBMYXp5KHZhbHMpLm1hcChmdW5jdGlvbih4KXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHggJiYgKHguY29uc3RydWN0b3IgIT09IE51bWJlcikpe1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHguaWQ7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICAgICAgICAgIH0pLnRvQXJyYXkoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobW9kZWwuZmllbGRzW2ZpZWxkXS50eXBlID09PSAnc3RyaW5nJyl7XG4gICAgICAgICAgICAgICAgdmFscyA9IHZhbHMubWFwKEpTT04uc3RyaW5naWZ5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnKCcgKyAgTGF6eSh2YWxzKS5tYXAoZnVuY3Rpb24oeCl7XG4gICAgICAgICAgICAgICAgaWYgKCF4KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ21ha2VGaWx0ZXIgeCBpcyBudWxsJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKHggPT09IG9ybS51dGlscy5tb2NrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ21ha2VGaWx0ZXIgd2l0aCBNb2NrIE9iamVjdCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gJyh4LicgKyBmaWVsZCArICcgPT09ICcgKyB4ICsgJyknO1xuICAgICAgICAgICAgfSkuam9pbignIHx8ICcpICArJyknO1xuICAgICAgICB9KS50b0FycmF5KCkuam9pbih1bmlmaWVyKTtcbiAgICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvbihcInhcIiwgXCJyZXR1cm4gXCIgKyBzb3VyY2UpO1xuICAgIH0sXG5cbiAgICBzYW1lQXMgOiBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogRGVlcCBlcXVhbFxuICAgICAgICAgKi9cbiAgICAgICAgZm9yICh2YXIgayBpbiB4KSB7XG4gICAgICAgICAgICBpZiAoeVtrXSAhPSB4W2tdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgXG4gICAgcGx1cmFsaXplIDogZnVuY3Rpb24oc3RyLCBtb2RlbCl7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMZXhpY2FsbHkgcmV0dXJucyBlbmdsaXNoIHBsdXJhbCBmb3JtXG4gICAgICAgICAqL1xuICAgICAgICByZXR1cm4gc3RyICsgJ3MnO1xuICAgIH0sXG5cbiAgICBiZWZvcmVDYWxsIDogZnVuY3Rpb24oZnVuYywgYmVmb3JlKXtcbiAgICAgICAgdmFyIGRlY29yYXRvciA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBiZWZvcmUoKS50aGVuKGZ1bmMpXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBkZWNvcmF0b3I7XG4gICAgfSxcblxuICAgIGNsZWFuU3RvcmFnZSA6IGZ1bmN0aW9uKCl7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDbGVhbiBsb2NhbFN0b3JhZ2Ugb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBMYXp5KGxvY2FsU3RvcmFnZSkua2V5cygpLmVhY2goZnVuY3Rpb24oayl7XG4gICAgICAgICAgICBkZWxldGUgbG9jYWxTdG9yYWdlW2tdO1xuICAgICAgICB9KVxuICAgIH0sXG5cbiAgICBjbGVhbkRlc2NyaXB0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgTGF6eShsb2NhbFN0b3JhZ2UpXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKHYsIG4pIHsgcmV0dXJuIExhenkobikuc3RhcnRzV2l0aCgnZGVzY3JpcHRpb246Jyl9KVxuICAgICAgICAgICAgLmtleXMoKVxuICAgICAgICAgICAgLmVhY2goZnVuY3Rpb24obikgeyBkZWxldGUgbG9jYWxTdG9yYWdlW25dIH0pO1xuICAgIH0sXG4gICAgXG4gICAgcmV2ZXJzZSA6IGZ1bmN0aW9uIChjaHIsIHN0cikge1xuICAgICAgICByZXR1cm4gc3RyLnNwbGl0KGNocikucmV2ZXJzZSgpLmpvaW4oY2hyKTtcbiAgICB9LFxuICAgIHBlcm11dGF0aW9uczogZnVuY3Rpb24oYXJyKXtcbiAgICAgICAgdmFyIHJldCA9IFtdO1xuICAgICAgICBmb3IgKHZhciB4ID0gYXJyLmxlbmd0aC0xOyB4ID49IDA7eC0tKXtcbiAgICAgICAgICAgIGZvciAodmFyIHkgPSBhcnIubGVuZ3RoLTE7IHkgPj0gMDsgeS0tKXtcbiAgICAgICAgICAgICAgICBpZiAoeCAhPT0geSlcbiAgICAgICAgICAgICAgICAgICAgcmV0LnB1c2goW2Fyclt4XSwgYXJyW3ldXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9LFxuXG4gICAgd2FpdEZvcjogZnVuY3Rpb24oZnVuYywgY2FsbEJhY2spIHtcbiAgICAgICAgdmFyIHdhaXRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKGZ1bmMoKSkge1xuICAgICAgICAgICAgICAgIGNhbGxCYWNrKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQod2FpdGVyLDUwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2V0VGltZW91dCh3YWl0ZXIsIDUwMCk7XG4gICAgfSxcblxuICAgIGJvb2w6IEJvb2xlYW4sXG5cbiAgICBub29wIDogZnVuY3Rpb24oKXt9LFxuXG4gICAgdHpPZmZzZXQ6IG5ldyBEYXRlKCkuZ2V0VGltZXpvbmVPZmZzZXQoKSAqIDYwMDAwLFxuXG4gICAgdHJhbnNGaWVsZFR5cGU6IHtcbiAgICAgICAgZGF0ZTogZnVuY3Rpb24oeCkgeyByZXR1cm4gbmV3IERhdGUoeCAqIDEwMDAgKyB1dGlscy50ek9mZnNldCApIH0sXG4gICAgICAgIGRhdGV0aW1lOiBmdW5jdGlvbih4KSB7IHJldHVybiBuZXcgRGF0ZSh4ICogMTAwMCArIHV0aWxzLnR6T2Zmc2V0ICkgfSxcbiAgICAgICAgc3RyaW5nOiBmdW5jdGlvbih4KSB7IHJldHVybiB4LnRvU3RyaW5nKCk7IH0sXG4gICAgICAgIHRleHQ6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHgudG9TdHJpbmcoKTsgfSxcbiAgICAgICAgaW50ZWdlcjogZnVuY3Rpb24oeCkgeyByZXR1cm4gcGFyc2VJbnQoeCk7IH0sXG4gICAgICAgIGZsb2F0OiBmdW5jdGlvbih4KSB7IHJldHVybiBwYXJzZUZsb2F0KHgpOyB9XG4gICAgfSwgXG4gICAgbW9jayA6IG1vY2tPYmplY3QoKVxufTtcblxuXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBTVEFUVVNLRVkgPSAnbGFzdFJXVENvbm5lY3Rpb25TdGF0dXMnO1xuXG5mdW5jdGlvbiBSZWFsdGltZUNvbm5lY3Rpb24oZW5kUG9pbnQsIHJ3dENvbm5lY3Rpb24pe1xuICAgIC8qKlxuICAgICAqIENvbm5lY3RzIGEgd2Vic29ja2V0IHdpdGggcmVXaGVlbCBjb25uZWN0aW9uXG4gICAgICovXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdmFyIGNvbm5lY3Rpb24gPSBuZXcgU29ja0pTKGVuZFBvaW50KTtcbiAgICBjb25uZWN0aW9uLm9ub3BlbiA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdvcGVuIDogJyArIHgpO1xuICAgICAgICBjb25uZWN0aW9uLnRlbmFudCgpO1xuICAgICAgICByd3RDb25uZWN0aW9uLmVtaXQoJ3JlYWx0aW1lLWNvbm5lY3Rpb24tb3BlbicseCk7XG4gICAgfTtcbiAgICBjb25uZWN0aW9uLm9ubWVzc2FnZSA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIGlmICh4LnR5cGUgPT0gJ21lc3NhZ2UnKSB7XG4gICAgICAgICAgICAvLyQubm90aWZ5KHguZGF0YSk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vVE9ETyBzZXQgZnJvbVJlYWx0aW1lXG4gICAgICAgICAgICAgICAgcnd0Q29ubmVjdGlvbi5lbWl0KCdyZWFsdGltZS1tZXNzYWdlLWpzb24nLCBKU09OLnBhcnNlKHguZGF0YSkpO1xuICAgICAgICAgICAgICAgIC8vVE9ETyB1bnNldCBmcm9tUmVhbHRpbWVcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgICAgIHJ3dENvbm5lY3Rpb24uZW1pdCgncmVhbHRpbWUtbWVzc2FnZS10ZXh0JywgSlNPTi5wYXJzZSh4LmRhdGEpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdmcm9tIHJlYWx0aW1lICcseCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbm5lY3Rpb24ub25jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2V0VGltZW91dCh1dGlscy53c0Nvbm5lY3QsMTAwMCk7XG4gICAgICAgIHJ3dENvbm5lY3Rpb24uZW1pdCgncmVhbHRpbWUtY29ubmVjdGlvbi1jbG9zZWQnKTtcbiAgICB9O1xuICAgIGNvbm5lY3Rpb24udGVuYW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25uZWN0aW9uLnNlbmQoJ1RFTkFOVDonICsgcnd0Q29ubmVjdGlvbi5jYWNoZWRTdGF0dXMuYXBwbGljYXRpb24gKyAnOicgKyByd3RDb25uZWN0aW9uLmNhY2hlZFN0YXR1cy50b2tlbik7XG4gICAgfVxuICAgIHRoaXMuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgY29ubmVjdGlvbi5jbG9zZSgpO1xuICAgIH1cbn0gICAgXG5cbmZ1bmN0aW9uIHJlV2hlZWxDb25uZWN0aW9uKGVuZFBvaW50LCBnZXRMb2dpbil7XG4gICAgLyoqXG4gICAgICogQ29ubmVjdGlvbiBiYXNpYyBmb3IgcmVXaGVlbFxuICAgICAqIEBwYXJhbSBlbmRQb2ludDogc3RyaW5nIGJhc2UgdXJsIGZvciBhbGwgY29tdW5pY2F0aW9uXG4gICAgICogQHBhcmFtIGdldExvZ2luOiBmdW5jdGlvbiB0byBiZSBjYWxsZWQgaW4gY2FzZSBvZiBtaXNzaW5nIGxvZ2luLlxuICAgICAqICB0aGlzIGZ1bmN0aW9uIGNvdWxkIHJldHVybiA6XG4gICAgICogIC0gICBhIHsgdXNlcm5hbWUgOiA8dXNlcm5hbWU+ICwgcGFzc3dvcmQ6IDxwYXNzd29yZD59IG9yXG4gICAgICogIC0gICBiIFByb21pc2UgLT4geyB1c2VybmFtZSA6IDx1c2VybmFtZT4gLCBwYXNzd29yZDogPHBhc3N3b3JkPn1cbiAgICAgKi9cbiAgICAvLyBtYWluIGluaXRpYWxpemF0aW9uXG4gICAgdmFyIGV2ZW50cyA9IG5ldyBOYW1lZEV2ZW50TWFuYWdlcigpO1xuICAgIHRoaXMuZ2V0TG9naW4gPSBnZXRMb2dpbjtcbiAgICB0aGlzLmVuZFBvaW50ID0gZW5kUG9pbnQuZW5kc1dpdGgoJy8nKT8gZW5kUG9pbnQ6IChlbmRQb2ludCArICcvJyk7XG4gICAgdGhpcy5vbiA9IGV2ZW50cy5vbjtcbiAgICB0aGlzLnVuYmluZCA9IGV2ZW50cy51bmJpbmQ7XG4gICAgdGhpcy5lbWl0ID0gZXZlbnRzLmVtaXQ7XG4gICAgdGhpcy5vbmNlID0gZXZlbnRzLm9uY2U7XG4gICAgdGhpcy5jYWNoZWRTdGF0dXMgPSB7fTtcbiAgICB0aGlzLmlzQ29ubmVjdGVkID0gZmFsc2U7XG4gICAgdGhpcy5pc0xvZ2dlZEluID0gZmFsc2U7XG4gICAgLy8gcmVnaXN0ZXJpbmcgdXBkYXRlIHN0YXR1c1xuICAgIHZhciB0aHMgPSB0aGlzO1xufTtcblxucmVXaGVlbENvbm5lY3Rpb24ucHJvdG90eXBlLiRwb3N0ID0gZnVuY3Rpb24odXJsLCBkYXRhLGNhbGxCYWNrKXtcbiAgICAvKipcbiAgICAgKiBBSkFYIGNhbGwgZm9yIGZldGNoIGFsbCBkYXRhIGZyb20gc2VydmVyXG4gICAgICogQHBhcmFtIHVybDogbGFzdCB1cmwgcGFydCBmb3IgYWpheCBjYWxsXG4gICAgICogQHBhcmFtIGRhdGE6IGRhdGEgb2JqZWN0IHRvIGJlIHNlbnRcbiAgICAgKiBAcGFyYW0gY2FsbEJhY2s6IGZ1bmN0aW9uKHhocikgd2lsbCBiZSBjYWxsZWQgd2hlbiBkYXRhIGFycml2ZXNcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlPHhocj4gc2FtZSBvZiBjYWxsQmFja1xuICAgICAqL1xuICAgIC8vIGluaXRpYWxpemF0aW9uXG4gICAgdmFyIHRocyA9IHRoaXM7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihhY2NlcHQscmVqZWN0KXtcbiAgICAgICAgdXRpbHMueGRyKHRocy5lbmRQb2ludCArIHVybCwgZGF0YSwgdGhzLmNhY2hlZFN0YXR1cy5hcHBsaWNhdGlvbiwgdGhzLmNhY2hlZFN0YXR1cy50b2tlbilcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHhocil7XG4gICAgICAgICAgICAgICAgdGhzLmVtaXQoJ2h0dHAtcmVzcG9uc2UnLCB4aHIucmVzcG9uc2VUZXh0LCB4aHIuc3RhdHVzLCB1cmwsIGRhdGEpO1xuICAgICAgICAgICAgICAgIHRocy5lbWl0KCdodHRwLXJlc3BvbnNlLScgKyB4aHIuc3RhdHVzLCB4aHIucmVzcG9uc2VUZXh0LCB1cmwsIGRhdGEpO1xuICAgICAgICAgICAgICAgIGlmICh4aHIucmVzcG9uc2VEYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgdGhzLmVtaXQoJ2h0dHAtcmVzcG9uc2UtJyArIHhoci5zdGF0dXMgKyAnLWpzb24nLCB4aHIucmVzcG9uc2VEYXRhLCB1cmwsIGRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2FsbEJhY2spIHsgY2FsbEJhY2soIHhoci5yZXNwb25zZURhdGEgfHwgeGhyLnJlc3BvbnNlVGV4dCApfTtcbiAgICAgICAgICAgICAgICBhY2NlcHQoeGhyLnJlc3BvbnNlRGF0YSB8fCB4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKHhocikge1xuICAgICAgICAgICAgICAgIGlmICh4aHIucmVzcG9uc2VEYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgdGhzLmVtaXQoJ2Vycm9yLWpzb24nLCB4aHIucmVzcG9uc2VEYXRhLCB4aHIuc3RhdHVzLCB1cmwsIGRhdGEsIHhocik7XG4gICAgICAgICAgICAgICAgICAgIHRocy5lbWl0KCdlcnJvci1qc29uLScgKyB4aHIuc3RhdHVzLCB4aHIucmVzcG9uc2VEYXRhLHVybCwgZGF0YSwgeGhyKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdGhzLmVtaXQoJ2Vycm9yLWh0dHAnLHhoci5yZXNwb25zZVRleHQsIHhoci5zdGF0dXMsdXJsLGRhdGEseGhyKTtcbiAgICAgICAgICAgICAgICAgICAgdGhzLmVtaXQoJ2Vycm9yLWh0dHAtJyArIHhoci5zdGF0dXMsIHhoci5yZXNwb25zZVRleHQsdXJsLGRhdGEseGhyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVqZWN0KHhoci5yZXNwb25zZURhdGEgfHwgeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59O1xuXG4vKipcbiAqIENoZWNrIGN1cnJlbnQgc3RhdHVzIGFuZCBjYWxsYmFjayBmb3IgcmVzdWx0cy5cbiAqIEl0IGNhY2hlcyByZXN1bHRzIGZvciBmdXJ0aGVyLlxuICogQHBhcmFtIGNhbGxiYWNrOiAoc3RhdHVzIG9iamVjdClcbiAqIEBwYXJhbSBmb3JjZTogYm9vbGVhbiBpZiB0cnVlIGVtcHRpZXMgY2FjaGUgIFxuICogQHJldHVybiB2b2lkXG4gKi9cbnJlV2hlZWxDb25uZWN0aW9uLnByb3RvdHlwZS5zdGF0dXMgPSBmdW5jdGlvbihjYWxsQmFjaywgZm9yY2UpIHtcbiAgICAvLyBpZiBmb3JjZSwgY2xlYXIgYWxsIGNhY2hlZCB2YWx1ZXNcbiAgICB2YXIga2V5ID0gJ3Rva2VuOicgKyB0aGlzLmVuZFBvaW50O1xuICAgIHZhciB0aHMgPSB0aGlzO1xuICAgIGlmIChmb3JjZSkge1xuICAgICAgICB0aGlzLmNhY2hlZFN0YXR1cyA9IHt9O1xuICAgICAgICBkZWxldGUgbG9jYWxTdG9yYWdlW2tleV07XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXR1c1dhaXRpbmcpIHtcbiAgICAgICAgLy8gd2FpdCBmb3Igc3RhdHVzXG4gICAgICAgIHV0aWxzLndhaXRGb3IoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gIXRocy5zdGF0dXNXYWl0aW5nO1xuICAgICAgICB9LCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgdGhzLnN0YXR1cyhjYWxsQmFjayxmb3JjZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHRyeSBmb3IgdmFsdWUgcmVzb2x1dGlvblxuICAgIC8vIGZpcnN0IG9uIG1lbW9yeVxuICAgIGlmIChMYXp5KHRoaXMuY2FjaGVkU3RhdHVzKS5zaXplKCkpe1xuICAgICAgICBjYWxsQmFjayh0aGlzLmNhY2hlZFN0YXR1cylcbiAgICAvLyB0aGVuIGluIGxvY2FsU3RvcmFnZVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBkYXRhID0ge307XG4gICAgICAgIGlmIChrZXkgaW4gbG9jYWxTdG9yYWdlKSB7XG4gICAgICAgICAgICBkYXRhLl9fdG9rZW5fXyA9IGxvY2FsU3RvcmFnZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdHVzV2FpdGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuJHBvc3QoJ2FwaS9zdGF0dXMnLGRhdGEsIGZ1bmN0aW9uKHN0YXR1cyl7XG4gICAgICAgICAgICB0aHMudXBkYXRlU3RhdHVzKHN0YXR1cyk7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Vba2V5XSA9IHN0YXR1cy50b2tlbjtcbiAgICAgICAgICAgIGNhbGxCYWNrKHN0YXR1cyk7XG4gICAgICAgICAgICB0aHMuc3RhdHVzV2FpdGluZyA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gZG9lc24ndCBjYWxsIGNhbGxiYWNrXG4gICAgICAgIHJldHVyblxuICAgIH1cbiAgICBjYWxsQmFjayh0aGlzLmNhY2hlZFN0YXR1cyk7XG59O1xuXG5yZVdoZWVsQ29ubmVjdGlvbi5wcm90b3R5cGUudXBkYXRlU3RhdHVzID0gZnVuY3Rpb24oc3RhdHVzKXtcbiAgICB2YXIgbGFzdEJ1aWxkID0gcGFyc2VGbG9hdChsb2NhbFN0b3JhZ2UubGFzdEJ1aWxkKSB8fCAxO1xuICAgIGlmIChsYXN0QnVpbGQgPCBzdGF0dXMubGFzdF9idWlsZCl7XG4gICAgICAgIHV0aWxzLmNsZWFuRGVzY3JpcHRpb24oKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLmxhc3RCdWlsZCA9IHN0YXR1cy5sYXN0X2J1aWxkO1xuICAgIH1cbiAgICB0aGlzLmlzQ29ubmVjdGVkID0gQm9vbGVhbihzdGF0dXMudG9rZW4pO1xuICAgIHRoaXMuaXNMb2dnZWRJbiA9IEJvb2xlYW4oc3RhdHVzLnVzZXJfaWQpO1xuICAgIHZhciBvbGRTdGF0dXMgPSB0aGlzLmNhY2hlZFN0YXR1cztcbiAgICB0aGlzLmNhY2hlZFN0YXR1cyA9IHN0YXR1cztcbiAgICBpZiAoIW9sZFN0YXR1cy51c2VyX2lkICYmIHN0YXR1cy51c2VyX2lkKXtcbiAgICAgICAgdGhpcy5lbWl0KCdsb2dnZWQtaW4nLHN0YXR1cy51c2VyX2lkKTtcbiAgICB9IGVsc2UgaWYgKG9sZFN0YXR1cy51c2VyX2lkICYmICFzdGF0dXMudXNlcl9pZCl7XG4gICAgICAgIHRoaXMuZW1pdCgnbG9nZ2VkLW91dCcpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5pc0Nvbm5lY3RlZCAmJiAhdGhpcy5pc0xvZ2dlZEluKXtcbiAgICAgICAgdGhpcy5lbWl0KCdsb2dpbi1yZXF1aXJlZCcpO1xuICAgICAgICBpZiAodGhpcy5nZXRMb2dpbil7XG4gICAgICAgICAgICB2YXIgbG9naW5JbmZvID0gdGhpcy5nZXRMb2dpbigpO1xuICAgICAgICAgICAgaWYgKGxvZ2luSW5mby5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KXtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2luKGxvZ2luSW5mby51c2VybmFtZSwgbG9naW5JbmZvLnBhc3N3b3JkLCBsb2dpbkluZm8uY2FsbEJhY2spO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsb2dpbkluZm8uY29uc3RydWN0b3IgPT09IFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICBsb2dpbkluZm8udGhlbihmdW5jdGlvbihvYmope1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2luKG9iai51c2VybmFtZSwgb2JqLnBhc3N3b3JkLCBvYmouY2FsbEJhY2spO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gcmVhbHRpbWUgY29ubmVjdGlvbiBpcyBzZXR0ZWRcbiAgICBpZiAoIW9sZFN0YXR1cy5yZWFsdGltZUVuZFBvaW50ICYmIHN0YXR1cy5yZWFsdGltZUVuZFBvaW50KSB7XG4gICAgICAgIHRoaXMud3NDb25uZWN0aW9uID0gbmV3IFJlYWx0aW1lQ29ubmVjdGlvbihzdGF0dXMucmVhbHRpbWVFbmRQb2ludCwgdGhpcyk7XG4gICAgLy8gcmVhbHRpbWUgY29ubmVjdGlvbiBpcyBjbG9zZWRcbiAgICB9IGVsc2UgaWYgKG9sZFN0YXR1cy5yZWFsdGltZUVuZFBvaW50ICYmICFzdGF0dXMucmVhbHRpbWVFbmRQb2ludCkge1xuICAgICAgICB0aGlzLndzQ29ubmVjdGlvbi5jbG9zZSgpO1xuICAgICAgICBkZWxldGUgdGhpcy53c0Nvbm5lY3Rpb247XG4gICAgfVxuICAgIHRoaXMuZW1pdCgndXBkYXRlLWNvbm5lY3Rpb24tc3RhdHVzJywgc3RhdHVzLCBvbGRTdGF0dXMpO1xuICAgIGxvY2FsU3RvcmFnZVtTVEFUVVNLRVldID0gSlNPTi5zdHJpbmdpZnkoc3RhdHVzKTtcbn1cblxucmVXaGVlbENvbm5lY3Rpb24ucHJvdG90eXBlLmxvZ2luID0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkKXtcbiAgICAvKipcbiAgICAgKiBtYWtlIGxvZ2luIGFuZCByZXR1cm4gYSBwcm9taXNlLiBJZiBsb2dpbiBzdWNjZWQsIHByb21pc2Ugd2lsbCBiZSBhY2NlcHRlZFxuICAgICAqIElmIGxvZ2luIGZhaWxzIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZCB3aXRoIGVycm9yXG4gICAgICogQHBhcmFtIHVzZXJuYW1lOiB1c2VybmFtZVxuICAgICAqIEBwYXJhbSBwYXNzd29yZDogcGFzc3dvcmRcbiAgICAgKiBAcmV0dXJuIFByb21pc2UgKHVzZXIgb2JqZWN0KVxuICAgICAqL1xuICAgIHZhciB0aHMgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihhY2NlcHQsIHJlamVjdCl7XG4gICAgICAgIHV0aWxzLnhkcih0aHMuZW5kUG9pbnQgKyAnYXBpL2xvZ2luJywge3VzZXJuYW1lOiB1c2VybmFtZSB8fCAnJywgcGFzc3dvcmQ6IHBhc3N3b3JkIHx8ICcnfSxudWxsLHRocy5jYWNoZWRTdGF0dXMudG9rZW4sIHRydWUpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbih4aHIpe1xuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBzdGF0dXNcbiAgICAgICAgICAgICAgICB0aHMudXBkYXRlU3RhdHVzKHhoci5yZXNwb25zZURhdGEpO1xuICAgICAgICAgICAgICAgIC8vIGNhbGwgd2l0aCB1c2VyIGlkXG4gICAgICAgICAgICAgICAgYWNjZXB0KHtzdGF0dXMgOiAnc3VjY2VzcycsIHVzZXJpZDogdGhzLmNhY2hlZFN0YXR1cy51c2VyX2lkfSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbih4aHIpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiBlcnJvciBjYWxsIGVycm9yIG1hbmFnZXIgd2l0aCBlcnJvclxuICAgICAgICAgICAgICAgIHZhciBlcnJvciA9ICdDb3VsZCBub3QgcmVjZWl2ZSBlcnJvciBmcm9tIHNlcnZlcic7XG4gICAgICAgICAgICAgICAgaWYgKHhoci5yZXNwb25zZURhdGEgJiYgKCdlcnJvcicgaW4geGhyLnJlc3BvbnNlRGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSB4aHIucmVzcG9uc2VEYXRhLmVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhY2NlcHQoe2Vycm9yOiBlcnJvciwgc3RhdHVzOiAnZXJyb3InfSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9KTtcbn07XG5cbnJlV2hlZWxDb25uZWN0aW9uLnByb3RvdHlwZS5sb2dvdXQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdGhzID0gdGhpcztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oYWNjZXB0LHJlamVjdCkge1xuICAgICAgICB0aHMuJHBvc3QoJ2FwaS9sb2dvdXQnKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ob2spe1xuICAgICAgICAgICAgICAgIHRocy51cGRhdGVTdGF0dXMoe30pO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBsb2NhbFN0b3JhZ2VbU1RBVFVTS0VZXTtcbiAgICAgICAgICAgICAgICBhY2NlcHQoKVxuICAgICAgICAgICAgfSwgcmVqZWN0KTtcbiAgICB9KTtcbn07XG5cbnJlV2hlZWxDb25uZWN0aW9uLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24oY2FsbEJhY2spIHtcbiAgICBpZiAodGhpcy5pc0xvZ2dlZEluKSB7XG4gICAgICAgIGNhbGxCYWNrKHRoaXMuY2FjaGVkU3RhdHVzLnVzZXJfaWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHdhaXQgZm9yIGxvZ2luXG4gICAgICAgIHRoaXMub25jZSgnbG9nZ2VkLWluJyxmdW5jdGlvbih1c2VyX2lkKXtcbiAgICAgICAgICAgIGNhbGxCYWNrKHVzZXJfaWQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zdGF0dXMoY2FsbEJhY2sgfHwgdXRpbHMubm9vcCk7XG4gICAgfVxufVxuXG51dGlscy5yZVdoZWVsQ29ubmVjdGlvbiA9IHJlV2hlZWxDb25uZWN0aW9uOyIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gVG91Y2hlcigpe1xuICAgIHZhciB0b3VjaGVkID0gZmFsc2VcbiAgICB0aGlzLnRvdWNoID0gZnVuY3Rpb24oKXtcbiAgICAgICAgdG91Y2hlZCA9IHRydWU7XG4gICAgfTtcbiAgICB0aGlzLnRvdWNoZWQgPSBmdW5jdGlvbigpe1xuICAgICAgICB2YXIgdCA9IHRvdWNoZWQ7XG4gICAgICAgIHRvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5cbmZ1bmN0aW9uIFZhY3V1bUNhY2hlcih0b3VjaCwgYXNrZWQsIG5hbWUsIHBrSW5kZXgpe1xuLypcbiAgICBpZiAobmFtZSl7XG4gICAgICAgIGNvbnNvbGUuaW5mbygnY3JlYXRlZCBWYWN1dW1DYWNoZXIgYXMgJyArIG5hbWUpO1xuICAgIH1cbiovXG4gICAgaWYgKCFhc2tlZCl7XG4gICAgICAgIHZhciBhc2tlZCA9IFtdO1xuICAgIH1cbiAgICB2YXIgbWlzc2luZyA9IFtdO1xuICAgIFxuICAgIHRoaXMuYXNrID0gZnVuY3Rpb24gKGlkLGxhenkpe1xuICAgICAgICBpZiAocGtJbmRleCAmJiAoaWQgaW4gcGtJbmRleC5zb3VyY2UpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFMYXp5KGFza2VkKS5jb250YWlucyhpZCkpe1xuLy8gICAgICAgICAgICBjb25zb2xlLmluZm8oJ2Fza2luZyAoJyArIGlkICsgJykgZnJvbSAnICsgbmFtZSk7XG4gICAgICAgICAgICBtaXNzaW5nLnB1c2goaWQpO1xuICAgICAgICAgICAgaWYgKCFsYXp5KVxuICAgICAgICAgICAgICAgIGFza2VkLnB1c2goaWQpO1xuICAgICAgICAgICAgdG91Y2gudG91Y2goKTtcbiAgICAgICAgfSBcbi8vICAgICAgICBlbHNlIGNvbnNvbGUud2FybignKCcgKyBpZCArICcpIHdhcyBqdXN0IGFza2VkIG9uICcgKyBuYW1lKTtcbiAgICB9O1xuXG4gICAgdGhpcy5nZXRBc2tlZEluZGV4ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIGFza2VkO1xuICAgIH1cblxuICAgIHRoaXMubWlzc2luZ3MgPSBmdW5jdGlvbigpe1xuICAgICAgICByZXR1cm4gTGF6eShtaXNzaW5nLnNwbGljZSgwLG1pc3NpbmcubGVuZ3RoKSkudW5pcXVlKCkudG9BcnJheSgpO1xuICAgIH1cbn1cbiIsImZ1bmN0aW9uIEF1dG9MaW5rZXIoYWN0aXZlcywgSURCLCBXMlBSRVNPVVJDRSwgbGlzdENhY2hlKXtcbiAgICB2YXIgdG91Y2ggPSBuZXcgVG91Y2hlcigpO1xuICAgIHZhciBtYWluSW5kZXggPSB7fTtcbiAgICB2YXIgZm9yZWlnbktleXMgPSB7fTtcbiAgICB2YXIgbTJtID0ge307XG4gICAgdmFyIG0ybUluZGV4ID0ge307XG4gICAgdmFyIHBlcm1pc3Npb25zID0ge307XG4gICAgdGhpcy5tYWluSW5kZXggPSBtYWluSW5kZXg7XG4gICAgdGhpcy5mb3JlaWduS2V5cyA9IGZvcmVpZ25LZXlzO1xuICAgIHRoaXMubTJtID0gbTJtO1xuICAgIHRoaXMubTJtSW5kZXggPSBtMm1JbmRleDtcbiAgICB0aGlzLnBlcm1pc3Npb25zID0gcGVybWlzc2lvbnM7XG5cbiAgICBXMlBSRVNPVVJDRS5vbignbW9kZWwtZGVmaW5pdGlvbicsZnVuY3Rpb24obW9kZWwsIGluZGV4KXtcbiAgICAgICAgLy8gZGVmaW5pbmcgYWxsIGluZGV4ZXMgZm9yIHByaW1hcnkga2V5XG4gICAgICAgIHZhciBwa0luZGV4ID0gbGlzdENhY2hlLmdldEluZGV4Rm9yKG1vZGVsLm5hbWUsICdpZCcpO1xuICAgICAgICBtYWluSW5kZXhbbW9kZWwubmFtZV0gPSBuZXcgVmFjdXVtQ2FjaGVyKHRvdWNoLCBwa0luZGV4LCAnbWFpbkluZGV4LicgKyBtb2RlbC5uYW1lLCBpbmRleCk7XG4gICAgICAgIFxuICAgICAgICAvLyBjcmVhdGluZyBwZXJtaXNzaW9uIGluZGV4ZXNcbiAgICAgICAgcGVybWlzc2lvbnNbbW9kZWwubmFtZV0gPSBuZXcgVmFjdXVtQ2FjaGVyKHRvdWNoLG51bGwsICdwZXJtaXNzaW9ucy4nICsgbW9kZWwubmFtZSk7XG5cbiAgICAgICAgLy8gY3JlYXRpbmcgaW5kZXhlcyBmb3IgZm9yZWlnbiBrZXlzXG4gICAgICAgIExhenkobW9kZWwucmVmZXJlbmNlcykuZWFjaChmdW5jdGlvbihyZWZlcmVuY2Upe1xuICAgICAgICAgICAgdmFyIGluZGV4TmFtZSA9IG1vZGVsLm5hbWUgKyAnXycgKyByZWZlcmVuY2UuaWQ7XG4gICAgICAgICAgICBmb3JlaWduS2V5c1tpbmRleE5hbWVdID0gbmV3IFZhY3V1bUNhY2hlcih0b3VjaCwgbGlzdENhY2hlLmdldEluZGV4Rm9yKHJlZmVyZW5jZS50bywgJ2lkJyksIHJlZmVyZW5jZS50byArICcuaWQgZm9yZWlnbktleXMuJyArIGluZGV4TmFtZSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBjcmVhdGluZyByZXZlcnNlIGZvcmVpZ24ga2V5c1xuICAgICAgICBMYXp5KG1vZGVsLnJlZmVyZW5jZWRCeSkuZWFjaChmdW5jdGlvbihmaWVsZCl7XG4gICAgICAgICAgICB2YXIgaW5kZXhOYW1lID0gZmllbGQuYnkgKyAnLicgKyBmaWVsZC5pZDtcbiAgICAgICAgICAgIGZvcmVpZ25LZXlzW2luZGV4TmFtZV0gPSBuZXcgVmFjdXVtQ2FjaGVyKHRvdWNoLCBsaXN0Q2FjaGUuZ2V0SW5kZXhGb3IoZmllbGQuYnksZmllbGQuaWQpLCBmaWVsZC5ieSArICcuJyArIGZpZWxkLmlkICsgJyBmb3JlaWduS2V5cy4nICsgaW5kZXhOYW1lKTtcbiAgICAgICAgfSk7XG4gICAgICAgIExhenkobW9kZWwubWFueVRvTWFueSkuZWFjaChmdW5jdGlvbihyZWxhdGlvbil7XG4gICAgICAgICAgICBpZiAoIShyZWxhdGlvbi5pbmRleE5hbWUgaW4gbTJtKSlcbiAgICAgICAgICAgICAgICBtMm1bcmVsYXRpb24uaW5kZXhOYW1lXSA9IFtuZXcgVmFjdXVtQ2FjaGVyKHRvdWNoLG51bGwsJ20ybS4nICsgcmVsYXRpb24uaW5kZXhOYW1lICsgJ1swXScpLCBuZXcgVmFjdXVtQ2FjaGVyKHRvdWNoLG51bGwsJ20ybS4nICsgcmVsYXRpb24uaW5kZXhOYW1lKydbMV0nKV07XG4gICAgICAgICAgICBpZiAoIShyZWxhdGlvbi5pbmRleE5hbWUgaW4gbTJtSW5kZXgpKVxuICAgICAgICAgICAgICAgIG0ybUluZGV4W3JlbGF0aW9uLmluZGV4TmFtZV0gPSBuZXcgTWFueVRvTWFueVJlbGF0aW9uKHJlbGF0aW9uLG0ybVtyZWxhdGlvbi5pbmRleE5hbWVdKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgdmFyIG0ybUdldCA9IGZ1bmN0aW9uKGluZGV4TmFtZSwgbiwgY29sbGVjdGlvbiwgY2FsbEJhY2spe1xuICAgICAgICBXMlBSRVNPVVJDRS4kcG9zdCgobiA/IHV0aWxzLnJldmVyc2UoJy8nLCBpbmRleE5hbWUpIDogaW5kZXhOYW1lKSArICdzJyArICcvbGlzdCcsIHtjb2xsZWN0aW9uOiBjb2xsZWN0aW9ufSwgZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICBXMlBSRVNPVVJDRS5nb3REYXRhKGRhdGEsIGNhbGxCYWNrKTtcbiAgICAgICAgICAgIGRlbGV0ZSBhY3RpdmVzW2luZGV4TmFtZV1cbiAgICAgICAgfSk7ICAgICAgICBcbiAgICB9O1xuXG4gICAgdmFyIGdldE0yTSA9IGZ1bmN0aW9uKGluZGV4TmFtZSwgY29sbGVjdGlvbiwgbiwgY2FsbEJhY2spe1xuICAgICAgICAvLyBhc2sgYWxsIGl0ZW1zIGluIGNvbGxlY3Rpb24gdG8gbTJtIGluZGV4XG4gICAgICAgIExhenkoY29sbGVjdGlvbikuZWFjaChtMm1baW5kZXhOYW1lXVtuXS5hc2suYmluZChtMm1baW5kZXhOYW1lXVtuXSkpO1xuICAgICAgICAvLyByZW5ld2luZyBjb2xsZWN0aW9uIHdpdGhvdXQgYXNrZWRcbiAgICAgICAgY29sbGVjdGlvbiA9IG0ybVtpbmRleE5hbWVdW25dLm1pc3NpbmdzKCk7XG4gICAgICAgIC8vIGNhbGxpbmcgcmVtb3RlIGZvciBtMm0gY29sbGVjdGlvbiBpZiBhbnlcbiAgICAgICAgaWYgKGNvbGxlY3Rpb24ubGVuZ3RoKXtcbiAgICAgICAgICAgIGFjdGl2ZXNbaW5kZXhOYW1lXSA9IDE7XG4gICAgICAgICAgICBtMm1HZXQoaW5kZXhOYW1lLCBuLCBjb2xsZWN0aW9uLCBjYWxsQmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWxsQmFjayAmJiBjYWxsQmFjaygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmdldE0yTSA9IGdldE0yTTtcblxuICAgIHZhciBsaW5rVW5saW5rZWQgPSBmdW5jdGlvbigpe1xuICAgICAgICAvLyBwZXJmb3JtIGEgRGF0YUJhc2Ugc3luY2hyb25pemF0aW9uIHdpdGggc2VydmVyIGxvb2tpbmcgZm9yIHVua25vd24gZGF0YVxuICAgICAgICBpZiAoIXRvdWNoLnRvdWNoZWQoKSkgcmV0dXJuO1xuICAgICAgICBpZiAoTGF6eShhY3RpdmVzKS52YWx1ZXMoKS5zdW0oKSkge1xuICAgICAgICAgICAgdG91Y2gudG91Y2goKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICBMYXp5KG0ybSkuZWFjaChmdW5jdGlvbihpbmRleGVzLCBpbmRleE5hbWUpe1xuICAgICAgICAgICAgTGF6eShpbmRleGVzKS5lYWNoKGZ1bmN0aW9uIChpbmRleCxuKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbGxlY3Rpb24gPSBpbmRleC5taXNzaW5ncygpO1xuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb24gPSBMYXp5KGNvbGxlY3Rpb24pLmZpbHRlcihCb29sZWFuKS5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHgpXG4gICAgICAgICAgICAgICAgfSkudG9BcnJheSgpO1xuICAgICAgICAgICAgICAgIGlmIChjb2xsZWN0aW9uLmxlbmd0aCl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBJTkRFWCA9IG0ybUluZGV4W2luZGV4TmFtZV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBnZXR0ZXIgPSBJTkRFWFsnZ2V0JyArICgxIC0gbildLmJpbmQoSU5ERVgpO1xuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgbTJtR2V0KGluZGV4TmFtZSwgbiwgY29sbGVjdGlvbiwgZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWRzID0gY29sbGVjdGlvbi5tYXAoZ2V0dGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpZHMubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3RoZXJJbmRleCA9IGluZGV4TmFtZS5zcGxpdCgnLycpWzEgLSBuXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXMlBSRVNPVVJDRS5kZXNjcmliZShvdGhlckluZGV4LGZ1bmN0aW9uKCl7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTGF6eShpZHMpLmZsYXR0ZW4oKS51bmlxdWUoKS5lYWNoKG1haW5JbmRleFtvdGhlckluZGV4XS5hc2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMYXp5KGlkcykuZmxhdHRlbigpLnVuaXF1ZSgpLmVhY2goZnVuY3Rpb24oeCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWluSW5kZXhbb3RoZXJJbmRleF0uYXNrKHgsdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIExhenkobWFpbkluZGV4KS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgbW9kZWxOYW1lKSB7XG4gICAgICAgICAgICB2YXIgaWRzID0gaW5kZXgubWlzc2luZ3MoKTtcbiAgICAgICAgICAgIGlmIChpZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIGlkYiA9IG1vZGVsTmFtZSBpbiBJREIgPyBJREJbbW9kZWxOYW1lXS5rZXlzKCkgOiBMYXp5KCk7XG4gICAgICAgICAgICAgICAgLy9sb2coJ2xpbmtpbmcuJyArIG1vZGVsTmFtZSArICcgPSAnICsgVzJQUkVTT1VSQ0UubGlua2luZy5zb3VyY2VbbW9kZWxOYW1lXSk7XG4gICAgICAgICAgICAgICAgVzJQUkVTT1VSQ0UuZmV0Y2gobW9kZWxOYW1lLCB7aWQ6IGlkc30sbnVsbCx1dGlscy5ub29wKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEZvcmVpZ24ga2V5c1xuICAgICAgICBMYXp5KGZvcmVpZ25LZXlzKVxuICAgICAgICAubWFwKGZ1bmN0aW9uKHYsayl7XG4gICAgICAgICAgICByZXR1cm4gW2ssIHYubWlzc2luZ3MoKV1cbiAgICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uKHYpe1xuICAgICAgICAgICAgcmV0dXJuIHZbMV0ubGVuZ3RoXG4gICAgICAgIH0pLmVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIGlkcyA9IHhbMV07XG4gICAgICAgICAgICB2YXIgaW5kZXhOYW1lID0geFswXTtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGluZGV4TmFtZS5zcGxpdCgnLicpO1xuICAgICAgICAgICAgdmFyIG1haW5SZXNvdXJjZSA9IGluZGV4WzBdO1xuICAgICAgICAgICAgdmFyIGZpZWxkTmFtZSA9IGluZGV4WzFdO1xuICAgICAgICAgICAgdmFyIGZpbHRlciA9IHt9O1xuICAgICAgICAgICAgZmlsdGVyW2ZpZWxkTmFtZV0gPSBpZHM7XG4gICAgICAgICAgICBXMlBSRVNPVVJDRS5mZXRjaChtYWluUmVzb3VyY2UsIGZpbHRlcik7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgTGF6eShMYXp5KHBlcm1pc3Npb25zKS5tYXAoZnVuY3Rpb24odixrKXtcbiAgICAgICAgICAgIHJldHVybiBbaywgdi5taXNzaW5ncygpXVxuICAgICAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgIHJldHVybiB2WzFdLmxlbmd0aFxuICAgICAgICB9KS50b09iamVjdCgpKS5lYWNoKGZ1bmN0aW9uIChpZHMsIHJlc291cmNlTmFtZSkge1xuICAgICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoaWRzLmxlbmd0aCl7XG4gICAgICAgICAgICAgICAgYWN0aXZlc1tyZXNvdXJjZU5hbWVdID0gMTtcbiAgICAgICAgICAgICAgICBXMlBSRVNPVVJDRS4kcG9zdChyZXNvdXJjZU5hbWUgKyAnL215X3Blcm1zJywge2lkczogTGF6eShpZHMpLnVuaXF1ZSgpLnRvQXJyYXkoKX0sIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIFcyUFJFU09VUkNFLmdvdFBlcm1pc3Npb25zKGRhdGEuUEVSTUlTU0lPTlMpO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgYWN0aXZlc1tyZXNvdXJjZU5hbWVdXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzZXRJbnRlcnZhbChsaW5rVW5saW5rZWQsNTApO1xufTtcblxuXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gTGlzdENhY2hlcigpe1xuICAgIHZhciBnb3RBbGwgPSB7fTtcbiAgICB2YXIgYXNrZWQgPSB7fTsgLy8gbWFwIG9mIGFycmF5XG4gICAgdmFyIGNvbXBvc2l0ZUFza2VkID0ge307XG4gICAgdmFyIGNhcnRlc2lhblByb2R1Y3QxID0gZnVuY3Rpb24oeCx5LGlzQXJyYXkpe1xuICAgICAgICB2YXIgcmV0ID0gW107XG4gICAgICAgIGlmIChpc0FycmF5KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBhIGluIHgpe1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGIgaW4geSl7XG4gICAgICAgICAgICAgICAgICAgIHJldC5wdXNoKExhenkoW3hbYV0seVtiXV0pLmZsYXR0ZW4oKS50b0FycmF5KCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIGEgaW4geCl7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYiBpbiB5KXtcbiAgICAgICAgICAgICAgICAgICAgcmV0LnB1c2goW3hbYV0seVtiXV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH07XG4gICAgdmFyIGNhcnRlc2lhblByb2R1Y3QgPSBmdW5jdGlvbihhcnIpe1xuICAgICAgICB2YXIgaXNBcnJheSA9IGZhbHNlO1xuICAgICAgICB2YXIgcmV0ID0gYXJyWzBdOyBcbiAgICAgICAgZm9yICh2YXIgeCA9IDE7IHggPCBhcnIubGVuZ3RoOyArK3gpe1xuICAgICAgICAgICAgcmV0ID0gY2FydGVzaWFuUHJvZHVjdDEocmV0LCBhcnJbeF0sIGlzQXJyYXkpO1xuICAgICAgICAgICAgaXNBcnJheSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgdmFyIGV4cGxvZGVGaWx0ZXIgPSBmdW5jdGlvbihmaWx0ZXIpIHtcbiAgICAgICAgdmFyIHByb2R1Y3QgPSBjYXJ0ZXNpYW5Qcm9kdWN0KExhenkoZmlsdGVyKS52YWx1ZXMoKS50b0FycmF5KCkpO1xuICAgICAgICB2YXIga2V5cyA9IExhenkoZmlsdGVyKS5rZXlzKCkudG9BcnJheSgpO1xuICAgICAgICByZXR1cm4gcHJvZHVjdC5tYXAoZnVuY3Rpb24oeCl7XG4gICAgICAgICAgICB2YXIgciA9IHt9O1xuICAgICAgICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGEsbil7XG4gICAgICAgICAgICAgICAgclthXSA9IHhbbl07XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICB9O1xuICAgIHZhciBmaWx0ZXJTaW5nbGUgPSBmdW5jdGlvbihtb2RlbCwgZmlsdGVyLCB0ZXN0T25seSl7XG4gICAgICAgIC8vIExhenkgYXV0byBjcmVhdGUgaW5kZXhlc1xuICAgICAgICB2YXIgbW9kZWxOYW1lID0gbW9kZWwubW9kZWxOYW1lO1xuICAgICAgICB2YXIgZ2V0SW5kZXhGb3IgPSB0aGlzLmdldEluZGV4Rm9yO1xuICAgICAgICB2YXIga2V5cyA9IExhenkoZmlsdGVyKS5tYXAoZnVuY3Rpb24odixrZXkpeyByZXR1cm4gW2tleSwgbW9kZWxOYW1lICsgJy4nICsga2V5XTsgfSkudG9PYmplY3QoKTtcbiAgICAgICAgdmFyIGluZGV4ZXMgPSBMYXp5KGZpbHRlcikua2V5cygpLm1hcChmdW5jdGlvbihrZXkpeyByZXR1cm4gW2tleSwgZ2V0SW5kZXhGb3IobW9kZWxOYW1lLCBrZXkpXX0pLnRvT2JqZWN0KCk7IFxuICAgICAgICAvLyBmYWtlIGZvciAoaXQgd2lsbCBjeWNsZSBvbmNlKVxuICAgICAgICBmb3IgKHZhciB4IGluIGZpbHRlcil7XG4gICAgICAgICAgICAvLyBnZXQgYXNrZWQgaW5kZXggYW5kIGNoZWNrIHByZXNlbmNlXG4gICAgICAgICAgICB2YXIgZGlmZmVyZW5jZSA9IExhenkoZmlsdGVyW3hdKS5kaWZmZXJlbmNlKGluZGV4ZXNbeF0pLnRvQXJyYXkoKTtcbiAgICAgICAgICAgIGlmIChkaWZmZXJlbmNlLmxlbmd0aCl7XG4gICAgICAgICAgICAgICAgLy8gZ2VuZXJhdGUgbmV3IGZpbHRlclxuICAgICAgICAgICAgICAgIHZhciByZXQgPSBMYXp5KFtbeCwgZGlmZmVyZW5jZV1dKS50b09iamVjdCgpO1xuICAgICAgICAgICAgICAgIC8vIHJlbWVtYmVyIGFza2VkXG4gICAgICAgICAgICAgICAgaWYgKCF0ZXN0T25seSlcbiAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoaW5kZXhlc1t4XSwgZGlmZmVyZW5jZSk7XG4vLyAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnc2luZ2xlIGZpbHRlciA6ICcgKyBKU09OLnN0cmluZ2lmeShmaWx0ZXIpICsgJ1xcbk91dCA6JyArIEpTT04uc3RyaW5naWZ5KHJldCkpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuLy8gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3NpbmdsZSBmaWx0ZXIgOiAnICsgSlNPTi5zdHJpbmdpZnkoZmlsdGVyKSArICdcXG5PdXQgOiBudWxsJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGNsZWFuQ29tcG9zaXRlcyA9IGZ1bmN0aW9uKG1vZGVsLGZpbHRlcil7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjbGVhbiBjb21wb3NpdGVBc2tlZFxuICAgICAgICAgKi9cbiAgICAgICAgLy8gbGF6eSBjcmVhdGUgY29uZGl0aW9uYWwgYXNrZWQgaW5kZXhcbiAgICAgICAgaWYgKCEobW9kZWwubmFtZSBpbiBjb21wb3NpdGVBc2tlZCkpIHsgY29tcG9zaXRlQXNrZWRbbW9kZWwubmFtZV0gPSBbXSB9O1xuICAgICAgICB2YXIgaW5kZXggPSBjb21wb3NpdGVBc2tlZFttb2RlbC5uYW1lXTtcbiAgICAgICAgLy8gc2VhcmNoIGZvciBhbGwgZWxlbWVudHMgd2hvIGhhdmUgc2FtZSBwYXJ0aWFsXG4gICAgICAgIHZhciBmaWx0ZXJMZW4gPSBMYXp5KGZpbHRlcikuc2l6ZSgpO1xuICAgICAgICB2YXIgaXRlbXMgPSBpbmRleC5maWx0ZXIodXRpbHMubWFrZUZpbHRlcihtb2RlbCwgZmlsdGVyLCAnICYmICcsdHJ1ZSkpLmZpbHRlcihmdW5jdGlvbihpdGVtKXsgTGF6eShpdGVtKS5zaXplKCkgPiBmaWx0ZXJMZW4gfSk7XG4vLyAgICAgICAgY29uc29sZS5sb2coJ2RlbGV0aW5nIDonICsgSlNPTi5zdHJpbmdpZnkoaXRlbXMpKTtcbiAgICB9O1xuXG4gICAgdGhpcy5maWx0ZXIgPSBmdW5jdGlvbihtb2RlbCwgZmlsdGVyKXtcbi8vICAgICAgICBjb25zb2xlLmxvZygnLS0tLS0tLS0tLS0tLS0tLS0tXFxuZmlsdGVyIDogJyArIEpTT04uc3RyaW5naWZ5KGZpbHRlcikpO1xuICAgICAgICB2YXIgbW9kZWxOYW1lID0gbW9kZWwubW9kZWxOYW1lO1xuXG4gICAgICAgIC8vIGlmIHlvdSBmZXRjaCBhbGwgb2JqZWN0cyBmcm9tIHNlcnZlciwgdGhpcyBtb2RlbCBoYXMgdG8gYmUgbWFya2VkIGFzIGdvdCBhbGw7XG4gICAgICAgIHZhciBmaWx0ZXJMZW4gID0gTGF6eShmaWx0ZXIpLnNpemUoKTtcbiAgICAgICAgc3dpdGNoIChmaWx0ZXJMZW4pIHtcbiAgICAgICAgICAgIGNhc2UgMCA6IHtcbiAgICAgICAgICAgICAgICAvLyByZXR1cm4gbnVsbCBvciBhbGxcbiAgICAgICAgICAgICAgICB2YXIgZ290ID0gZ290QWxsW21vZGVsTmFtZV07XG4gICAgICAgICAgICAgICAgZ290QWxsW21vZGVsTmFtZV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChtb2RlbE5hbWUgaW4gYXNrZWQpe1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgYXNrZWRbbW9kZWxOYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnb3V0IDogbnVsbCAoZ290IGFsbCknKTtcbiAgICAgICAgICAgICAgICAvLyBjb25kaXRpb25hbCBjbGVhblxuICAgICAgICAgICAgICAgIGlmIChtb2RlbE5hbWUgaW4gY29tcG9zaXRlQXNrZWQpeyBcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGNvbXBvc2l0ZUFza2VkW21vZGVsTmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChnb3QpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgMSA6IHtcbiAgICAgICAgICAgICAgICB2YXIgcmV0ID0gZmlsdGVyU2luZ2xlLmNhbGwodGhpcywgbW9kZWwsIGZpbHRlcik7XG4gICAgICAgICAgICAgICAgY2xlYW5Db21wb3NpdGVzLmNhbGwodGhpcywgbW9kZWwsIGZpbHRlcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgdGhzID0gdGhpcztcbiAgICAgICAgdmFyIHNpbmdsZSA9IExhenkoZmlsdGVyKS5rZXlzKCkuc29tZShmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIHZhciBmID0ge307XG4gICAgICAgICAgICBmW2tleV0gPSBmaWx0ZXJba2V5XTtcbiAgICAgICAgICAgIHJldHVybiBmaWx0ZXJTaW5nbGUuY2FsbCh0aHMsIG1vZGVsLCBmLCB0cnVlKSA9PSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHNpbmdsZSkgeyByZXR1cm4gbnVsbCB9XG4gICAgICAgIC8vIGxhenkgY3JlYXRlIGNvbXBvc2l0ZUFza2VkXG4gICAgICAgIGlmICghKG1vZGVsTmFtZSBpbiBjb21wb3NpdGVBc2tlZCkpeyBjb21wb3NpdGVBc2tlZFttb2RlbE5hbWVdID0gW107IH1cbiAgICAgICAgLy8gZXhwbG9kZSBmaWx0ZXJcbiAgICAgICAgdmFyIGV4cGxvZGVkID0gZXhwbG9kZUZpbHRlcihmaWx0ZXIpO1xuICAgICAgICAvLyBjb2xsZWN0IHBhcnRpYWxzXG4gICAgICAgIHZhciBwYXJ0aWFscyA9IGNvbXBvc2l0ZUFza2VkW21vZGVsTmFtZV0uZmlsdGVyKHV0aWxzLm1ha2VGaWx0ZXIobW9kZWwsIGZpbHRlciwgJyB8fCAnLHRydWUpKTtcbiAgICAgICAgLy8gY29sbGVjdCBtaXNzaW5ncyAoZXhwbG9kZWQgLSBwYXJ0aWFscylcbiAgICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCl7XG4gICAgICAgICAgICB2YXIgYmFkICA9IFtdO1xuICAgICAgICAgICAgLy8gcGFydGlhbCBkaWZmZXJlbmNlXG4gICAgICAgICAgICBmb3IgKHZhciB4IGluIHBhcnRpYWxzKXtcbiAgICAgICAgICAgICAgICBiYWQucHVzaC5hcHBseShiYWQsZXhwbG9kZWQuZmlsdGVyKHV0aWxzLm1ha2VGaWx0ZXIobW9kZWwsIHBhcnRpYWxzW3hdLCcgJiYgJywgdHJ1ZSkpKTtcbiAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgY29uc29sZS5sb2coJ2V4cGxvZGVkIC0gcGFydGlhbCA6ICcgKyBKU09OLnN0cmluZ2lmeShiYWQpKTtcbiAgICAgICAgICAgIHZhciBtaXNzaW5ncyA9IExhenkoZXhwbG9kZWQpLmRpZmZlcmVuY2UoYmFkKS50b0FycmF5KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgbWlzc2luZ3MgPSBleHBsb2RlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZpbHRlciBwYXJ0aWFsc1xuICAgICAgICBpZiAobWlzc2luZ3MubGVuZ3RoKXtcbiAgICAgICAgICAgIGNvbXBvc2l0ZUFza2VkW21vZGVsTmFtZV0ucHVzaC5hcHBseShjb21wb3NpdGVBc2tlZFttb2RlbE5hbWVdLG1pc3NpbmdzKTtcbiAgICAgICAgICAgIC8vIGFnZ3JlZ2F0ZSBtaXNzaW5nc1xuICAgICAgICAgICAgdmFyIG1pc3NpbmdzID0gTGF6eShmaWx0ZXIpLmtleXMoKS5tYXAoZnVuY3Rpb24oa2V5KXtcbiAgICAgICAgICAgICAgICB2YXIgcmV0ID0gTGF6eShtaXNzaW5ncykucGx1Y2soa2V5KS51bmlxdWUoKS50b0FycmF5KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtrZXksIHJldC5sZW5ndGg/cmV0OmZpbHRlcltrZXldXTtcbiAgICAgICAgICAgIH0pLnRvT2JqZWN0KCk7XG4vLyAgICAgICAgICAgIGNvbnNvbGUubG9nKCdvdXQgOiAnICsgSlNPTi5zdHJpbmdpZnkobWlzc2luZ3MpKTtcbiAgICAgICAgICAgIC8vIGNsZWFuIGNvbmRpdGlvbmFsXG4gICAgICAgICAgICBjbGVhbkNvbXBvc2l0ZXMobW9kZWwsIG1pc3NpbmdzKTtcbiAgICAgICAgICAgIHJldHVybiBtaXNzaW5ncztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgdGhpcy5nZXRJbmRleEZvciA9IGZ1bmN0aW9uKG1vZGVsTmFtZSwgZmllbGROYW1lKXtcbiAgICAgICAgdmFyIGluZGV4TmFtZSA9IG1vZGVsTmFtZSArICcuJyArIGZpZWxkTmFtZTtcbiAgICAgICAgaWYgKCEoaW5kZXhOYW1lIGluIGFza2VkKSl7XG4gICAgICAgICAgICBhc2tlZFtpbmRleE5hbWVdID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFza2VkW2luZGV4TmFtZV07XG4gICAgfVxufTsiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIE1hbnlUb01hbnlSZWxhdGlvbihyZWxhdGlvbixtMm0pe1xuICAgIHZhciBpdGVtcyA9IFtdO1xuICAgIHRoaXMuYWRkID0gaXRlbXMucHVzaC5iaW5kKGl0ZW1zKTtcbiAgICB0aGlzLmFkZCA9IGZ1bmN0aW9uKGl0ZW0pe1xuICAvLyAgICAgIGNvbnNvbGUubG9nKCdhZGRpbmcgJyArIGl0ZW0pO1xuICAgICAgICBpZiAoIShMYXp5KGl0ZW1zKS5maW5kKGl0ZW0pKSl7XG4gICAgICAgICAgICBpdGVtcy5wdXNoKGl0ZW0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5nZXQwID0gZnVuY3Rpb24oaWQpe1xuICAgICAgICBtMm1bMV0uYXNrKGlkKTtcbiAgICAgICAgcmV0dXJuIExhenkoaXRlbXMpLmZpbHRlcihmdW5jdGlvbih4KXtcbiAgICAgICAgICAgIHJldHVybiB4WzBdID09PSBpZDtcbiAgICAgICAgfSkucGx1Y2soXCIxXCIpLnRvQXJyYXkoKTtcbiAgICB9O1xuXG4gICAgdGhpcy5nZXQxID0gZnVuY3Rpb24oaWQpe1xuICAgICAgICBtMm1bMF0uYXNrKGlkKTtcbiAgICAgICAgcmV0dXJuIExhenkoaXRlbXMpLmZpbHRlcihmdW5jdGlvbih4KXtcbiAgICAgICAgICAgIHJldHVybiB4WzFdID09PSBpZDtcbiAgICAgICAgfSkucGx1Y2soXCIwXCIpLnRvQXJyYXkoKTtcbiAgICB9O1xuICAgIHRoaXNbJ2dldCcgKyB1dGlscy5jYXBpdGFsaXplKHJlbGF0aW9uLmluZGV4TmFtZS5zcGxpdCgnLycpWzFdKV0gPSB0aGlzLmdldDE7XG4gICAgdGhpc1snZ2V0JyArIHV0aWxzLmNhcGl0YWxpemUocmVsYXRpb24uaW5kZXhOYW1lLnNwbGl0KCcvJylbMF0pXSA9IHRoaXMuZ2V0MDtcblxuICAgIHRoaXMuZGVsID0gZnVuY3Rpb24oaXRlbSl7XG4gICAgICAgIHZhciBsID0gaXRlbXMubGVuZ3RoO1xuICAgICAgICB2YXIgaWR4ID0gbnVsbDtcbiAgICAgICAgZm9yICh2YXIgYSA9IDA7IGEgPCBsOyBhKyspeyBcbiAgICAgICAgICAgIGlmICgoaXRlbXNbYV1bMF0gPT09IGl0ZW1bMF0pICYmIChpdGVtc1thXVsxXSA9PT0gaXRlbVsxXSkpe1xuICAgICAgICAgICAgICAgIGlkeCA9IGE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlkeCl7XG4gICAgICAgICAgICBpdGVtcy5zcGxpY2UoYSwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coJ2RlbGV0aW5nICcsIGl0ZW0pO1xuICAgIH07XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjYWNoZWRQcm9wZXJ0eUJ5RXZlbnRzKHByb3RvLCBwcm9wZXJ0eU5hbWUsZ2V0dGVyLCBzZXR0ZXIpe1xuICAgIHZhciBldmVudHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsNCk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIFxuICAgIExhenkoZXZlbnRzKS5lYWNoKGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgICAgcHJvdG8ub3JtLm9uKGV2ZW50LGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICByZXN1bHQgPSB7fTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgdmFyIHByb3BlcnR5RGVmID0ge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGNhY2hlZCgpe1xuLy8gICAgICAgICAgICByZXR1cm4gZ2V0dGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICBpZiAoISh0aGlzLmlkIGluIHJlc3VsdCkpe1xuICAgICAgICAgICAgICAgIHJlc3VsdFt0aGlzLmlkXSA9IGdldHRlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFt0aGlzLmlkXTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgaWYgKHNldHRlcil7XG4gICAgICAgIHByb3BlcnR5RGVmWydzZXQnXSA9IGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgICAgICAgIGlmICghaXNGaW5pdGUodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaWQgaW4gcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZXN1bHRbdGhpcy5pZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgICAgaWYgKHZhbHVlICE9PSByZXN1bHRbdGhpcy5pZF0pe1xuICAgICAgICAgICAgICAgIHNldHRlci5jYWxsKHRoaXMsdmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlkIGluIHJlc3VsdCl7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZXN1bHRbdGhpcy5pZF07XG4gICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCBwcm9wZXJ0eU5hbWUscHJvcGVydHlEZWYpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBWYWxpZGF0aW9uRXJyb3IoZGF0YSl7XG4gICAgdGhpcy5yZXNvdXJjZSA9IGRhdGEuX3Jlc291cmNlO1xuICAgIHRoaXMuZm9ybUlkeCA9IGRhdGEuZm9ybUlkeDtcbiAgICB0aGlzLmZpZWxkcyA9IGRhdGEuZXJyb3JzO1xufVxudmFyIGJhc2VPUk0gPSBmdW5jdGlvbihvcHRpb25zLCBleHRPUk0pe1xuICAgIFxuICAgIC8vIGNyZWF0aW5nIHJld2hlZWwgY29ubmVjdGlvblxuICAgIGlmIChvcHRpb25zLmNvbnN0cnVjdG9yID09PSBTdHJpbmcpe1xuICAgICAgICB2YXIgY29ubmVjdGlvbiA9IG5ldyByZVdoZWVsQ29ubmVjdGlvbihvcHRpb25zKTtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMuY29uc3RydWN0b3IgPT09IHV0aWxzLnJlV2hlZWxDb25uZWN0aW9uKXtcbiAgICAgICAgdmFyIGNvbm5lY3Rpb24gPSBvcHRpb25zO1xuICAgIH1cbiAgICB0aGlzLmNvbm5lY3Rpb24gPSBjb25uZWN0aW9uO1xuICAgIGNvbm5lY3Rpb24ub24oJ2Nvbm5lY3RlZCcsIGZ1bmN0aW9uKCl7IFxuICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IHRydWU7XG4gICAgfSk7XG4gICAgdGhpcy5vbiA9IGNvbm5lY3Rpb24ub247XG4gICAgdGhpcy5lbWl0ID0gY29ubmVjdGlvbi5lbWl0O1xuICAgIHRoaXMudW5iaW5kID0gY29ubmVjdGlvbi51bmJpbmQ7XG4gICAgdGhpcy5vbmNlID0gY29ubmVjdGlvbi5vbmNlO1xuICAgIHRoaXMuJHBvc3QgPSBjb25uZWN0aW9uLiRwb3N0LmJpbmQoY29ubmVjdGlvbik7XG5cbiAgICAvLyBoYW5kbGluZyB3ZWJzb2NrZXQgZXZlbnRzXG4gICAgdGhpcy5vbignd3MtY29ubmVjdGVkJyxmdW5jdGlvbih3cyl7XG4gICAgICAgIGNvbnNvbGUuaW5mbygnV2Vic29ja2V0IGNvbm5lY3RlZCcpO1xuICAgICAgICAvLyBhbGwganNvbiBkYXRhIGhhcyB0byBiZSBwYXJzZWQgYnkgZ290RGF0YVxuICAgICAgICB3cy5vbk1lc3NhZ2VKc29uKFcyUFJFU09VUkNFLmdvdERhdGEuYmluZChXMlBSRVNPVVJDRSkpO1xuICAgICAgICAvL1xuICAgICAgICB3cy5vbk1lc3NhZ2VUZXh0KGZ1bmN0aW9uKG1lc3NhZ2Upe1xuICAgICAgICAgICAgY29uc29sZS5pbmZvKCdXUyBtZXNzYWdlIDogJyArIG1lc3NhZ2UpXG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHRoaXMub24oJ3dzLWRpc2Nvbm5lY3RlZCcsIGZ1bmN0aW9uKHdzKXtcbiAgICAgICAgY29uc29sZS5lcnJvcignV2Vic29ja2V0IGRpc2Nvbm5lY3RlZCcpXG4gICAgfSk7XG4gICAgdGhpcy5vbignZXJyb3ItanNvbi00MDQnLGZ1bmN0aW9uKGVycm9yLHVybCwgc2VudERhdGEsIHhocil7IFxuICAgICAgICBjb25zb2xlLmVycm9yKCdKU09OIGVycm9yICcsIEpTT04uc3RyaW5naWZ5KGVycm9yKSk7XG4gICAgICAgIGRlbGV0ZSB3YWl0aW5nQ29ubmVjdGlvbnNbdXJsLnNwbGl0KCcvJylbMF1dO1xuICAgIH0pO1xuICAgIHRoaXMub24oJ3JlYWx0aW1lLW1lc3NhZ2UtanNvbicsIGZ1bmN0aW9uKG1lc3NhZ2Upe1xuICAgICAgICBXMlBSRVNPVVJDRS5nb3REYXRhKG1lc3NhZ2UpO1xuICAgIH0pO1xuXG4gICAgLy8gaW5pdGlhbGl6YXRpb25cbiAgICB2YXIgVzJQUkVTT1VSQ0UgPSB0aGlzO1xuICAgIHZhciBJREIgPSB7YXV0aF9ncm91cCA6IExhenkoe30pfTsgLy8gdGFibGVOYW1lIC0+IGRhdGEgYXMgQXJyYXlcbiAgICB2YXIgSURYID0ge307IC8vIHRhYmxlTmFtZSAtPiBMYXp5KGluZGV4QnkoJ2lkJykpIC0+IElEQltkYXRhXVxuICAgIHZhciBSRVZJRFggPSB7fTsgLy8gdGFibGVOYW1lIC0+IGZpZWxkTmFtZSAtPiBMYXp5Lmdyb3VwQnkoKSAtPiBJREJbREFUQV1cbiAgICB2YXIgYnVpbGRlckhhbmRsZXJzID0ge307XG4gICAgdmFyIGJ1aWxkZXJIYW5kbGVyVXNlZCA9IHt9O1xuICAgIHZhciBwZXJzaXN0ZW50QXR0cmlidXRlcyA9IHt9O1xuICAgIHZhciBldmVudEhhbmRsZXJzID0ge307XG4gICAgdmFyIHBlcm1pc3Npb25XYWl0aW5nID0ge307XG4gICAgdmFyIG1vZGVsQ2FjaGUgPSB7fTtcbiAgICB2YXIgZmFpbGVkTW9kZWxzID0ge307XG4gICAgdmFyIHdhaXRpbmdDb25uZWN0aW9ucyA9IHt9IC8vIGFjdHVhbCBjb25uZWN0aW9uIHdobyBpJ20gd2FpdGluZyBmb3JcbiAgICB2YXIgbGlzdENhY2hlID0gbmV3IExpc3RDYWNoZXIoTGF6eSk7XG4gICAgdmFyIGxpbmtlciA9IG5ldyBBdXRvTGlua2VyKHdhaXRpbmdDb25uZWN0aW9ucyxJREIsIHRoaXMsIGxpc3RDYWNoZSk7XG4vKiAgICB3aW5kb3cubGwgPSBsaW5rZXI7XG4gICAgd2luZG93LmxjID0gbGlzdENhY2hlO1xuKi9cbiAgICB3aW5kb3cuSURCID0gSURCO1xuICAgIHRoaXMudmFsaWRhdGlvbkV2ZW50ID0gdGhpcy5vbignZXJyb3ItanNvbi01MTMnLCBmdW5jdGlvbihkYXRhLCB1cmwsIHNlbnREYXRhLCB4aHIpe1xuICAgICAgICBpZiAoY3VycmVudENvbnRleHQuc2F2aW5nRXJyb3JIYW5sZGVyKXtcbiAgICAgICAgICAgIGN1cnJlbnRDb250ZXh0LnNhdmluZ0Vycm9ySGFubGRlcihuZXcgVmFsaWRhdGlvbkVycm9yKGRhdGEpKTtcbiAgICAgICAgfVxuICAgIH0pXG5cbiAgICB2YXIgZ2V0SW5kZXggPSBmdW5jdGlvbiAoaW5kZXhOYW1lKSB7XG4gICAgICAgIGlmIChpbmRleE5hbWUgaW4gSURCKVxuICAgICAgICAgICAgcmV0dXJuIElEQltpbmRleE5hbWVdO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIElEQltpbmRleE5hbWVdID0gTGF6eSh7fSk7XG4gICAgICAgICAgICByZXR1cm4gSURCW2luZGV4TmFtZV07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBnZXRVbmxpbmtlZCA9IGZ1bmN0aW9uIChpbmRleE5hbWUpIHtcbiAgICAgICAgaWYgKGluZGV4TmFtZSBpbiBVTkxJTktFRClcbiAgICAgICAgICAgIHJldHVybiBVTkxJTktFRFtpbmRleE5hbWVdO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIFVOTElOS0VEW2luZGV4TmFtZV0gPSB7fTtcbiAgICAgICAgICAgIHJldHVybiBVTkxJTktFRFtpbmRleE5hbWVdO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIFBlcm1pc3Npb25UYWJsZShpZCwga2xhc3MsIHBlcm1pc3Npb25zKSB7XG4gICAgICAgIC8vIGNyZWF0ZSBQZXJtaXNzaW9uVGFibGUgY2xhc3NcbiAgICAgICAgdGhpcy5rbGFzcyA9IGtsYXNzO1xuICAgICAgICB0aGlzLnBlcm1pc3Npb25zID0gW107XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgZm9yICh2YXIgayBpbiBwZXJtaXNzaW9ucykge1xuICAgICAgICAgICAgdGhpcy5wdXNoLmFwcGx5KHRoaXMsIFtrLCBwZXJtaXNzaW9uc1trXV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIFBlcm1pc3Npb25UYWJsZS5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uIChjYikge1xuICAgICAgICAvLyBzYXZlIE9iamVjdCB0byBzZXJ2ZXJcbiAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICBwZXJtaXNzaW9uczogTGF6eSh0aGlzLnBlcm1pc3Npb25zKS5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW3hbMF0uaWQsIHhbMV1dXG4gICAgICAgICAgICB9KS50b09iamVjdCgpXG4gICAgICAgIH07XG4gICAgICAgIGRhdGEuaWQgPSB0aGlzLmlkO1xuICAgICAgICB2YXIgbW9kZWxOYW1lID0gdGhpcy5rbGFzcy5tb2RlbE5hbWU7XG4gICAgICAgIFcyUFJFU09VUkNFLiRwb3N0KHRoaXMua2xhc3MubW9kZWxOYW1lICsgJy9zZXRfcGVybWlzc2lvbnMnLCBkYXRhLCBmdW5jdGlvbiAobXlQZXJtcywgYSwgYiwgcmVxKSB7XG4gICAgICAgICAgICBjYihteVBlcm1zKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBQZXJtaXNzaW9uVGFibGUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoZ3JvdXBfaWQsIHBlcm1pc3Npb25MaXN0KSB7XG4gICAgICAgIHZhciBwID0gTGF6eShwZXJtaXNzaW9uTGlzdCk7XG4gICAgICAgIHZhciBwZXJtcyA9IExhenkodGhpcy5rbGFzcy5hbGxQZXJtaXNzaW9ucykubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICByZXR1cm4gW3gsIHAuY29udGFpbnMoeCldXG4gICAgICAgIH0pLnRvT2JqZWN0KCk7XG4gICAgICAgIHZhciBsID0gTGF6eSh0aGlzLnBlcm1pc3Npb25zKS5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgIHJldHVybiB4WzBdLmlkXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobC5jb250YWlucyhncm91cF9pZCkpXG4gICAgICAgICAgICB0aGlzLnBlcm1pc3Npb25zW2wuaW5kZXhPZihncm91cF9pZCldWzFdID0gcGVybXM7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRoaXMucGVybWlzc2lvbnMucHVzaChbSURCLmF1dGhfZ3JvdXAuZ2V0KGdyb3VwX2lkKSwgcGVybXNdKTtcbiAgICB9O1xuXG4gICAgLy8gY3JlYXRlcyBkeW5hbWljYWwgbW9kZWxzXG4gICAgdmFyIG1ha2VNb2RlbENsYXNzID0gZnVuY3Rpb24gKG1vZGVsKSB7XG4gICAgICAgIHZhciBfbW9kZWwgPSBtb2RlbDtcbiAgICAgICAgbW9kZWwuZmllbGRzLmlkLnJlYWRhYmxlID0gZmFsc2U7XG4gICAgICAgIG1vZGVsLmZpZWxkcy5pZC53cml0YWJsZSA9IGZhbHNlO1xuICAgICAgICB2YXIgZmllbGRzID0gTGF6eShtb2RlbC5maWVsZHMpO1xuICAgICAgICBpZiAobW9kZWwucHJpdmF0ZUFyZ3MpIHtcbiAgICAgICAgICAgIGZpZWxkcyA9IGZpZWxkcy5tZXJnZShtb2RlbC5wcml2YXRlQXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgVzJQUkVTT1VSQ0UuZW1pdCgnbW9kZWwtZGVmaW5pdGlvbicsIG1vZGVsLCBnZXRJbmRleChtb2RlbC5uYW1lKSk7XG4gICAgICAgIC8vIGdldHRpbmcgZmllbGRzIG9mIHR5cGUgZGF0ZSBhbmQgZGF0ZXRpbWVcbi8qXG4gICAgICAgIHZhciBEQVRFRklFTERTID0gZmllbGRzLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgcmV0dXJuICh4LnR5cGUgPT0gJ2RhdGUnKSB8fCAoeC50eXBlID09ICdkYXRldGltZScpXG4gICAgICAgIH0pLm1hcChmdW5jdGlvbiAoeCwgdikge1xuICAgICAgICAgICAgcmV0dXJuIFt2LCB0cnVlXVxuICAgICAgICB9KS50b09iamVjdCgpO1xuXG4gICAgICAgIC8vIGdldHRpbmcgYm9vbGVhbiBmaWVsZHNcbiAgICAgICAgdmFyIEJPT0xGSUVMRFMgPSBmaWVsZHMuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICByZXR1cm4gKHgudHlwZSA9PSAnYm9vbGVhbicpXG4gICAgICAgIH0pLm1hcChmdW5jdGlvbiAoeCwgdikge1xuICAgICAgICAgICAgcmV0dXJuIFt2LCB0cnVlXVxuICAgICAgICB9KS50b09iamVjdCgpO1xuXG4gICAgICAgIC8vIGJvb2xlYW5zIGFuZCBkYXRldGltZXMgc3RvcmFnZSBleHRlcm5hbCBcbiAgICAgICAgTU9ERUxfREFURUZJRUxEU1ttb2RlbC5uYW1lXSA9IERBVEVGSUVMRFM7XG4gICAgICAgIE1PREVMX0JPT0xGSUVMRFNbbW9kZWwubmFtZV0gPSBCT09MRklFTERTO1xuKi9cbiAgICAgICAgLy8gaW5pdGlhbGl6YXRpb25cbiAgICAgICAgdmFyIGZ1bmNTdHJpbmcgPSBcImlmICghcm93KSB7IHJvdyA9IHt9fTtcXG5cIjtcbiAgICAgICAgZnVuY1N0cmluZyArPSBtb2RlbC5yZWZlcmVuY2VzLm1hcChmdW5jdGlvbihmaWVsZCl7XG4gICAgICAgICAgICByZXR1cm4gJ3RoaXMuXycgKyBmaWVsZC5pZCArICcgPSByb3cuJyArIGZpZWxkLmlkICsgJzsnO1xuICAgICAgICB9KS5qb2luKCc7XFxuJyk7XG4gICAgICAgIFxuICAgICAgICAvLyBkYXRlZmllbGQgY29udmVyc2lvblxuICAgICAgICBmdW5jU3RyaW5nICs9IGZpZWxkcy5tYXAoZnVuY3Rpb24gKHgsaykge1xuICAgICAgICAgICAgaWYgKCh4LnR5cGUgPT0gJ2RhdGUnKSB8fCAoeC50eXBlID09ICdkYXRldGltZScpKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3RoaXMuJyArIGsgKyAnID0gcm93LicgKyBrICsgJz9uZXcgRGF0ZShyb3cuJyArIGsgKyAnICogMTAwMCAtICcgKyB1dGlscy50ek9mZnNldCArICcpOm51bGw7XFxuJzsgXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHgudHlwZSA9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3RoaXMuJyArIGsgKyAnID0gKHJvdy4nICsgayArICcgPT09IFwiVFwiKSB8fCAocm93LicgKyBrICsgJyA9PT0gdHJ1ZSk7XFxuJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICd0aGlzLicgKyBrICsgJyA9IHJvdy4nICsgayArICc7XFxuJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkudG9TdHJpbmcoJ1xcbicpOyArICdcXG4nO1xuXG4gICAgICAgIGZ1bmNTdHJpbmcgKz0gXCJpZiAocGVybWlzc2lvbnMpIHt0aGlzLl9wZXJtaXNzaW9ucyA9IHBlcm1pc3Npb25zICYmIExhenkocGVybWlzc2lvbnMpLm1hcChmdW5jdGlvbiAoeCkgeyByZXR1cm4gW3gsIHRydWVdIH0pLnRvT2JqZWN0KCk7fVwiXG5cbiAgICAgICAgXG4gICAgICAgIC8vIG1hc3RlciBjbGFzcyBmdW5jdGlvblxuICAgICAgICB2YXIgS2xhc3MgPSBuZXcgRnVuY3Rpb24oJ3JvdycsICdwZXJtaXNzaW9ucycsZnVuY1N0cmluZylcblxuICAgICAgICBLbGFzcy5wcm90b3R5cGUub3JtID0gZXh0T1JNO1xuICAgICAgICBLbGFzcy5yZWZfdHJhbnNsYXRpb25zID0ge307XG4gICAgICAgIEtsYXNzLm1vZGVsTmFtZSA9IG1vZGVsLm5hbWU7XG4gICAgICAgIEtsYXNzLnJlZmVyZW5jZXMgPSBMYXp5KG1vZGVsLnJlZmVyZW5jZXMpLnBsdWNrKCdpZCcpLnRvQXJyYXkoKTtcblxuICAgICAgICBLbGFzcy5pbnZlcnNlX3JlZmVyZW5jZXMgPSBtb2RlbC5yZWZlcmVuY2VkQnkubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAvLyBtYW5hZ2luZyByZWZlcmVuY2VzIHdoZXJlIFxuICAgICAgICAgICAgcmV0dXJuIHguYnkgKyAnXycgKyB4LmlkICsgJ19zZXQnXG4gICAgICAgIH0pO1xuICAgICAgICBLbGFzcy5yZWZlcmVudHMgPSBtb2RlbC5yZWZlcmVuY2VkQnkubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICByZXR1cm4gW3guYnksIHguaWRdXG4gICAgICAgIH0pO1xuICAgICAgICBLbGFzcy5maWVsZHNPcmRlciA9IG1vZGVsLmZpZWxkT3JkZXI7XG4gICAgICAgIEtsYXNzLmFsbFBlcm1pc3Npb25zID0gbW9kZWwucGVybWlzc2lvbnM7XG5cbiAgICAgICAgLy8gcmVkZWZpbmluZyB0b1N0cmluZyBtZXRob2RcbiAgICAgICAgaWYgKExhenkobW9kZWwucmVwcmVzZW50YXRpb24pLnNpemUoKSl7XG4gICAgICAgICAgICBLbGFzcy5wcm90b3R5cGUudG9TdHJpbmcgPSBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzLicgKyBMYXp5KG1vZGVsLnJlcHJlc2VudGF0aW9uKS50b1N0cmluZygnICsgXCIgXCIgKyB0aGlzLicpKTtcbiAgICAgICAgfVxuICAgICAgICBLbGFzcy5wcm90b3R5cGUudG9VcHBlckNhc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyByZWRlZmluZSB0byBVcHBlckNhc2VcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCkudG9VcHBlckNhc2UoKTtcbiAgICAgICAgfTtcbiAgICAgIFxuICAgICAgICBLbGFzcy5wcm90b3R5cGUudG9Mb3dlckNhc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICBLbGFzcy5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gZGVsZXRlIGluc3RhbmNlIGZyb20gc2VydmVyXG4gICAgICAgICAgICByZXR1cm4gZXh0T1JNLmRlbGV0ZSh0aGlzLmNvbnN0cnVjdG9yLm1vZGVsTmFtZSwgW3RoaXMuaWRdKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBwZXJtaXNzaW9uIGdldHRlciBwcm9wZXJ0eVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoS2xhc3MucHJvdG90eXBlLCAncGVybWlzc2lvbnMnLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcGVybWlzc2lvbnMpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wZXJtaXNzaW9ucztcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGlua2VyLnBlcm1pc3Npb25zW3RoaXMuY29uc3RydWN0b3IubW9kZWxOYW1lXS5hc2sodGhpcy5pZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gZ2V0dGluZyBmdWxsIHBlcm1pc3Npb24gdGFibGUgZm9yIGFuIG9iamVjdFxuICAgICAgICBLbGFzcy5wcm90b3R5cGUuYWxsX3Blcm1zID0gZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgICAgICB2YXIgb2JqZWN0X2lkID0gdGhpcy5pZDtcbiAgICAgICAgICAgIFcyUFJFU09VUkNFLiRwb3N0KHRoaXMuY29uc3RydWN0b3IubW9kZWxOYW1lICsgJy9hbGxfcGVybXMnLCB7aWQ6IHRoaXMuaWR9LCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciBwZXJtaXNzaW9ucyA9IGRhdGE7XG4gICAgICAgICAgICAgICAgdmFyIGdyb3VwZWQgPSB7fTtcbiAgICAgICAgICAgICAgICB2YXIgdW5rbm93bl9ncm91cHMgPSBMYXp5KHBlcm1pc3Npb25zKS5wbHVjaygnZ3JvdXBfaWQnKS51bmlxdWUoKS5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcnICsgeFxuICAgICAgICAgICAgICAgIH0pLmRpZmZlcmVuY2UoSURCLmF1dGhfZ3JvdXAua2V5cygpKS50b0FycmF5KCk7XG4gICAgICAgICAgICAgICAgTGF6eShwZXJtaXNzaW9ucykuZ3JvdXBCeShmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geC5ncm91cF9pZFxuICAgICAgICAgICAgICAgIH0pLmVhY2goZnVuY3Rpb24gKHYsIGspIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBlZFtrXSA9IExhenkodikucGx1Y2soJ25hbWUnKS50b0FycmF5KClcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB2YXIgY2FsbCA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIGNiKG5ldyBQZXJtaXNzaW9uVGFibGUob2JqZWN0X2lkLCBLbGFzcywgZ3JvdXBlZCkpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKHVua25vd25fZ3JvdXBzLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgVzJQUkVTT1VSQ0UuZ2V0KCdhdXRoX2dyb3VwJyx1bmtub3duX2dyb3VwcyxjYWxsKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGNhbGwoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIEtsYXNzLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgICAgIHZhciBvID0gdGhpcy5hc1JhdygpO1xuICAgICAgICAgICAgdmFyIGZpZWxkcyA9IEtsYXNzLmZpZWxkcztcbiAgICAgICAgICAgIHZhciBJRCA9IHRoaXMuaWQ7XG4gICAgICAgICAgICB2YXIgbW9kZWxOYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5tb2RlbE5hbWU7XG4gICAgICAgICAgICBpZiAoYXJncykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGFyZyBpbiBhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIG9bYXJnXSA9IGFyZ3NbYXJnXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlbGltaW5hdGUgdW53cml0YWJsZXNcbiAgICAgICAgICAgIExhenkoS2xhc3MuZmllbGRzT3JkZXIpLmZpbHRlcihmdW5jdGlvbih4KXtcbiAgICAgICAgICAgICAgICByZXR1cm4gIWZpZWxkc1t4XS53cml0YWJsZTtcbiAgICAgICAgICAgIH0pLmVhY2goZnVuY3Rpb24oZmllbGROYW1lKXtcbiAgICAgICAgICAgICAgICBpZiAoZmllbGROYW1lIGluIG8pIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9bZmllbGROYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChJRCkgeyBvLmlkID0gSUQ7IH1cbiAgICAgICAgICAgIHZhciBwcm9taXNlID0gVzJQUkVTT1VSQ0UuJHBvc3QobW9kZWxOYW1lICsgKElEID8gJy9wb3N0JyA6ICcvcHV0JyksIG8pO1xuICAgICAgICAgICAgaWYgKGFyZ3MgJiYgKGFyZ3MuY29uc3RydWN0b3IgPT09IEZ1bmN0aW9uKSl7XG4gICAgICAgICAgICAgICAgLy8gcGxhY2luZyBjYWxsYmFjayBpbiBhIGNvbW1vbiBwbGFjZVxuICAgICAgICAgICAgICAgIHByb21pc2UuY29udGV4dC5zYXZpbmdFcnJvckhhbmxkZXIgPSBhcmdzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHByb21pc2VcbiAgICAgICAgfTtcbiAgICAgICAgS2xhc3MucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5hc1JhdygpKTtcbiAgICAgICAgICAgIG9iai5fcGVybWlzc2lvbnMgPSB0aGlzLl9wZXJtaXNzaW9ucztcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gYnVpbGRpbmcgc2VyaWFsaXphdGlvbiBmdW5jdGlvblxuICAgICAgICB2YXIgYXNyID0gJ3JldHVybiB7XFxuJyArIExhenkobW9kZWwucmVmZXJlbmNlcykubWFwKGZ1bmN0aW9uKGZpZWxkKXtcbiAgICAgICAgICAgIHJldHVybiBmaWVsZC5pZCArICcgOiB0aGlzLl8nICsgZmllbGQuaWQ7XG4gICAgICAgIH0pLmNvbmNhdChmaWVsZHMubWFwKGZ1bmN0aW9uICh4LGspIHtcbiAgICAgICAgICAgIGlmICgoeC50eXBlID09ICdkYXRlJykgfHwgKHgudHlwZSA9PSAnZGF0ZXRpbWUnKSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGsgKyAnIDogKHRoaXMuJyArIGsgKyAnPyhNYXRoLnJvdW5kKHRoaXMuJyArIGsgKyAnLmdldFRpbWUoKSAtIHRoaXMuJyArIGsgKyAnLmdldFRpbWV6b25lT2Zmc2V0KCkgKiA2MDAwMCkgLyAxMDAwKTpudWxsKSc7IFxuICAgICAgICAgICAgfSBlbHNlIGlmICh4LnR5cGUgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGsgKyAnIDogdGhpcy4nICsgayArICc/XCJUXCI6XCJGXCInO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gayArICcgOiB0aGlzLicgKyBrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSkudG9TdHJpbmcoJyxcXG4nKSArICd9Oyc7XG4gICAgICAgIEtsYXNzLnByb3RvdHlwZS5hc1JhdyA9IG5ldyBGdW5jdGlvbihhc3IpO1xuXG4gICAgICAgIEtsYXNzLnNhdmVNdWx0aSA9IGZ1bmN0aW9uIChvYmplY3RzLCBjYiwgc2NvcGUpIHtcbiAgICAgICAgICAgIHZhciByYXcgPSBbXTtcbiAgICAgICAgICAgIHZhciBkZWxldGFibGUgPSBMYXp5KEtsYXNzLmZpZWxkcylcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAheC53cml0YWJsZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnBsdWNrKCdpZCcpXG4gICAgICAgICAgICAgICAgLnRvQXJyYXkoKTtcbiAgICAgICAgICAgIExhenkob2JqZWN0cylcbiAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB4LmFzUmF3KClcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIExhenkoZGVsZXRhYmxlKS5lYWNoKGZ1bmN0aW9uICh5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgeFt5XTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJhdy5wdXNoKHgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgVzJQUkVTT1VSQ0UuJHBvc3QoS2xhc3MubW9kZWxOYW1lLCAncHV0Jywge211bHRpcGxlOiByYXcsIGZvcm1JZHggOiBXMlBSRVNPVVJDRS5mb3JtSWR4Kyt9LCBmdW5jdGlvbiAoZWxlbXMpIHtcbiAgICAgICAgICAgICAgICBXMlBSRVNPVVJDRS5nb3REYXRhKGVsZW1zKTtcbiAgICAgICAgICAgICAgICB2YXIgdGFiID0gSURCW0tsYXNzLm1vZGVsTmFtZV07XG4gICAgICAgICAgICAgICAgdmFyIG9ianMgPSBMYXp5KGVsZW1zW0tsYXNzLm1vZGVsTmFtZV0ucmVzdWx0cykucGx1Y2soJ2lkJykubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0YWIuZ2V0KHgpXG4gICAgICAgICAgICAgICAgfSkudG9BcnJheSgpO1xuICAgICAgICAgICAgICAgIGlmIChjYikge1xuICAgICAgICAgICAgICAgICAgICBjYihvYmpzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBzY29wZSk7XG4gICAgICAgIH07XG4gICAgICAgIGlmICgnZXh0cmFfdmVyYnMnIGluIG1vZGVsKVxuICAgICAgICAgICAgTGF6eShtb2RlbC5leHRyYV92ZXJicykuZWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgIHZhciBmdW5jTmFtZSA9IHhbMF07XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSB4WzFdO1xuICAgICAgICAgICAgICAgIHZhciBkZGF0YSA9ICd2YXIgZGF0YSA9IHtpZCA6IHRoaXMuaWQnO1xuICAgICAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgZGRhdGEgKz0gJywgJyArIExhenkoYXJncykubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHggKyAnIDogJyArIHg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KS5qb2luKCcsJyk7XG4gICAgICAgICAgICAgICAgZGRhdGEgKz0gJ307XFxuJztcbiAgICAgICAgICAgICAgICBhcmdzID0gWydwb3N0JywnZ290RGF0YSddLmNvbmNhdChhcmdzKTtcbiAgICAgICAgICAgICAgICBhcmdzLnB1c2goJ2NiJyk7XG4gICAgICAgICAgICAgICAgdmFyIGNvZGUgPSBkZGF0YSArICcgcmV0dXJuIHBvc3QoXCInICsgS2xhc3MubW9kZWxOYW1lICsgJy8nICsgZnVuY05hbWUgKyAnXCIsIGRhdGEsY2IpOyc7XG4gICAgICAgICAgICAgICAgdmFyIGZ1bmMgPSBuZXcgRnVuY3Rpb24oYXJncywgY29kZSk7XG4gICAgICAgICAgICAgICAgS2xhc3MucHJvdG90eXBlW2Z1bmNOYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtXMlBSRVNPVVJDRS4kcG9zdCwgVzJQUkVTT1VSQ0UuZ290RGF0YV0uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywwKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIGlmICgncHJpdmF0ZUFyZ3MnIGluIG1vZGVsKSB7XG4gICAgICAgICAgICBLbGFzcy5wcml2YXRlQXJncyA9IExhenkobW9kZWwucHJpdmF0ZUFyZ3MpLmtleXMoKS5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW3gsIHRydWVdO1xuICAgICAgICAgICAgfSkudG9PYmplY3QoKTtcbiAgICAgICAgICAgIEtsYXNzLnByb3RvdHlwZS5zYXZlUEEgPSBmdW5jdGlvbiAobykge1xuICAgICAgICAgICAgICAgIHZhciBUID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgb28gPSB7aWQ6IHRoaXMuaWR9O1xuICAgICAgICAgICAgICAgIHZhciBQQSA9IHRoaXMuY29uc3RydWN0b3IucHJpdmF0ZUFyZ3M7XG4gICAgICAgICAgICAgICAgdmFyIEZzID0gdGhpcy5jb25zdHJ1Y3Rvci5maWVsZHM7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihvKS5hc1JhdygpO1xuICAgICAgICAgICAgICAgIHZhciBmaWVsZElkeCA9IExhenkoUEEpLmtleXMoKS5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt4LCBGc1t4XV1cbiAgICAgICAgICAgICAgICB9KS50b09iamVjdCgpO1xuICAgICAgICAgICAgICAgIExhenkobykuZWFjaChmdW5jdGlvbiAodiwgaykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKGsgaW4gUEEpICYmIGZpZWxkSWR4W2tdLndyaXRhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvb1trXSA9IHY7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBXMlBSRVNPVVJDRS4kcG9zdCh0aGlzLmNvbnN0cnVjdG9yLm1vZGVsTmFtZSArICcvc2F2ZVBBJywgb28sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgTGF6eShvbykuZWFjaChmdW5jdGlvbiAodiwgaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgVFtrXSA9IHY7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1vZGVsQ2FjaGVbS2xhc3MubW9kZWxOYW1lXSA9IEtsYXNzO1xuICAgICAgICAvLyBhZGRpbmcgaWQgdG8gZmllbGRzXG4gICAgICAgIGZvciAodmFyIGYgaW4gbW9kZWwuZmllbGRzKSB7XG4gICAgICAgICAgICBtb2RlbC5maWVsZHNbZl0uaWQgPSBmO1xuICAgICAgICB9XG4gICAgICAgIEtsYXNzLmZpZWxkcyA9IExhenkobW9kZWwuZmllbGRzKS5jb25jYXQoTGF6eShtb2RlbC5wcml2YXRlQXJncykpLmNvbmNhdChMYXp5KG1vZGVsLnJlZmVyZW5jZXMpLnRhcChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgeC50eXBlID0geC50eXBlIHx8ICdyZWZlcmVuY2UnXG4gICAgICAgIH0pKS5pbmRleEJ5KCdpZCcpLnRvT2JqZWN0KCk7XG4gICAgICAgIC8vIHNldHRpbmcgd2lkZ2V0cyBmb3IgZmllbGRzXG4gICAgICAgIExhenkoS2xhc3MuZmllbGRzKS5lYWNoKGZ1bmN0aW9uKGZpZWxkKXtcbiAgICAgICAgICAgIGlmICghZmllbGQud2lkZ2V0KXtcbiAgICAgICAgICAgICAgICBpZiAoZmllbGQudHlwZSA9PT0gJ3JlZmVyZW5jZScpe1xuICAgICAgICAgICAgICAgICAgICBmaWVsZC53aWRnZXQgPSAnY2hvaWNlcydcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmaWVsZC53aWRnZXQgPSBmaWVsZC50eXBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGJ1aWxkaW5nIHJlZmVyZW5jZXMgdG8gKG1hbnkgdG8gb25lKSBmaWVsZHNcbiAgICAgICAgTGF6eShtb2RlbC5yZWZlcmVuY2VzKS5lYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgIHZhciBleHRfcmVmID0gcmVmLnRvO1xuICAgICAgICAgICAgdmFyIGxvY2FsX3JlZiA9ICdfJyArIHJlZi5pZDtcbiAgICAgICAgICAgIGNhY2hlZFByb3BlcnR5QnlFdmVudHMoS2xhc3MucHJvdG90eXBlLCByZWYuaWQsZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpc1tsb2NhbF9yZWZdKSB7IHJldHVybiB1dGlscy5tb2NrIH07XG4gICAgICAgICAgICAgICAgaWYgKCEoZXh0X3JlZiBpbiBJREIpKXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRocyA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIFcyUFJFU09VUkNFLmRlc2NyaWJlKGV4dF9yZWYsZnVuY3Rpb24oeCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5rZXIubWFpbkluZGV4W2V4dF9yZWZdLmFzayh0aHNbbG9jYWxfcmVmXSx0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSAoZXh0X3JlZiBpbiBJREIpICYmIHRoaXNbbG9jYWxfcmVmXSAmJiBJREJbZXh0X3JlZl0uZ2V0KHRoaXNbbG9jYWxfcmVmXSk7XG4gICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQgJiYgKGV4dF9yZWYgaW4gbGlua2VyLm1haW5JbmRleCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYXNraW5nIHRvIGxpbmtlclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXNbbG9jYWxfcmVmXSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmtlci5tYWluSW5kZXhbZXh0X3JlZl0uYXNrKHRoaXNbbG9jYWxfcmVmXSx0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignbnVsbCByZWZlcmVuY2UgZm9yICcgKyBsb2NhbF9yZWYgKyAnKCcgKyB0aGlzLmlkICsgJykgcmVzb3VyY2UgJyArIEtsYXNzLm1vZGVsTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHV0aWxzLm1vY2s7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh2YWx1ZS5jb25zdHJ1Y3RvciAhPT0gdXRpbHMubW9jaykgJiYgKHZhbHVlLmNvbnN0cnVjdG9yLm1vZGVsTmFtZSAhPT0gZXh0X3JlZikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1lvdSBjYW4gYXNzaWduIG9ubHkgJyArIGV4dF9yZWYgKyAnIHRvICcgKyByZWYuaWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbbG9jYWxfcmVmXSA9IHZhbHVlLmlkO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbbG9jYWxfcmVmXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgJ25ldy0nICsgZXh0X3JlZiwgJ2RlbGV0ZWQtJyArIGV4dF9yZWYsJ3VwZGF0ZWQtJyArIGV4dF9yZWYsICduZXctbW9kZWwtJyArIGV4dF9yZWYvKiwgJ3VwZGF0ZWQtJyArIEtsYXNzLm1vZGVsTmFtZSovKTtcblxuXG4gICAgICAgICAgICBLbGFzcy5wcm90b3R5cGVbJ2dldCcgKyB1dGlscy5jYXBpdGFsaXplKHJlZi5pZCldID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBleHRPUk0uZ2V0KGV4dF9yZWYsdGhpc1tsb2NhbF9yZWZdKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vYnVpbGRpbmcgcmVmZXJlbmNlcyB0byAob25lIHRvIG1hbnkpIGZpZWxkc1xuICAgICAgICBMYXp5KG1vZGVsLnJlZmVyZW5jZWRCeSkuZWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXhOYW1lID0gcmVmLmJ5ICsgJy4nICsgcmVmLmlkO1xuICAgICAgICAgICAgdmFyIHByb3BlcnR5TmFtZSA9IHJlZi5ieSArICdfJyArIHV0aWxzLnBsdXJhbGl6ZShyZWYuaWQpO1xuICAgICAgICAgICAgdmFyIHJldkluZGV4ID0gcmVmLmJ5O1xuICAgICAgICAgICAgaWYgKEtsYXNzLnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignVHJ5ZWQgdG8gcmVkZWZpbmUgcHJvcGVydHkgJyArIHByb3BlcnR5TmFtZSArICdzJyArICcgZm9yICcgKyBLbGFzcy5tb2RlbE5hbWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYWNoZWRQcm9wZXJ0eUJ5RXZlbnRzKEtsYXNzLnByb3RvdHlwZSwgcHJvcGVydHlOYW1lLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXQgPSAocmV2SW5kZXggaW4gSURCKSA/IFJFVklEWFtpbmRleE5hbWVdLmdldCh0aGlzLmlkICsgJycpOm51bGw7XG4gICAgICAgICAgICAgICAgICAgIGxpbmtlci5mb3JlaWduS2V5c1tpbmRleE5hbWVdLmFzayh0aGlzLmlkLHRydWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgICAgIH0sIG51bGwsICduZXctJyArIHJldkluZGV4LCAndXBkYXRlZC0nICsgcmV2SW5kZXgsICdkZWxldGVkLScgKyByZXZJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBLbGFzcy5wcm90b3R5cGVbJ2dldCcgKyB1dGlscy5jYXBpdGFsaXplKHV0aWxzLnBsdXJhbGl6ZShyZWYuYnkpKV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9wdHMgPSB7fTtcbiAgICAgICAgICAgICAgICBvcHRzW3JlZi5pZF0gPSBbdGhpcy5pZF07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV4dE9STS5nZXQocmVmLmJ5LG9wdHMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy9idWlsZGluZyByZWZlcmVuY2UgdG8gKG1hbnkgdG8gbWFueSkgZmllbGRzXG4gICAgICAgIGlmIChtb2RlbC5tYW55VG9NYW55KSB7XG4gICAgICAgICAgICBMYXp5KG1vZGVsLm1hbnlUb01hbnkpLmVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBpbmRleE5hbWUgPSByZWYuaW5kZXhOYW1lO1xuICAgICAgICAgICAgICAgIHZhciBmaXJzdCA9IHJlZi5maXJzdD8gMCA6IDE7XG4gICAgICAgICAgICAgICAgdmFyIG9tb2RlbE5hbWUgPSByZWYubW9kZWw7XG4vLyAgICAgICAgICAgICAgICB2YXIgb21vZGVsID0gZ2V0SW5kZXgob21vZGVsTmFtZSk7XG4gICAgICAgICAgICAgICAgdmFyIGdldHRlciA9IGxpbmtlci5tMm1JbmRleFtpbmRleE5hbWVdWydnZXQnICsgKDEgLSBmaXJzdCldO1xuXG4gICAgICAgICAgICAgICAgY2FjaGVkUHJvcGVydHlCeUV2ZW50cyhLbGFzcy5wcm90b3R5cGUsIHJlZi5tb2RlbCArICdzJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRocyA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmV0ID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWRzID0gZ2V0dGVyKHRocy5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ2V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpZHMubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1cyUFJFU09VUkNFLmZldGNoKG9tb2RlbE5hbWUsIHtpZCA6IGlkc30pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldCA9IGdldEluZGV4KG9tb2RlbE5hbWUpLmdldC5iaW5kKElEQltvbW9kZWxOYW1lXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpZHMgJiYgZ2V0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldCA9IExhenkoaWRzKS5tYXAoZ2V0KS5maWx0ZXIodXRpbHMuYm9vbCkudG9BcnJheSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgICAgICAgICAgfSwgbnVsbCwgJ3JlY2VpdmVkLW0ybS0nICsgaW5kZXhOYW1lLCAncmVjZWl2ZWQtJyArIG9tb2RlbE5hbWUpO1xuXG4gICAgICAgICAgICAgICAgS2xhc3MucHJvdG90eXBlWydnZXQnICsgdXRpbHMuY2FwaXRhbGl6ZSh1dGlscy5wbHVyYWxpemUob21vZGVsTmFtZSkpXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRocyA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihhY2NlcHQsIHJlamVjdCl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmtlci5nZXRNMk0oaW5kZXhOYW1lLCBbdGhzLmlkXSwgZmlyc3QsZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpZHMgPSBnZXR0ZXIodGhzLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlkcy5sZW5ndGgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVzJQUkVTT1VSQ0UuZmV0Y2gob21vZGVsTmFtZSwge2lkIDogaWRzfSxudWxsLGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdldCA9IElEQltvbW9kZWxOYW1lXS5nZXQuYmluZChJREJbb21vZGVsTmFtZV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2VwdChMYXp5KGlkcykubWFwKGdldCkuZmlsdGVyKHV0aWxzLmJvb2wpLnRvQXJyYXkoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2VwdChbXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9O1xuXG5cbiAgICAgICAgICAgICAgICBLbGFzcy5maWVsZHNbdXRpbHMuY2FwaXRhbGl6ZShvbW9kZWxOYW1lKV0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiB1dGlscy5jYXBpdGFsaXplKG9tb2RlbE5hbWUpLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiB1dGlscy5jYXBpdGFsaXplKG9tb2RlbE5hbWUpLFxuICAgICAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcmVhZGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdNMk0nLFxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3JzOiBbXVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBLbGFzcy5wcm90b3R5cGUudW5saW5rUmVmZXJlbmNlID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIG11bHRpcGxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIElEID0gdGhpcy5pZDtcbiAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2VzID0gW107XG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLmNvbnN0cnVjdG9yLm5hbWUgPT0gJ0FycmF5Jykge1xuICAgICAgICAgICAgICAgICAgICBtdWx0aXBsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlcyA9IGluc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZSA9IGluc3RhbmNlc1swXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIG9tb2RlbCA9IGluc3RhbmNlLmNvbnN0cnVjdG9yLm1vZGVsTmFtZTtcbiAgICAgICAgICAgICAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbGxlY3Rpb24gPSBMYXp5KGluc3RhbmNlcykucGx1Y2soJ2lkJykubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW0lELCB4XVxuICAgICAgICAgICAgICAgICAgICB9KS50b0FycmF5KCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbGxlY3Rpb24gPSBbW0lELCBpbnN0YW5jZS5pZF1dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBXMlBSRVNPVVJDRS4kcG9zdChLbGFzcy5tb2RlbE5hbWUgKyAnLycgKyBvbW9kZWwgKyAncy9kZWxldGUnLCB7Y29sbGVjdGlvbjogY29sbGVjdGlvbn0pO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgS2xhc3MucHJvdG90eXBlLmxpbmtSZWZlcmVuY2UgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgbXVsdGlwbGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgSUQgPSB0aGlzLmlkO1xuICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UuY29uc3RydWN0b3IubmFtZSA9PSAnQXJyYXknKSB7XG4gICAgICAgICAgICAgICAgICAgIG11bHRpcGxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VzID0gaW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlID0gaW5zdGFuY2VzWzBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgb21vZGVsID0gaW5zdGFuY2UuY29uc3RydWN0b3IubW9kZWxOYW1lO1xuICAgICAgICAgICAgICAgIHZhciBpbmRleE5hbWUgPSBLbGFzcy5tb2RlbE5hbWUgKyAnLycgKyBvbW9kZWw7XG4gICAgICAgICAgICAgICAgaWYgKG11bHRpcGxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZWZzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleE5hbWUgaW4gSU5ERVhfTTJNKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWZzID0gTGF6eShpbnN0YW5jZXMpLnBsdWNrKCdpZCcpLmRpZmZlcmVuY2UoTGF6eShJTkRFWF9NMk1baW5kZXhOYW1lXVswXS5nZXQodGhpcy5pZCkpKS50b0FycmF5KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaW5kZXhOYW1lID0gb21vZGVsICsgJy8nICsgS2xhc3MubW9kZWxOYW1lO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXhOYW1lIGluIElOREVYX00yTSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcyA9IExhenkoaW5zdGFuY2VzKS5wbHVjaygnaWQnKS5kaWZmZXJlbmNlKExhenkoSU5ERVhfTTJNW2luZGV4TmFtZV1bMF0uZ2V0KHRoaXMuaWQpKSkudG9BcnJheSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWZzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbGxlY3Rpb24gPSBMYXp5KHJlZnMpLm1hcChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbSUQsIHhdXG4gICAgICAgICAgICAgICAgICAgICAgICB9KS50b0FycmF5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBXMlBfUE9TVChLbGFzcy5tb2RlbE5hbWUsIG9tb2RlbCArICdzL3B1dCcsIHtjb2xsZWN0aW9uOiBjb2xsZWN0aW9ufSwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChpbmRleE5hbWUgaW4gbGlua2VyLm0ybUluZGV4KSAmJiBMYXp5KGxpbmtlci5tMm1JbmRleFtpbmRleE5hbWVdWydnZXQnICsgdXRpbHMuY2FwaXRhbGl6ZShvbW9kZWwpXShpbnN0YW5jZS5pZCkpLmZpbmQodGhpcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBXMlBSRVNPVVJDRS4kcG9zdChLbGFzcy5tb2RlbE5hbWUgKyAnLycgKyBvbW9kZWwgKyAncy9wdXQnLCB7Y29sbGVjdGlvbjogW1t0aGlzLmlkLCBpbnN0YW5jZS5pZF1dfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBXMlBSRVNPVVJDRS5lbWl0KCduZXctbW9kZWwnLCBLbGFzcyk7XG4gICAgICAgIFcyUFJFU09VUkNFLmVtaXQoJ25ldy1tb2RlbC0nICsgS2xhc3MubW9kZWxOYW1lKTtcbiAgICAgICAgcmV0dXJuIEtsYXNzO1xuICAgIH07XG5cbiAgICB0aGlzLmdvdERhdGEgPSBmdW5jdGlvbiAoZGF0YSwgY2FsbEJhY2spIHtcbiAgICAgICAgLy8gcmVjZWl2ZSBhbGwgZGF0YSBmcm9tIGV2ZXJ5IGVuZCBwb2ludFxuICAgICAgICBjb25zb2xlLmluZm8oJ2dvdERhdGEnKTtcbiAgICAgICAgaWYgKHR5cGVvZihkYXRhKSA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2RhdGEgJyArIGRhdGEgKyAnIHJlZnVzZWQgZnJvbSBnb3REYXRhKCknKTtcbiAgICAgICAgICAgIGlmIChjYWxsQmFjaykge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsQmFjayhkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBjbGVhbiBkYXRhIGZyb20gcmVsYXRpb25zIGFuZCBwZXJtaXNzaW9ucyBmb3IgdXNpbmcgaXQgYWZ0ZXIgbW9kZWwgcGFyc2luZ1xuICAgICAgICBpZiAoJ19leHRyYScgaW4gZGF0YSl7IGRlbGV0ZSBkYXRhLl9leHRyYSB9XG4gICAgICAgIHZhciBUT09ORSA9IGRhdGEuVE9PTkU7XG4gICAgICAgIHZhciBUT01BTlkgPSBkYXRhLlRPTUFOWTtcbiAgICAgICAgdmFyIE1BTllUT01BTlkgPSBkYXRhLk1BTllUT01BTlk7XG4gICAgICAgIHZhciBQRVJNSVNTSU9OUyA9IGRhdGEuUEVSTUlTU0lPTlM7XG4gICAgICAgIHZhciBQQSA9IGRhdGEuUEE7XG4gICAgICAgIGRlbGV0ZSBkYXRhLlRPT05FO1xuICAgICAgICBkZWxldGUgZGF0YS5UT01BTlk7XG4gICAgICAgIGRlbGV0ZSBkYXRhLk1BTllUT01BTlk7XG4gICAgICAgIGRlbGV0ZSBkYXRhLlBFUk1JU1NJT05TO1xuICAgICAgICBkZWxldGUgZGF0YS5QQTtcbiAgICAgICAgaWYgKCFQQSkgeyBQQSA9IHt9OyB9XG5cbiAgICAgICAgLy8gY2xlYW5pbmcgZnJvbSB1c2VsZXNzIGRlbGV0ZWQgZGF0YVxuICAgICAgICBkYXRhID0gTGF6eShkYXRhKS5maWx0ZXIoZnVuY3Rpb24gKHYsIGspIHtcbiAgICAgICAgICAgIHJldHVybiAoISgnZGVsZXRlZCcgaW4gdikgfHwgKChrIGluIG1vZGVsQ2FjaGUpKSk7XG4gICAgICAgIH0pLnRvT2JqZWN0KCk7XG4gICAgICAgIFxuICAgICAgICBpZiAoJ20ybScgaW4gZGF0YSkge1xuICAgICAgICAgICAgdmFyIG0ybSA9IGRhdGEubTJtO1xuICAgICAgICAgICAgZGVsZXRlIGRhdGFbJ20ybSddO1xuICAgICAgICB9XG4gICAgICAgIExhenkoZGF0YSkuZWFjaChmdW5jdGlvbiAoZGF0YSwgbW9kZWxOYW1lKSB7XG4gICAgICAgICAgICBXMlBSRVNPVVJDRS5kZXNjcmliZShtb2RlbE5hbWUsIGZ1bmN0aW9uIChtb2RlbCkge1xuICAgICAgICAgICAgICAgIHZhciBtb2RlbENsYXNzID0gbW9kZWw7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEucmVzdWx0cyAmJiAoZGF0YS5yZXN1bHRzLmxlbmd0aCA+IDApICYmIChkYXRhLnJlc3VsdHNbMF0uY29uc3RydWN0b3IgPT0gQXJyYXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEucmVzdWx0cyA9IExhenkoZGF0YS5yZXN1bHRzKS5tYXAoZnVuY3Rpb24oeCl7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTGF6eShtb2RlbENsYXNzLmZpZWxkc09yZGVyKS56aXAoeCkudG9PYmplY3QoKVxuICAgICAgICAgICAgICAgICAgICB9KS50b0FycmF5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciByZXN1bHRzID0gTGF6eShkYXRhLnJlc3VsdHMpO1xuICAgICAgICAgICAgICAgIHZhciBkZWxldGVkID0gZGF0YS5kZWxldGVkO1xuICAgICAgICAgICAgICAgIGlmIChtb2RlbE5hbWUgaW4gUEEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIE1QQSA9IFBBW21vZGVsTmFtZV07XG4gICAgICAgICAgICAgICAgICAgIExhenkocmVzdWx0cykuZWFjaChmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVjb3JkLmlkIGluIE1QQSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExhenkoTVBBW3JlY29yZC5pZF0pLmVhY2goZnVuY3Rpb24gKHYsIGspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjb3JkW2tdID0gdjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBpbmRleGluZyByZWZlcmVuY2VzIGJ5IGl0cyBJRFxuICAgICAgICAgICAgICAgIHZhciBpdGFiID0gZ2V0SW5kZXgobW9kZWxOYW1lKTtcbiAgICAgICAgICAgICAgICB2YXIgdGFibGUgPSBpdGFiLnNvdXJjZTtcblxuICAgICAgICAgICAgICAgIC8vIG9iamVjdCBkZWxldGlvblxuICAgICAgICAgICAgICAgIGlmIChkZWxldGVkKXtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlZC5mb3JFYWNoKGZ1bmN0aW9uKHgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRhYmxlW3hdO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbi8qXG4gICAgICAgICAgICAgICAgTGF6eShkZWxldGVkKS5lYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0YWJsZVt4XTtcbiAgICAgICAgICAgICAgICB9KTtcbiovXG4gICAgICAgICAgICAgICAgdmFyIGlkeCA9IHJlc3VsdHMuaW5kZXhCeSgnaWQnKS50b09iamVjdCgpO1xuICAgICAgICAgICAgICAgIHZhciBpayA9IExhenkoaWR4KS5rZXlzKCk7XG4gICAgICAgICAgICAgICAgdmFyIG5uZXcgPSBpay5kaWZmZXJlbmNlKGl0YWIua2V5cygpLm1hcChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoeClcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgdmFyIHVwZGF0ZWQgPSBpay5kaWZmZXJlbmNlKG5uZXcpO1xuICAgICAgICAgICAgICAgIC8vIHJlbW92aW5nIG9sZCBpZGVudGljYWwgdmFsdWVzXG4gICAgICAgICAgICAgICAgdXBkYXRlZCA9IHVwZGF0ZWQuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhdXRpbHMuc2FtZUFzKGlkeFt4XSwgdGFibGVbeF0uYXNSYXcoKSk7XG4gICAgICAgICAgICAgICAgfSkudG9BcnJheSgpO1xuICAgICAgICAgICAgICAgIC8vIGNsYXNzaWZ5IHJlY29yZHNcbiAgICAgICAgICAgICAgICB2YXIgcGVybXMgPSBkYXRhLnBlcm1pc3Npb25zID8gTGF6eShkYXRhLnBlcm1pc3Npb25zKSA6IExhenkoe30pO1xuICAgICAgICAgICAgICAgIHZhciBuZXdPYmplY3RzID0gbm5ldy5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBtb2RlbENsYXNzKGlkeFt4XSwgcGVybXMuZ2V0KHgpKVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8vLyBjbGFzc2lmeWluZyB1cGRhdGVkXG4gICAgICAgICAgICAgICAgLy92YXIgdXBkYXRlZE9iamVjdHMgPSB1cGRhdGVkLm1hcChmdW5jdGlvbih4KXtyZXR1cm4gbmV3IG1vZGVsQ2xhc3MoaWR4LmdldCh4KSxwZXJtcy5nZXQoeCkpfSk7XG4gICAgICAgICAgICAgICAgLy92YXIgdW8gPSB1cGRhdGVkT2JqZWN0cy50b0FycmF5KCk7XG4gICAgICAgICAgICAgICAgLy91cGRhdGVkT2JqZWN0cyA9IExhenkodW8pLm1hcChmdW5jdGlvbih4KXtyZXR1cm4gW3gsdGFibGVbeC5pZF1dfSkudG9BcnJheSgpO1xuICAgICAgICAgICAgICAgIC8vIFVwZGF0aW5nIHNpbmdsZSBvYmplY3RzXG4gICAgICAgICAgICAgICAgdmFyIGNoYW5nZWQgPSBbXTtcbi8vICAgICAgICAgICAgICAgIHZhciBEQVRFRklFTERTID0gTU9ERUxfREFURUZJRUxEU1ttb2RlbE5hbWVdO1xuLy8gICAgICAgICAgICAgICAgdmFyIEJPT0xGSUVMRFMgPSBNT0RFTF9CT09MRklFTERTW21vZGVsTmFtZV07XG4gICAgICAgICAgICAgICAgdmFyIG1vZGVsUmVmZXJlbmNlcyA9IExhenkobW9kZWwucmVmZXJlbmNlcykubWFwKGZ1bmN0aW9uKGspIHsgcmV0dXJuIFtrLDFdfSkudG9PYmplY3QoKTtcbiAgICAgICAgICAgICAgICB1cGRhdGVkLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9sZEl0ZW0gPSB0YWJsZVt4XTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9sZENvcHkgPSBvbGRJdGVtLmNvcHkoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0l0ZW0gPSBpZHguZ2V0KHgpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRpbmcgZWFjaCBhdHRyaWJ1dGUgc2luZ3VsYXJseVxuXG4gICAgICAgICAgICAgICAgICAgIExhenkobW9kZWwuZmllbGRzKS5lYWNoKGZ1bmN0aW9uKGZpZWxkLCBmaWVsZE5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChmaWVsZC50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncmVmZXJlbmNlJyA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkSXRlbVsnXycgKyBmaWVsZE5hbWVdID0gbmV3SXRlbVtmaWVsZE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOYU4gaXMgY29udm50aW9uYWxseSBhIGNhY2hlIGRlbGV0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkSXRlbVtmaWVsZE5hbWVdID0gTmFOO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZGF0ZSc6IHtvbGRJdGVtW2ZpZWxkTmFtZV0gPSBuZXcgRGF0ZShuZXdJdGVtW2ZpZWxkTmFtZV0gKiAxMDAwKTsgYnJlYWt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RhdGV0aW1lJzoge29sZEl0ZW1bZmllbGROYW1lXSA9IG5ldyBEYXRlKG5ld0l0ZW1bZmllbGROYW1lXSAqIDEwMDApOyBicmVha307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9vbGVhbicgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobmV3SXRlbVtmaWVsZE5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIG51bGwgOiB7IG9sZEl0ZW1bZmllbGROYW1lXSA9IG51bGw7IGJyZWFrOyB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnVCcgOiB7IG9sZEl0ZW1bZmllbGROYW1lXSA9IHRydWU7IGJyZWFrOyB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnRicgOiB7IG9sZEl0ZW1bZmllbGROYW1lXSA9IGZhbHNlOyBicmVhazsgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgdHJ1ZSA6IHsgb2xkSXRlbVtmaWVsZE5hbWVdID0gdHJ1ZTsgYnJlYWs7IH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGZhbHNlIDogeyBvbGRJdGVtW2ZpZWxkTmFtZV0gPSBmYWxzZTsgYnJlYWs7IH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiB7b2xkSXRlbVtmaWVsZE5hbWVdID0gbmV3SXRlbVtmaWVsZE5hbWVdfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICAgICBvbGRJdGVtW2ZpZWxkTmFtZV0gPSBuZXdJdGVtW2ZpZWxkTmFtZV07XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkLnB1c2goW25ld0l0ZW0sIG9sZENvcHldKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vLy8gc2VuZGluZyBzaWduYWwgZm9yIHVwZGF0ZWQgdmFsdWVzXG4gICAgICAgICAgICAgICAgaWYgKGNoYW5nZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIFcyUFJFU09VUkNFLmVtaXQoJ3VwZGF0ZWQtJyArIG1vZGVsTmFtZSwgY2hhbmdlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vKioqKioqKiogVXBkYXRlIHVuaXZlcnNlICoqKioqKioqXG4gICAgICAgICAgICAgICAgdmFyIG5vID0gbmV3T2JqZWN0cy50b0FycmF5KCk7XG4gICAgICAgICAgICAgICAgTGF6eShubykuZWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICB0YWJsZVt4LmlkXSA9IHhcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvLyByZWJ1bGRpbmcgcmV2ZXJzZSBpbmRleGVzXG4gICAgICAgICAgICAgICAgTGF6eShtb2RlbENhY2hlW21vZGVsTmFtZV0ucmVmZXJlbmNlcykuZWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIFJFVklEWFttb2RlbE5hbWUgKyAnLicgKyByZWZdID0gSURCW21vZGVsTmFtZV0uZ3JvdXBCeSgnXycgKyByZWYpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIHNlbmRpbmcgZXZlbnRzIGZvciBuZXcgdmFsdWVzXG4gICAgICAgICAgICAgICAgaWYgKG5vLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgVzJQUkVTT1VSQ0UuZW1pdCgnbmV3LScgKyBtb2RlbE5hbWUsIExhenkobm8pLCBkYXRhLnRvdGFsUmVzdWx0cyk7XG4gICAgICAgICAgICAgICAgaWYgKGRlbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgVzJQUkVTT1VSQ0UuZW1pdCgnZGVsZXRlZC0nICsgbW9kZWxOYW1lLCBkZWxldGVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gc2VuZGluZyBldmVudHMgZm9yIGRhdGEgYXJyaXZlZFxuICAgICAgICAgICAgICAgIFcyUFJFU09VUkNFLmVtaXQoJ3JlY2VpdmVkLScgKyBtb2RlbE5hbWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4vKiAgICAgICAgXG4gICAgICAgIGlmIChUT09ORSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignVE9PTkUnKTtcbiAgICAgICAgICAgIExhenkoVE9PTkUpLmVhY2goZnVuY3Rpb24gKHZhbHMsIG1vZGVsTmFtZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG1vZGVsTmFtZSk7XG4gICAgICAgICAgICAgICAgdmFyIHVkeCA9IGdldFVubGlua2VkKG1vZGVsTmFtZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVE9NQU5ZKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdUT01BTlknKTtcbiAgICAgICAgICAgIExhenkoVE9NQU5ZKS5lYWNoKGZ1bmN0aW9uICh2YWxzLCBpbmRleE5hbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShpbmRleE5hbWUgaW4gQVNLRURfVU5MSU5LRUQpKSB7XG4gICAgICAgICAgICAgICAgICAgIEFTS0VEX1VOTElOS0VEW2luZGV4TmFtZV0gPSBMYXp5KFtdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgTGF6eSh2YWxzKS5lYWNoKGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgICAgICAgICBBU0tFRF9VTkxJTktFRFtpbmRleE5hbWVdLnNvdXJjZS5wdXNoKGlkKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChNQU5ZVE9NQU5ZKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdNQU5ZVE9NQU5ZJyk7XG4gICAgICAgICAgICBMYXp5KE1BTllUT01BTlkpLmVhY2goZnVuY3Rpb24gKHZhbHMsIGluZGV4TmFtZSkge1xuICAgICAgICAgICAgICAgIHZhciBmaXJzdCA9IHBhcnNlSW50KGluZGV4TmFtZS5zcGxpdCgnfCcpWzFdKTtcbiAgICAgICAgICAgICAgICBpbmRleE5hbWUgPSBpbmRleE5hbWUuc3BsaXQoJ3wnKVswXTtcbiAgICAgICAgICAgICAgICBpZiAoIShpbmRleE5hbWUgaW4gQVNLRURfTTJNKSkge1xuICAgICAgICAgICAgICAgICAgICBBU0tFRF9NMk1baW5kZXhOYW1lXSA9IFt7fSwge31dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgTUlEWCA9IEFTS0VEX00yTVtpbmRleE5hbWVdW2ZpcnN0XTtcbiAgICAgICAgICAgICAgICBMYXp5KHZhbHMpLmVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgTUlEWFt4ICsgJyddID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgTUlEWFt4XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgXG4qL1xuICAgICAgICBpZiAobTJtKSB7XG4gICAgICAgICAgICBXMlBSRVNPVVJDRS5nb3RNMk0obTJtKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoUEVSTUlTU0lPTlMpIHtcbiAgICAgICAgICAgIFcyUFJFU09VUkNFLmdvdFBlcm1pc3Npb25zKFBFUk1JU1NJT05TKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjYWxsQmFjaykge1xuICAgICAgICAgICAgY2FsbEJhY2soZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgVzJQUkVTT1VSQ0UuZW1pdCgnZ290LWRhdGEnKTtcbiAgICB9O1xuICAgIHRoaXMuZ290UGVybWlzc2lvbnMgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBMYXp5KGRhdGEpLmVhY2goZnVuY3Rpb24gKHYsIHJlc291cmNlTmFtZSkge1xuICAgICAgICAgICAgTGF6eSh2WzBdKS5lYWNoKGZ1bmN0aW9uIChyb3csIGlkKSB7XG4gICAgICAgICAgICAgICAgaWYgKChyZXNvdXJjZU5hbWUgaW4gSURCKSAmJiAoaWQgaW4gSURCW3Jlc291cmNlTmFtZV0uc291cmNlKSl7XG4gICAgICAgICAgICAgICAgICAgIElEQltyZXNvdXJjZU5hbWVdLmdldChpZCkuX3Blcm1pc3Npb25zID0gTGF6eShyb3cpLm1hcChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt4LCB0cnVlXVxuICAgICAgICAgICAgICAgICAgICB9KS50b09iamVjdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKExhenkodlswXSkuc2l6ZSgpKXtcbiAgICAgICAgICAgICAgICBXMlBSRVNPVVJDRS5lbWl0KCd1cGRhdGUtcGVybWlzc2lvbnMtJyArIHJlc291cmNlTmFtZSwgTGF6eSh2WzBdKS5rZXlzKCkudG9BcnJheSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZW1pdCgndXBkYXRlLXBlcm1pc3Npb25zJyk7XG4gICAgfTtcblxuXG4gICAgdGhpcy5nb3RNMk0gPSBmdW5jdGlvbihtMm0pe1xuICAgICAgICBMYXp5KG0ybSkuZWFjaChmdW5jdGlvbihkYXRhLCBpbmRleE5hbWUpe1xuICAgICAgICAgICAgdmFyIG0ybUluZGV4ID0gbGlua2VyLm0ybUluZGV4W2luZGV4TmFtZV07XG4gICAgICAgICAgICBMYXp5KGRhdGEpLmVhY2goZnVuY3Rpb24obSl7XG4gICAgICAgICAgICAgICAgTGF6eShtKS5lYWNoKGZ1bmN0aW9uKGRhdGEsdmVyYil7XG4gICAgICAgICAgICAgICAgICAgIG0ybUluZGV4W3ZlcmJdKGRhdGEpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBXMlBSRVNPVVJDRS5lbWl0KCdyZWNlaXZlZC1tMm0nKTtcbiAgICAgICAgICAgIFcyUFJFU09VUkNFLmVtaXQoJ3JlY2VpdmVkLW0ybS0nICsgaW5kZXhOYW1lKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5mZXRjaCA9IGZ1bmN0aW9uIChtb2RlbE5hbWUsIGZpbHRlciwgdG9nZXRoZXIsIGNhbGxCYWNrKSB7ICAvL1xuICAgICAgICAvLyBpZiBhIGNvbm5lY3Rpb24gaXMgY3VycmVudGx5IHJ1bm5pbmcsIHdhaXQgZm9yIGNvbm5lY3Rpb24uXG4gICAgICAgIGlmIChtb2RlbE5hbWUgaW4gd2FpdGluZ0Nvbm5lY3Rpb25zKXtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBXMlBSRVNPVVJDRS5mZXRjaChtb2RlbE5hbWUsIGZpbHRlciwgdG9nZXRoZXIsIGNhbGxCYWNrKTtcbiAgICAgICAgICAgIH0sNTAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGZldGNoaW5nIGFzeW5jaHJvbW91cyBtb2RlbCBmcm9tIHNlcnZlclxuICAgICAgICAgICAgVzJQUkVTT1VSQ0UuZGVzY3JpYmUobW9kZWxOYW1lLCAoZnVuY3Rpb24obW9kZWwpe1xuICAgICAgICAgICAgICAgIC8vIGlmIGRhdGEgY2FtZXMgZnJvbSByZWFsdGltZSBjb25uZWN0aW9uXG4gICAgICAgICAgICAgICAgaWYgKFcyUFJFU09VUkNFLmNvbm5lY3Rpb24uY2FjaGVkU3RhdHVzLnJlYWx0aW1lRW5kUG9pbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gZ2V0dGluZyBmaWx0ZXIgZmlsdGVyZWQgYnkgY2FjaGluZyBzeXN0ZW1cbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyID0gbGlzdENhY2hlLmZpbHRlcihtb2RlbCxmaWx0ZXIpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHNvbXRoaW5nIGlzIG1pc3Npbmcgb24gbXkgbG9jYWwgREIgXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXNrIGZvciBtaXNzaW5ncyBhbmQgcGFyc2Ugc2VydmVyIHJlc3BvbnNlIGluIG9yZGVyIHRvIGVucmljaCBteSBsb2NhbCBEQi5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBsYWNpbmcgbG9jayBmb3IgdGhpcyBtb2RlbFxuICAgICAgICAgICAgICAgICAgICAgICAgd2FpdGluZ0Nvbm5lY3Rpb25zW21vZGVsTmFtZV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgVzJQUkVTT1VSQ0UuJHBvc3QobW9kZWxOYW1lICsgJy9saXN0Jywge2ZpbHRlciA6IGZpbHRlcn0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFcyUFJFU09VUkNFLmdvdERhdGEoZGF0YSxjYWxsQmFjayk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVsZWFzZSBsb2NrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB3YWl0aW5nQ29ubmVjdGlvbnNbbW9kZWxOYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihyZXQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZWxlYXNlIGxvY2tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHdhaXRpbmdDb25uZWN0aW9uc1ttb2RlbE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbEJhY2sgJiYgY2FsbEJhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlsdGVyO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHBvc3QobW9kZWxOYW1lICsgJy9saXN0Jywgc2VuZERhdGEsZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZpbHRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHT1RfQUxMLnNvdXJjZS5wdXNoKG1vZGVsTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFcyUFJFU09VUkNFLmdvdERhdGEoZGF0YSwgY2FsbEJhY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkuYmluZCh0aGlzKSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5nZXQgPSBmdW5jdGlvbihtb2RlbE5hbWUsIGlkcywgY2FsbEJhY2spe1xuICAgICAgICAvLyBzZWFyY2ggb2JqZWN0cyBmcm9tIElEQi4gSWYgc29tZSBpZCBpcyBtaXNzaW5nLCBpdCByZXNvbHZlIGl0IGJ5IHRoZSBzZXJ2ZXJcbiAgICAgICAgLy8gaWYgYSByZXF1ZXN0IHRvIHRoZSBzYW1lIG1vZGVsIGlzIHBlbmRpbmcsIHdhaXQgZm9yIGl0cyBjb21wbGV0aW9uXG4gICAgICAgIFxuICAgICAgICBpZiAoaWRzLmNvbnN0cnVjdG9yICE9PSBBcnJheSl7XG4gICAgICAgICAgICBpZHMgPSBbaWRzXTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiBzb21lIGVudGl0eSBpcyBtaXNzaW5nIFxuICAgICAgICBXMlBSRVNPVVJDRS5mZXRjaChtb2RlbE5hbWUgLCB7aWQ6IGlkc30sIG51bGwsZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHZhciByZXQgPSBbXTtcbiAgICAgICAgICAgIHZhciBpdGFiID0gSURCW21vZGVsTmFtZV1cbiAgICAgICAgICAgIGZvciAodmFyIGlkIGluIGlkcyl7XG4gICAgICAgICAgICAgICAgcmV0LnB1c2goaXRhYi5zb3VyY2VbaWRzW2lkXV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbEJhY2socmV0KTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHRoaXMuZ290TW9kZWwgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBmb3IgKHZhciBtb2RlbE5hbWUgaW4gZGF0YSkge1xuICAgICAgICAgICAgdmFyIG1vZGVsID0gZGF0YVttb2RlbE5hbWVdO1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlWydkZXNjcmlwdGlvbjonICsgbW9kZWxOYW1lXSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgICAgICAgICAgbW9kZWxDYWNoZVttb2RlbE5hbWVdID0gbWFrZU1vZGVsQ2xhc3MobW9kZWwpO1xuICAgICAgICAgICAgaWYgKCEobW9kZWxOYW1lIGluIElEQikpIHtcbiAgICAgICAgICAgICAgICBJREJbbW9kZWxOYW1lXSA9IExhenkoe30pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuZGVzY3JpYmUgPSBmdW5jdGlvbihtb2RlbE5hbWUsIGNhbGxCYWNrKXtcbiAgICAgICAgdmFyIHJldCA9IG1vZGVsQ2FjaGVbbW9kZWxOYW1lXTtcbiAgICAgICAgaWYgKHJldCkge1xuICAgICAgICAgICAgY2FsbEJhY2sgJiYgY2FsbEJhY2socmV0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghKG1vZGVsTmFtZSBpbiB3YWl0aW5nQ29ubmVjdGlvbnMpKXtcbiAgICAgICAgICAgICAgICBpZiAobW9kZWxOYW1lIGluIGZhaWxlZE1vZGVscyl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgY2FjaGVLZXkgPSAnZGVzY3JpcHRpb246JyArIG1vZGVsTmFtZTtcbiAgICAgICAgICAgICAgICBpZiAoY2FjaGVLZXkgaW4gbG9jYWxTdG9yYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ290TW9kZWwoSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2VbY2FjaGVLZXldKSk7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxCYWNrICYmIGNhbGxCYWNrKG1vZGVsQ2FjaGVbbW9kZWxOYW1lXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgd2FpdGluZ0Nvbm5lY3Rpb25zW21vZGVsTmFtZV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRwb3N0KG1vZGVsTmFtZSArICcvZGVzY3JpYmUnLG51bGwsIGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgVzJQUkVTT1VSQ0UuZ290TW9kZWwoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsQmFjayAmJiBjYWxsQmFjayhtb2RlbENhY2hlW21vZGVsTmFtZV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHdhaXRpbmdDb25uZWN0aW9uc1ttb2RlbE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZWxOb3RGb3VuZC5oYW5kbGUobW9kZWxOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhaWxlZE1vZGVsc1ttb2RlbE5hbWVdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyB3YWl0IGZvciBjb25uZWN0aW9uXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBXMlBSRVNPVVJDRS5kZXNjcmliZShtb2RlbE5hbWUsIGNhbGxCYWNrKTtcbiAgICAgICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9ICAgICAgICBcbiAgICB9O1xuICAgIHRoaXMuYWRkTW9kZWxIYW5kbGVyID0gZnVuY3Rpb24gKG1vZGVsTmFtZSwgZGVjb3JhdG9yKSB7XG4gICAgICAgIHZhciBrZXkgPSB1dGlscy5oYXNoKGRlY29yYXRvcik7XG4gICAgICAgIGlmICghKG1vZGVsTmFtZSBpbiBidWlsZGVySGFuZGxlcnMpKSBidWlsZGVySGFuZGxlcnNbbW9kZWxOYW1lXSA9IG5ldyBIYW5kbGVyKCk7XG4gICAgICAgIGlmICghKG1vZGVsTmFtZSBpbiBidWlsZGVySGFuZGxlclVzZWQpKSBidWlsZGVySGFuZGxlclVzZWRbbW9kZWxOYW1lXSA9IHt9O1xuICAgICAgICBpZiAoa2V5IGluIGJ1aWxkZXJIYW5kbGVyVXNlZFttb2RlbE5hbWVdKXtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ1aWxkZXJIYW5kbGVyVXNlZFttb2RlbE5hbWVdW2tleV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtb2RlbE5hbWUgaW4gbW9kZWxDYWNoZSkge1xuICAgICAgICAgICAgZGVjb3JhdG9yKG1vZGVsQ2FjaGVbbW9kZWxOYW1lXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBidWlsZGVySGFuZGxlcnNbbW9kZWxOYW1lXS5hZGRIYW5kbGVyKGRlY29yYXRvcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuYWRkUGVyc2lzdGVudEF0dHJpYnV0ZXMgPSBmdW5jdGlvbihtb2RlbE5hbWUsIGF0dHJpYnV0ZXMpe1xuICAgICAgICB2YXIgYWRkUHJvcGVydHkgPSBmdW5jdGlvbihtb2RlbCwgYXR0cmlidXRlcykge1xuICAgICAgICAgIGF0dHJpYnV0ZXMuZm9yRWFjaChmdW5jdGlvbih2YWwpe1xuICAgICAgICAgICAgdmFyIGtleSA9ICdwQTonICsgbW9kZWwubW9kZWxOYW1lICsgJzonICsgdmFsO1xuICAgICAgICAgICAgdmFyIGthdHRyID0gJ19fJyArIHZhbDtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2RlbC5wcm90b3R5cGUsIHZhbCwge1xuICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgaWYgKCEoa2F0dHIgaW4gdGhpcykpe1xuICAgICAgICAgICAgICAgICAgdmFyIHYgPSBsb2NhbFN0b3JhZ2Vba2V5ICsgdGhpcy5pZF07XG4gICAgICAgICAgICAgICAgICB0aGlzW2thdHRyXSA9IHY/SlNPTi5wYXJzZSh2KTpudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1trYXR0cl07XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpe1xuICAgICAgICAgICAgICAgIHRoaXNba2F0dHJdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlW2tleSArIHRoaXMuaWRdID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCEobW9kZWxOYW1lIGluIHBlcnNpc3RlbnRBdHRyaWJ1dGVzKSkgeyBwZXJzaXN0ZW50QXR0cmlidXRlc1ttb2RlbE5hbWVdID0gW107IH1cbiAgICAgICAgdmFyIGF0dHJzID0gcGVyc2lzdGVudEF0dHJpYnV0ZXNbbW9kZWxOYW1lXTtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIHZhciBuZXdBdHRycyA9IExhenkoYXR0cmlidXRlcykuZGlmZmVyZW5jZShhdHRycykudG9BcnJheSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIG5ld0F0dHJzID0gYXR0cnM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5ld0F0dHJzLmxlbmd0aCl7XG4gICAgICAgICAgICBpZiAobW9kZWxOYW1lIGluIG1vZGVsQ2FjaGUpe1xuICAgICAgICAgICAgICAgIGFkZFByb3BlcnR5KG1vZGVsQ2FjaGVbbW9kZWxOYW1lXSwgbmV3QXR0cnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZXMpe1xuICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGF0dHJzLG5ld0F0dHJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5vbignbmV3LW1vZGVsJywgZnVuY3Rpb24obW9kZWwpe1xuICAgICAgICBpZiAobW9kZWwubW9kZWxOYW1lIGluIGJ1aWxkZXJIYW5kbGVycyl7XG4gICAgICAgICAgICBidWlsZGVySGFuZGxlcnNbbW9kZWwubW9kZWxOYW1lXS5oYW5kbGUobW9kZWxDYWNoZVttb2RlbC5tb2RlbE5hbWVdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobW9kZWwubW9kZWxOYW1lIGluIHBlcnNpc3RlbnRBdHRyaWJ1dGVzKXtcbiAgICAgICAgICAgIFcyUFJFU09VUkNFLmFkZFBlcnNpc3RlbnRBdHRyaWJ1dGVzKG1vZGVsLm1vZGVsTmFtZSk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMucXVlcnkgPSBmdW5jdGlvbihtb2RlbE5hbWUsIGZpbHRlciwgdG9nZXRoZXIsIGNhbGxCYWNrKXtcbiAgICAgICAgdmFyIHRocyA9IHRoaXM7XG4gICAgICAgIHRoaXMuZGVzY3JpYmUobW9kZWxOYW1lLGZ1bmN0aW9uKG1vZGVsKXtcbiAgICAgICAgICAgIC8vIGFycmF5Zml5IGFsbCBmaWx0ZXIgdmFsdWVzXG4gICAgICAgICAgICBmaWx0ZXIgPSBMYXp5KGZpbHRlcikubWFwKGZ1bmN0aW9uKHYsayl7IHJldHVybiBbayxBcnJheS5pc0FycmF5KHYpP3Y6W3ZdXX0pLnRvT2JqZWN0KCk7XG4gICAgICAgICAgICB2YXIgZmlsdGVyRnVuY3Rpb24gPSB1dGlscy5tYWtlRmlsdGVyKG1vZGVsLCBmaWx0ZXIpO1xuICAgICAgICAgICAgdmFyIGlkeCA9IGdldEluZGV4KG1vZGVsTmFtZSk7XG4gICAgICAgICAgICB0aHMuZmV0Y2gobW9kZWxOYW1lLGZpbHRlcix0b2dldGhlciwgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAgICAgY2FsbEJhY2soaWR4LmZpbHRlcihmaWx0ZXJGdW5jdGlvbikudmFsdWVzKCkudG9BcnJheSgpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgIH07XG4gICAgdGhpcy5kZWxldGUgPSBmdW5jdGlvbihtb2RlbE5hbWUsIGlkcywgY2FsbEJhY2spe1xuICAgICAgICByZXR1cm4gdGhpcy4kcG9zdChtb2RlbE5hbWUgKyAnL2RlbGV0ZScsIHsgaWQgOiBpZHN9LCBjYWxsQmFjayk7XG4gICAgfTtcblxuICAgIHRoaXMuY29ubmVjdCA9IGZ1bmN0aW9uIChjYWxsQmFjaykge1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uLmlzTG9nZ2VkSW4pIHtcbiAgICAgICAgICAgIGNhbGxCYWNrKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24uY29ubmVjdChjYWxsQmFjayk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5mdW5jdGlvbiByZVdoZWVsT1JNKGVuZFBvaW50LCBsb2dpbkZ1bmMpe1xuICAgIHRoaXMuJG9ybSA9IG5ldyBiYXNlT1JNKG5ldyB1dGlscy5yZVdoZWVsQ29ubmVjdGlvbihlbmRQb2ludCwgbG9naW5GdW5jKSx0aGlzKTtcbiAgICB0aGlzLm9uID0gdGhpcy4kb3JtLm9uLmJpbmQodGhpcy4kb3JtKTtcbiAgICB0aGlzLmVtaXQgPSB0aGlzLiRvcm0uZW1pdC5iaW5kKHRoaXMuJG9ybSk7XG4gICAgdGhpcy51bmJpbmQgPSB0aGlzLiRvcm0udW5iaW5kLmJpbmQodGhpcy4kb3JtKTtcbiAgICB0aGlzLm9uY2UgPSB0aGlzLiRvcm0ub25jZTtcbiAgICB0aGlzLmFkZE1vZGVsSGFuZGxlciA9IHRoaXMuJG9ybS5hZGRNb2RlbEhhbmRsZXIuYmluZCh0aGlzLiRvcm0pO1xuICAgIHRoaXMuYWRkUGVyc2lzdGVudEF0dHJpYnV0ZXMgPSB0aGlzLiRvcm0uYWRkUGVyc2lzdGVudEF0dHJpYnV0ZXMuYmluZCh0aGlzLiRvcm0pO1xuICAgIHRoaXMudXRpbHMgPSB1dGlscztcbiAgICB0aGlzLmxvZ291dCA9IHRoaXMuJG9ybS5jb25uZWN0aW9uLmxvZ291dC5iaW5kKHRoaXMuJG9ybS5jb25uZWN0aW9uKTtcbn1cblxucmVXaGVlbE9STS5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIGNvbm5lY3Rpb24gPSB0aGlzLiRvcm0uY29ubmVjdGlvbjtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKGNhbGxCYWNrLHJlamVjdCl7XG4gICAgICAgIGNvbm5lY3Rpb24uY29ubmVjdChjYWxsQmFjayk7XG4gICAgfSkpO1xufVxuXG5yZVdoZWVsT1JNLnByb3RvdHlwZS5sb2dpbiA9IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24oYWNjZXB0LHJlamVjdCl7XG4gICAgICAgIHRoaXMuJG9ybS5jb25uZWN0aW9uLmxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCwgYWNjZXB0KTsgICAgXG4gICAgfSkuYmluZCh0aGlzKSk7XG4gICAgXG59O1xuXG5yZVdoZWVsT1JNLnByb3RvdHlwZS5sb2dvdXQgPSBmdW5jdGlvbih1cmwpe1xuICAgIHJldHVybiB0aGlzLiRvcm0uY29ubmVjdGlvbi5sb2dvdXQoKTtcbn1cblxucmVXaGVlbE9STS5wcm90b3R5cGUuZ2V0TW9kZWwgPSBmdW5jdGlvbihtb2RlbE5hbWUpe1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oYWNjZXB0LCByZWplY3Qpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc2VsZi4kb3JtLmNvbm5lY3QoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBzZWxmLiRvcm0uZGVzY3JpYmUobW9kZWxOYW1lLGFjY2VwdCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgfVxuICAgIH0pXG59XG5cbnJlV2hlZWxPUk0ucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKG1vZGVsTmFtZSwgaWRzKXtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIHNpbmdsZSA9IGZhbHNlO1xuICAgIHZhciBtb2ROYW1lID0gbW9kZWxOYW1lO1xuICAgIHZhciBmaWx0ZXI7XG4gICAgaWYgKHR5cGVvZiBpZHMgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHNpbmdsZSA9IHRydWU7XG4gICAgICAgIGZpbHRlciA9IHsgaWQgOiBbaWRzXX07XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGlkcykpe1xuICAgICAgICBmaWx0ZXIgPSB7IGlkIDogaWRzIH07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaWRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICBmaWx0ZXIgPSBpZHM7XG4gICAgfSBlbHNlIGlmIChpZHMgPT09IG51bGwpIHtcbiAgICAgICAgZmlsdGVyID0ge307XG4gICAgfVxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihhY2NlcHQsIHJlamVjdCl7XG4gICAgICAgIHRyeXtcbiAgICAgICAgICAgIHNlbGYuJG9ybS5jb25uZWN0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgc2VsZi4kb3JtLnF1ZXJ5KG1vZGVsTmFtZSwgZmlsdGVyLCBudWxsLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaW5nbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY2VwdChkYXRhLmxlbmd0aCA/IGRhdGFbMF0gOiBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY2VwdChkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG4vKlxucmVXaGVlbE9STS5wcm90b3R5cGUucXVlcnkgPSBmdW5jdGlvbiAobW9kZWxOYW1lLCBmaWx0ZXIsIHJlbGF0ZWQpe1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oYWNjZXB0LCByZWplY3Qpe1xuICAgICAgICB2YXIgdG9nZXRoZXIgPSBudWxsO1xuICAgICAgICBpZiAocmVsYXRlZCAmJiAocmVsYXRlZC5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpICYmIChyZWxhdGVkLmxlbmd0aCkpe1xuICAgICAgICAgICAgdG9nZXRoZXIgPSByZWxhdGVkO1xuICAgICAgICB9IGVsc2UgaWYgKHJlbGF0ZWQgJiYgKHJlbGF0ZWQuY29uc3RydWN0b3IgPT09IFN0cmluZykgJiYgKHJlbGF0ZWQubGVuZ3RoKSl7XG4gICAgICAgICAgICB0b2dldGhlciA9IHJlbGF0ZWQuc3BsaXQoJywnKTtcbiAgICAgICAgfVxuICAgICAgICB0cnl7XG4gICAgICAgICAgICBzZWxmLiRvcm0uY29ubmVjdChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHNlbGYuJG9ybS5xdWVyeShtb2RlbE5hbWUsIGZpbHRlciwgdG9nZXRoZXIsIGFjY2VwdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgIH1cbiAgICB9KVxufTtcbiovXG5cbnJlV2hlZWxPUk0ucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIChtb2RlbE5hbWUsIGlkcyl7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihhY2NlcHQsIHJlamVjdCl7XG4gICAgICAgIHRyeXtcbiAgICAgICAgICAgIHNlbGYuJG9ybS5jb25uZWN0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgc2VsZi4kb3JtLmRlbGV0ZShtb2RlbE5hbWUsIGlkcywgYWNjZXB0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgfVxuICAgIH0pXG59O1xuXG5yZVdoZWVsT1JNLnByb3RvdHlwZS5nZXRMb2dnZWRVc2VyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmICh0aGlzLiRvcm0uY29ubmVjdGlvbi5jYWNoZWRTdGF0dXMudXNlcl9pZClcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCdhdXRoX3VzZXInLHRoaXMuJG9ybS5jb25uZWN0aW9uLmNhY2hlZFN0YXR1cy51c2VyX2lkKTtcbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGFjY2VwdCwgcmVqZWN0KSB7XG4gICAgICAgICAgICBzZWxmLm9uY2UoJ2xvZ2dlZC1pbicsZnVuY3Rpb24odXNlcikge1xuICAgICAgICAgICAgICAgIHNlbGYuZ2V0KCdhdXRoX3VzZXInLCB1c2VyKS50aGVuKGFjY2VwdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5yZVdoZWVsT1JNLnByb3RvdHlwZS4kc2VuZFRvRW5kcG9pbnQgPSBmdW5jdGlvbiAodXJsLCBkYXRhKXtcbiAgICByZXR1cm4gdGhpcy4kb3JtLiRwb3N0KHVybCwgZGF0YSk7XG59XG5cbnJlV2hlZWxPUk0ucHJvdG90eXBlLmxvZ2luID0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkKXtcbiAgICByZXR1cm4gdGhpcy4kb3JtLmNvbm5lY3Rpb24ubG9naW4odXNlcm5hbWUscGFzc3dvcmQpO1xufVxuIl19
