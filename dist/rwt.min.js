!function(t,e,n){"use strict";function i(){this.handlers=[],this.strHandlers={}}function o(){var t={},n={},i=0;if(this.on=function(e,o){e in t||(t[e]=new Array);var r=i++;return t[e].push(o),n[r]=o,r},this.emit=function(e){if(e in t){var n=Array.prototype.slice.call(arguments,1);t[e].forEach(function(t){t.apply(null,n)})}},this.unbind=function(i){var o=0;if(i in n){var r=n[i+""];e(t).each(function(t,e){var n=[];for(var i in t)t[i]===r&&(n.push(i),o++);n.reverse().forEach(function(e){t.splice(e,1)})})}return delete n[i],o},this.once=function(t,e){var n=this,i=this.on(t,function(){e.apply(this,arguments),n.unbind(i)})},"DEBUG"in window){var o=this.emit;this.emit=function(){var t=Array.prototype.slice.call(arguments,0);return o.apply(this,t)}.bind(this)}}function r(t,e){var i=new n(t);i.onopen=function(t){console.log("open : websocket"),i.tenant(),e.emit("realtime-connection-open",t)},i.onmessage=function(t){if("message"==t.type)try{e.emit("realtime-message-json",JSON.parse(t.data))}catch(n){e.emit("realtime-message-text",JSON.parse(t.data))}else console.log("from realtime ",t)},i.onclose=function(){setTimeout(w.wsConnect,1e3),e.emit("realtime-connection-closed")},i.tenant=function(){i.send("TENANT:"+e.cachedStatus.application+":"+e.cachedStatus.token)},this.close=function(){i.close()}}function s(t,e){var n=new o;this.getLogin=e,this.endPoint=t.endsWith("/")?t:t+"/",this.on=n.on,this.unbind=n.unbind,this.emit=n.emit,this.once=n.once,this.cachedStatus={},this.isConnected=!1,this.isLoggedIn=!1}function a(){var t=!1;this.touch=function(){t=!0},this.touched=function(){var e=t;return t=!1,e}}function c(t,n,i,o){if(!n)var n=[];var r=[];this.ask=function(i,s){o&&i in o.source||e(n).contains(i)||(r.push(i),s||n.push(i),t.touch())},this.getAskedIndex=function(){return n},this.missings=function(){return e(r.splice(0,r.length)).unique().toArray()}}function u(t,n,i,o){var r=new a,s={},u={},l={},f={},h={};this.mainIndex=s,this.foreignKeys=u,this.m2m=l,this.m2mIndex=f,this.permissions=h,i.on("model-definition",function(t,n){var i=o.getIndexFor(t.name,"id");s[t.name]=new c(r,i,"mainIndex."+t.name,n),h[t.name]=new c(r,null,"permissions."+t.name),e(t.references).each(function(e){var n=t.name+"_"+e.id;u[n]=new c(r,o.getIndexFor(e.to,"id"),e.to+".id foreignKeys."+n)}),e(t.referencedBy).each(function(t){var e=t.by+"."+t.id;u[e]=new c(r,o.getIndexFor(t.by,t.id),t.by+"."+t.id+" foreignKeys."+e)}),e(t.manyToMany).each(function(t){t.indexName in l||(l[t.indexName]=[new c(r,null,"m2m."+t.indexName+"[0]"),new c(r,null,"m2m."+t.indexName+"[1]")]),t.indexName in f||(f[t.indexName]=new d(t,l[t.indexName]))})});var p=function(e,n,o,r){i.$post((n?w.reverse("/",e):e)+"s/list",{collection:o},function(n){i.gotData(n,r),delete t[e]})},m=function(n,i,o,r){e(i).each(l[n][o].ask.bind(l[n][o])),i=l[n][o].missings(),i.length?(t[n]=1,p(n,o,i,r)):r&&r()};this.getM2M=m;var g=function(){if(r.touched()){if(e(t).values().sum())return void r.touch();var o=!1;e(l).each(function(t,n){e(t).each(function(t,r){var a=t.missings();if(a=e(a).filter(Boolean).map(function(t){return parseInt(t)}).toArray(),a.length){var c=f[n],u=c["get"+(1-r)].bind(c);o=!0,p(n,r,a,function(t){var o=a.map(u);if(o.length){var c=n.split("/")[1-r];i.describe(c,function(){e(o).flatten().unique().each(function(t){s[c].ask(t,!0)})})}})}})}),e(s).each(function(t,r){var s=t.missings();if(s.length){o=!0;r in n?n[r].keys():e();i.fetch(r,{id:s},null,w.noop)}}),e(u).map(function(t,e){return[e,t.missings()]}).filter(function(t){return t[1].length}).each(function(t){o=!0;var e=t[1],n=t[0],r=n.split("."),s=r[0],a=r[1],c={};c[a]=e,i.fetch(s,c)}),e(e(h).map(function(t,e){return[e,t.missings()]}).filter(function(t){return t[1].length}).toObject()).each(function(n,r){o=!0,n.length&&(t[r]=1,i.$post(r+"/my_perms",{ids:e(n).unique().toArray()},function(e){i.gotPermissions(e.PERMISSIONS),delete t[r]}))})}};setInterval(g,50)}function l(){function t(t){return t in i||(i[t]=new f),i[t]}var e={},n={},i={};this.filter=function(i,o){var r=i.modelName;return e[r]?null:0===_.size(o)?(e[r]=!0,r in n&&delete n[r],{}):t(r).getFilters(o)},this.getIndexFor=function(t,e){var i=t+"."+e;return i in n||(n[i]=[]),n[i]}}function f(){this.explodedFilters={id:[]},this.askedFilters=[]}function d(t,n){var i=[];this.add=i.push.bind(i),this.add=function(t){e(i).find(t)||i.push(t)},this.get0=function(t){return n[1].ask(t),e(i).filter(function(e){return e[0]===t}).pluck("1").toArray()},this.get1=function(t){return n[0].ask(t),e(i).filter(function(e){return e[1]===t}).pluck("0").toArray()},this["get"+w.capitalize(t.indexName.split("/")[1])]=this.get1,this["get"+w.capitalize(t.indexName.split("/")[0])]=this.get0,this.del=function(t){for(var e=i.length,n=null,o=0;o<e;o++)if(i[o][0]===t[0]&&i[o][1]===t[1]){n=o;break}n&&i.splice(o,1),console.log("deleting ",t)}}function h(t,n,i,o){var r=Array.prototype.slice.call(arguments,4),s={};e(r).each(function(e){t.orm.on(e,function(){s={}})});var a={get:function(){return this.id in s||(s[this.id]=i.call(this)),s[this.id]}};o&&(a.set=function(t){isFinite(t)?(o.call(this,t),this.id in s&&delete s[this.id]):this.id in s&&delete s[this.id]}),Object.defineProperty(t,n,a)}function p(t,e,n,o,r,s){var a=this,c=null,u=new i,l=t.$orm;this.updateData=u.addHandler.bind(u),this.items=[],l.describe(e,function(t){a.model=t,c=w.makeFilter(t,n)}),this.modelName=e,this.initialFilter=n,this.partial=o||!1;l.query(e,n,null,function(t){a.items=t}),t.on("updated-"+e,function(t){console.warn("collection update "+e,t)}),t.on("new-"+e,function(t){console.warn("collection new "+e,t),t=t.toArray(),a.items=_.union(a.items,t.filter(c)),u.handle(a)}),t.on("deleted-"+e,function(t){console.warn("collection delete "+e,t)})}function m(t){this.resource=t._resource,this.formIdx=t.formIdx,this.fields=t.errors}function g(t,e){this.$orm=new b(new w.reWheelConnection(t,e),this),this.on=this.$orm.on.bind(this.$orm),this.emit=this.$orm.emit.bind(this.$orm),this.unbind=this.$orm.unbind.bind(this.$orm),this.once=this.$orm.once,this.addModelHandler=this.$orm.addModelHandler.bind(this.$orm),this.addPersistentAttributes=this.$orm.addPersistentAttributes.bind(this.$orm),this.utils=w,this.logout=this.$orm.connection.logout.bind(this.$orm.connection)}i.prototype.addHandler=function(t){var e=w.hash(t.toString());e in this.strHandlers||(this.strHandlers[e]=t,this.handlers.push(t))},i.prototype.handle=function(){var t=Array.prototype.slice.call(arguments,0);this.handlers.forEach(function(e){e.apply(null,t)})},i.prototype.handleBy=function(){var t=Array.prototype.slice.call(arguments,1),e=arguments[0];this.handlers.forEach(function(n){n.apply(e,t)})};var y=0,v=function(){return""},w={renameFunction:function(t,e){return new Function("return function (call) { return function "+t+" () { return call(this, arguments) }; };")()(Function.apply.bind(e))},cached:function(t,e){function n(){return this[e]||(this[e]=t.call(this,[arguments])),this[e]}return e||(e="_"+y++),n},log:function(){console.log(arguments)},xdr:function(t,n,i,o,r){return new Promise(function(i,s){var a;n||(n={}),XMLHttpRequest?(a=new XMLHttpRequest,a.onreadystatechange=function(){if(4===a.readyState){try{var t=JSON.parse(a.responseText)}catch(e){var t=null}var e={responseData:t,responseText:a.responseText,status:a.status,request:a};a.status>=200&&a.status<400?i(e):s(e)}}):XDomainRequest?(a=new XDomainRequest,a.onload=function(){i(a.responseText,a.statusText,a)}):s(new Error("CORS not supported")),a.open("POST",t,!0),a.onerror=s,a.setRequestHeader("Accept","application/json"),o&&(n.__token__=o),r?(a.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),n=e(n).map(function(t,e){return e+"="+encodeURI(t.toString())}).toArray().join("&")):(a.setRequestHeader("Content-Type","text/plain"),n=e(n).size()?JSON.stringify(n):""),a.send(n)})},capitalize:function(t){return t[0].toUpperCase()+t.slice(1).toLowerCase()},hash:function(t){t=t.toString();for(var e=1,n=0;n<t.length;n++)e*=1+t.charCodeAt(n);return(e%34958374957).toString()},makeFilter:function(t,n,i,o){if(i||(i=" && "),0===e(n).size())return function(t){return!0};var r=e(n).map(function(n,i){return n||(n=[null]),Array.isArray(n)||(n=[n]),o||"reference"!==t.fields[i].type?"string"===t.fields[i].type&&(n=n.map(JSON.stringify)):(i="_"+i,n=e(n).map(function(t){return t&&t.constructor!==Number?t.id:t}).toArray()),"("+e(n).map(function(t){return t?t===orm.utils.mock&&console.error("makeFilter with Mock Object"):console.error("makeFilter x is null"),"(x."+i+" === "+t+")"}).join(" || ")+")"}).toArray().join(i);return new Function("x","return "+r)},sameAs:function(t,e){for(var n in t)if(e[n]!=t[n])return!1;return!0},pluralize:function(t,e){return t+"s"},beforeCall:function(t,e){return function(){e().then(t)}},cleanStorage:function(){e(localStorage).keys().each(function(t){delete localStorage[t]})},cleanDescription:function(){e(localStorage).filter(function(t,n){return e(n).startsWith("description:")}).keys().each(function(t){delete localStorage[t]})},reverse:function(t,e){return e.split(t).reverse().join(t)},permutations:function(t){for(var e=[],n=t.length-1;n>=0;n--)for(var i=t.length-1;i>=0;i--)n!==i&&e.push([t[n],t[i]]);return e},waitFor:function(t,e){var n=function(){t()?e():setTimeout(n,500)};setTimeout(n,500)},bool:Boolean,noop:function(){},tzOffset:6e4*(new Date).getTimezoneOffset(),transFieldType:{date:function(t){return new Date(1e3*t+w.tzOffset)},datetime:function(t){return new Date(1e3*t+w.tzOffset)},string:function(t){return t.toString()},text:function(t){return t.toString()},integer:function(t){return parseInt(t)},float:function(t){return parseFloat(t)}},mock:function(){return new Proxy({},{get:function(t,e){return"string"==typeof e?"toString"===e?v:w.mock:t[e]}})}()};s.prototype.$post=function(t,e,n){var i=this;return new Promise(function(o,r){w.xdr(i.endPoint+t,e,i.cachedStatus.application,i.cachedStatus.token).then(function(r){i.emit("http-response",r.responseText,r.status,t,e),i.emit("http-response-"+r.status,r.responseText,t,e),r.responseData&&i.emit("http-response-"+r.status+"-json",r.responseData,t,e),n&&n(r.responseData||r.responseText),o(r.responseData||r.responseText)},function(n){n.responseData?(i.emit("error-json",n.responseData,n.status,t,e,n),i.emit("error-json-"+n.status,n.responseData,t,e,n)):(i.emit("error-http",n.responseText,n.status,t,e,n),i.emit("error-http-"+n.status,n.responseText,t,e,n)),r(n.responseData||n.responseText)})})},s.prototype.status=function(t,n){var i="token:"+this.endPoint,o=this;if(n&&(this.cachedStatus={},delete localStorage[i]),this.statusWaiting)return void w.waitFor(function(){return!o.statusWaiting},function(){o.status(t,n)});if(!e(this.cachedStatus).size()){var r={};return i in localStorage&&(r.__token__=localStorage[i]),this.statusWaiting=!0,void this.$post("api/status",r,function(e){o.updateStatus(e),localStorage[i]=e.token,t(e),o.statusWaiting=!1})}t(this.cachedStatus),t(this.cachedStatus)},s.prototype.updateStatus=function(t){(parseFloat(localStorage.lastBuild)||1)<t.last_build&&(w.cleanDescription(),localStorage.lastBuild=t.last_build),this.isConnected=Boolean(t.token),this.isLoggedIn=Boolean(t.user_id);var e=this.cachedStatus;if(this.cachedStatus=t,!e.user_id&&t.user_id)this.emit("logged-in",t.user_id);else if(e.user_id&&!t.user_id)this.emit("logged-out");else if(this.isConnected&&!this.isLoggedIn&&(this.emit("login-required"),this.getLogin)){var n=this.getLogin();n.constructor===Object?this.login(n.username,n.password,n.callBack):n.constructor===Promise&&n.then(function(t){this.login(t.username,t.password,t.callBack)})}!e.realtimeEndPoint&&t.realtimeEndPoint?this.wsConnection=new r(t.realtimeEndPoint,this):e.realtimeEndPoint&&!t.realtimeEndPoint&&(this.wsConnection.close(),delete this.wsConnection),this.emit("update-connection-status",t,e),localStorage.lastRWTConnectionStatus=JSON.stringify(t)},s.prototype.login=function(t,e){var n=this;return new Promise(function(i,o){w.xdr(n.endPoint+"api/login",{username:t||"",password:e||""},null,n.cachedStatus.token,!0).then(function(t){n.updateStatus(t.responseData),i({status:"success",userid:n.cachedStatus.user_id})},function(t){i({error:t.responseData.error,status:"error"})})})},s.prototype.logout=function(){var t=this;return new Promise(function(e,n){t.$post("api/logout").then(function(n){t.updateStatus({}),delete localStorage.lastRWTConnectionStatus,e()},n)})},s.prototype.connect=function(t){this.isLoggedIn?t(this.cachedStatus.user_id):(this.once("logged-in",function(e){t(e)}),this.status(t||w.noop))},w.reWheelConnection=s,f.prototype.add=function(t){this.askedFilters.push(t)},f.prototype.explode=function(t){var e=[],n=[];return _.forIn(t,function(t,i){e.push(i),n.push(t)}),Combinatorics.cartesianProduct.apply(this,n).toArray()},f.prototype.getFilters=function(t){var e=_.keys(t).sort(),n=_.join(e,"|"),i=this.explode(t),o=_.keys(this.explodedFilters),r=this;i.slice(0);if(n in this.explodedFilters||(this.explodedFilters[n]=[]),o.length){_.intersection(o,Combinatorics.power(e,function(t){return t.join("|")}).slice(1)).forEach(function(t,o){var s=_.split(t,"|"),a=null,c=s.map(_.partial(_.indexOf,e));a=t!==n?_.uniqWith(i.map(function(t){var e=[];for(var n in c)e.push(t[c[n]]);return e}),_.identity):i;var u=_.intersectionBy(r.explodedFilters[t],a,JSON.stringify);u.length&&u.forEach(function(t){if(i.length){var e=new Function("x","return "+c.map(function(e,n){return"(x["+e+"] === "+t[n]+")"}).join(" && "));_.remove(i,e)}})})}Array.prototype.push.apply(this.explodedFilters[n],i);var s=o.map(function(t){return t.split("|")}).filter(function(t){return _.every(e,function(e){return _.includes(t,e)})}).filter(function(t){return!_.isEqual(t,e)});return s.length&&s.forEach(function(t){var n=r.explodedFilters[t.join("|")],o=e.map(_.partial(_.indexOf,t));i.forEach(function(t){var e=new Function("x","return "+o.map(function(e,n){return"(x["+e+"] === "+t[n]+")"}).join(" && "));_.remove(n,e)})}),this.implode(i,e)},f.prototype.implode=function(t,e){return t.length?_.zipObject(e,_.unzip(t).map(_.uniq)):null},p.prototype.forEach=function(t){return this.items.forEach(t)};var b=function(t,n){function o(t,e,n){this.klass=e,this.permissions=[],this.id=t;for(var i in n)this.push.apply(this,[i,n[i]])}if(t.constructor===String)var r=new s(t);else if(t.constructor===w.reWheelConnection)var r=t;this.connection=r,r.on("connected",function(){this.connected=!0}),this.on=r.on,this.emit=r.emit,this.unbind=r.unbind,this.once=r.once,this.$post=r.$post.bind(r),this.on("ws-connected",function(t){console.info("Websocket connected"),t.onMessageJson(a.gotData.bind(a)),t.onMessageText(function(t){console.info("WS message : "+t)})}),this.on("ws-disconnected",function(t){console.error("Websocket disconnected")}),this.on("error-json-404",function(t,e,n,i){console.error("JSON error ",JSON.stringify(t)),delete b[e.split("/")[0]]}),this.on("realtime-message-json",function(t){a.gotData(t)});var a=this,c={auth_group:e({})},f={},d={},p={},g={},y={},v={},b={},_=new l(e),S=new u(b,c,this,_);this.IDB=c,this.validationEvent=this.on("error-json-513",function(t,e,n,i){currentContext.savingErrorHanlder&&currentContext.savingErrorHanlder(new m(t))});var x=function(t){return t in c?c[t]:(c[t]=e({}),c[t])};o.prototype.save=function(t){var n={permissions:e(this.permissions).map(function(t){return[t[0].id,t[1]]}).toObject()};n.id=this.id;this.klass.modelName;a.$post(this.klass.modelName+".set_permissions",n,function(e,n,i,o){t(e)})},o.prototype.push=function(t,n){var i=e(n),o=e(this.klass.allPermissions).map(function(t){return[t,i.contains(t)]}).toObject(),r=e(this.permissions).map(function(t){return t[0].id});r.contains(t)?this.permissions[r.indexOf(t)][1]=o:this.permissions.push([c.auth_group.get(t),o])};var N=function(t){t.fields.id.readable=!1,t.fields.id.writable=!1;var i=e(t.fields);t.privateArgs&&(i=i.merge(t.privateArgs)),a.emit("model-definition",t,x(t.name));var r="if (!row) { row = {}};\n";r+=t.references.map(function(t){return"this._"+t.id+" = row."+t.id+";"}).join(";\n"),r+=i.map(function(t,e){return"date"==t.type||"datetime"==t.type?"this."+e+" = row."+e+"?new Date(row."+e+" * 1000 - "+w.tzOffset+"):null;\n":"boolean"==t.type?"this."+e+" = (row."+e+' === "T") || (row.'+e+" === true);\n":"this."+e+" = row."+e+";\n"}).toString("\n"),r+="if (permissions) {this._permissions = permissions && Lazy(permissions).map(function (x) { return [x, true] }).toObject();}";var s=w.renameFunction(w.capitalize(t.name),new Function("row","permissions",r));s.prototype.orm=n,s.ref_translations={},s.modelName=t.name,s.references=e(t.references).pluck("id").toArray(),s.inverse_references=t.referencedBy.map(function(t){return t.by+"_"+t.id+"_set"}),s.referents=t.referencedBy.map(function(t){return[t.by,t.id]}),s.fieldsOrder=t.fieldOrder,s.allPermissions=t.permissions,e(t.representation).size()&&(s.prototype.toString=new Function("return this."+e(t.representation).toString(' + " " + this.'))),s.prototype.toUpperCase=function(){return this.toString().toUpperCase()},s.prototype.toLowerCase=function(){return this.toString().toLowerCase()},s.prototype.delete=function(){return n.delete(this.constructor.modelName,[this.id])},Object.defineProperty(s.prototype,"permissions",{get:function(){if(this._permissions)return this._permissions;S.permissions[this.constructor.modelName].ask(this.id)}}),s.prototype.all_perms=function(t){var n=this.id;a.$post(this.constructor.modelName+".all_perms",{id:this.id},function(i){var r=i,u={},l=e(r).pluck("group_id").unique().map(function(t){return""+t}).difference(c.auth_group.keys()).toArray();e(r).groupBy(function(t){return t.group_id}).each(function(t,n){u[n]=e(t).pluck("name").toArray()});var f=function(e){t(new o(n,s,u))};l.length?a.get("auth_group",l,f):f()})},s.prototype.save=function(t){var n=this.asRaw(),i=s.fields,o=this.id,r=this.constructor.modelName;if(t)for(var c in t)n[c]=t[c];e(s.fieldsOrder).filter(function(t){return!i[t].writable}).each(function(t){t in n&&delete n[t]}),o&&(n.id=o);var u=a.$post(r+(o?".post":".put"),n);return t&&t.constructor===Function&&(u.context.savingErrorHanlder=t),u},s.prototype.copy=function(){var t=new this.constructor(this.asRaw());return t._permissions=this._permissions,t};var u="return {\n"+e(t.references).map(function(t){return t.id+" : this._"+t.id}).concat(i.map(function(t,e){return"date"==t.type||"datetime"==t.type?e+" : (this."+e+"?(Math.round(this."+e+".getTime() - this."+e+".getTimezoneOffset() * 60000) / 1000):null)":"boolean"==t.type?e+" : this."+e+'?"T":"F"':e+" : this."+e})).toString(",\n")+"};";s.prototype.asRaw=new Function(u),s.saveMulti=function(t,n,i){var o=[],r=e(s.fields).filter(function(t){return!t.writable}).pluck("id").toArray();e(t).map(function(t){return t.asRaw()}).each(function(t){e(r).each(function(e){delete t[e]}),o.push(t)}),a.$post(s.modelName,"put",{multiple:o,formIdx:a.formIdx++},function(t){a.gotData(t);var i=c[s.modelName],o=e(t[s.modelName].results).pluck("id").map(function(t){return i.get(t)}).toArray();n&&n(o)},i)},"extra_verbs"in t&&e(t.extra_verbs).each(function(t){var n=t[0],i=t[1],o="var data = {id : this.id";i.length&&(o+=", "+e(i).map(function(t){return t+" : "+t}).join(",")),o+="};\n",i=["post","gotData"].concat(i),i.push("cb");var r=o+' return post("'+s.modelName+"."+n+'", data,cb);',c=new Function(i,r);s.prototype[n]=function(){var t=[a.$post,a.gotData].concat(Array.prototype.slice.call(arguments,0));return c.apply(this,t)}}),"privateArgs"in t&&(s.privateArgs=e(t.privateArgs).keys().map(function(t){return[t,!0]}).toObject(),s.prototype.savePA=function(t){var n=this,i={id:this.id},o=this.constructor.privateArgs,r=this.constructor.fields,s=(new this.constructor(t).asRaw(),e(o).keys().map(function(t){return[t,r[t]]}).toObject());e(t).each(function(t,e){e in o&&s[e].writable&&(i[e]=t)}),a.$post(this.constructor.modelName+".savePA",i,function(){e(i).each(function(t,e){n[e]=t})})}),y[s.modelName]=s;for(var l in t.fields)t.fields[l].id=l;return s.fields=e(t.fields).concat(e(t.privateArgs)).concat(e(t.references).tap(function(t){t.type=t.type||"reference"})).indexBy("id").toObject(),e(s.fields).each(function(t){t.widget||("reference"===t.type?t.widget="choices":t.widget=t.type)}),e(t.references).each(function(t){var e=t.to,i="_"+t.id;h(s.prototype,t.id,function(){if(!this[i])return w.mock;if(!(e in c)){var t=this;a.describe(e,function(n){S.mainIndex[e].ask(t[i],!0)})}var n=e in c&&this[i]&&c[e].get(this[i]);return!n&&e in S.mainIndex?("number"==typeof this[i]?S.mainIndex[e].ask(this[i],!0):console.warn("null reference for "+i+"("+this.id+") resource "+s.modelName),w.mock):n},function(n){if(n){if(n.constructor!==w.mock&&n.constructor.modelName!==e)throw new TypeError("You can assign only "+e+" to "+t.id);this[i]=n.id}else this[i]=null},"new-"+e,"deleted-"+e,"updated-"+e,"new-model-"+e),s.prototype["get"+w.capitalize(t.id)]=function(){return n.get(e,this[i])}}),e(t.referencedBy).each(function(t){var e=t.by+"."+t.id,i=t.by+"_"+w.pluralize(t.id),o=t.by;s.prototype.hasOwnProperty(i)?console.error("Tryed to redefine property "+i+"s for "+s.modelName):h(s.prototype,i,function(){var t=o in c?f[e].get(this.id+""):null;return S.foreignKeys[e].ask(this.id,!0),t},null),s.prototype["get"+w.capitalize(w.pluralize(t.by))]=function(){var e={};return e[t.id]=[this.id],n.get(t.by,e)}}),t.manyToMany&&(e(t.manyToMany).each(function(t){var n=t.indexName,i=t.first?0:1,o=t.model,r=S.m2mIndex[n]["get"+(1-i)];h(s.prototype,t.model+"s",function(){var t=this,n=[],i=r(t.id),s=null;return i.length&&(s=x(o).get.bind(c[o])),i&&s&&(n=e(i).map(s).filter(w.bool).toArray()),n},null,"received-m2m-"+n,"received-"+o),s.prototype["get"+w.capitalize(w.pluralize(o))]=function(){var t=this;return new Promise(function(s,u){try{S.getM2M(n,[t.id],i,function(n){var i=r(t.id);i.length?a.fetch(o,{id:i},null,function(){var t=c[o].get.bind(c[o]);s(e(i).map(t).filter(w.bool).toArray())}):s([])})}catch(t){console.error(t),u(t)}})},s.fields[w.capitalize(o)]={id:w.capitalize(o),name:w.capitalize(o),writable:!0,readable:!0,type:"M2M",validators:[]}}),s.prototype.unlinkReference=function(t){var n=!1,i=this.id,o=[];"Array"==t.constructor.name&&(n=!0,o=t,t=o[0]);var r=t.constructor.modelName;if(n)var c=e(o).pluck("id").map(function(t){return[i,t]}).toArray();else var c=[[i,t.id]];a.$post(s.modelName+"/"+r+"s/delete",{collection:c})},s.prototype.linkReference=function(t){var n=!1,i=this.id,o=[];"Array"==t.constructor.name&&(n=!0,o=t,t=o[0]);var r=t.constructor.modelName,c=s.modelName+"/"+r;if(n){var u=[];if(c in INDEX_M2M&&(u=e(o).pluck("id").difference(e(INDEX_M2M[c][0].get(this.id))).toArray()),c=r+"/"+s.modelName,c in INDEX_M2M&&(u=e(o).pluck("id").difference(e(INDEX_M2M[c][0].get(this.id))).toArray()),u.length){var l=e(u).map(function(t){return[i,t]}).toArray();W2P_POST(s.modelName,r+"s/put",{collection:l},function(t){})}}else{if(c in S.m2mIndex&&e(S.m2mIndex[c]["get"+w.capitalize(r)](t.id)).find(this))return;a.$post(s.modelName+"/"+r+"s.put",{collection:[[this.id,t.id]]})}}),a.emit("new-model",s),a.emit("new-model-"+s.modelName),s};this.gotData=function(t,n){if(console.info("gotData"),"string"!=typeof t){"_extra"in t&&delete t._extra;var i=(t.TOONE,t.TOMANY,t.MANYTOMANY,t.PERMISSIONS),o=t.PA;if(delete t.TOONE,delete t.TOMANY,delete t.MANYTOMANY,delete t.PERMISSIONS,delete t.PA,o||(o={}),"m2m"in(t=e(t).filter(function(t,e){return!("deleted"in t)||e in y}).toObject())){var r=t.m2m;delete t.m2m}e(t).each(function(t,n){a.describe(n,function(i){var r=i;t.results&&t.results.length>0&&t.results[0].constructor==Array&&(t.results=e(t.results).map(function(t){return e(r.fieldsOrder).zip(t).toObject()}).toArray());var s=e(t.results),u=t.deleted;if(n in o){var l=o[n];e(s).each(function(t){t.id in l&&e(l[t.id]).each(function(e,n){t[n]=e})})}var d=x(n),h=d.source;u&&u.forEach(function(t){delete h[t]});var p=s.indexBy("id").toObject(),m=e(p).keys(),g=m.difference(d.keys().map(function(t){return parseInt(t)})),v=m.difference(g);v=v.filter(function(t){return!w.sameAs(p[t],h[t].asRaw())}).toArray();var b=e(t.permissions?t.permissions:{}),_=g.map(function(t){return new r(p[t],b.get(t))}),S=[];e(i.references).map(function(t){return[t,1]}).toObject();v.forEach(function(t){var n=h[t],o=n.copy(),r=p.get(t);e(i.fields).each(function(t,e){switch(t.type){case"reference":n["_"+e]=r[e],n[e]=NaN;break;case"date":case"datetime":n[e]=new Date(1e3*r[e]);break;case"boolean":switch(r[e]){case null:n[e]=null;break;case"T":n[e]=!0;break;case"F":n[e]=!1;break;case!0:n[e]=!0;break;case!1:n[e]=!1}break;default:n[e]=r[e]}}),S.push([r,o])}),S.length&&a.emit("updated-"+n,S);var N=_.toArray();e(N).each(function(t){h[t.id]=t}),e(y[n].references).each(function(t){f[n+"."+t]=c[n].groupBy("_"+t)}),N.length&&a.emit("new-"+n,e(N),t.totalResults),u&&a.emit("deleted-"+n,u),a.emit("received-"+n)})}),r&&a.gotM2M(r),i&&a.gotPermissions(i),n&&n(t),a.emit("got-data")}else if(console.log("data "+t+" refused from gotData()"),n)return n(t)},this.gotPermissions=function(t){e(t).each(function(t,n){e(t[0]).each(function(t,i){n in c&&i in c[n].source&&(c[n].get(i)._permissions=e(t).map(function(t){return[t,!0]}).toObject())}),e(t[0]).size()&&a.emit("update-permissions-"+n,e(t[0]).keys().toArray())}),this.emit("update-permissions")},this.gotM2M=function(t){e(t).each(function(t,n){var i=S.m2mIndex[n];e(t).each(function(t){e(t).each(function(t,e){i[e](t)})}),a.emit("received-m2m"),a.emit("received-m2m-"+n)})},this.fetch=function(t,e,n,i){t in b?setTimeout(function(){a.fetch(t,e,n,i)},500):a.describe(t,function(n){if(a.connection.cachedStatus.realtimeEndPoint)return e=_.filter(n,e),e?(b[t]=!0,a.$post(t+".list",{filter:e}).then(function(e){a.gotData(e,i),delete b[t]},function(e){delete b[t]})):i&&i(),e;this.$post(t+".list",sendData,function(n){e||GOT_ALL.source.push(t),a.gotData(n,i)})}.bind(this))},this.get=function(t,e,n){e.constructor!==Array&&(e=[e]),a.fetch(t,{id:e},null,function(){var i=[],o=c[t];for(var r in e)i.push(o.source[e[r]]);n(i)})},this.gotModel=function(t){for(var n in t){var i=t[n];localStorage["description:"+n]=JSON.stringify(t),y[n]=N(i),n in c||(c[n]=e({}))}},this.describe=function(t,e){var n=y[t];if(n)e&&e(n);else if(!this.connection.isConnected||t in b)setTimeout(function(){a.describe(t,e)},500);else{if(t in v)return;var i="description:"+t;i in localStorage?(this.gotModel(JSON.parse(localStorage[i])),e&&e(y[t])):(b[t]=!0,this.$post(t+".describe",null,function(n){a.gotModel(n),e&&e(y[t]),delete b[t]},function(e){this.modelNotFound.handle(t),v[t]=!0}))}},this.addModelHandler=function(t,e){var n=w.hash(e);t in d||(d[t]=new i),t in p||(p[t]={}),n in p[t]||(p[t][n]=!0,t in y?e(y[t]):d[t].addHandler(e))},this.addPersistentAttributes=function(t,n){t in g||(g[t]=[]);var i=g[t];if(n)var o=e(n).difference(i).toArray();else var o=i;o.length&&(t in y&&function(t,e){e.forEach(function(e){var n="pA:"+t.modelName+":"+e,i="__"+e;Object.defineProperty(t.prototype,e,{get:function(){if(!(i in this)){var t=localStorage[n+this.id];this[i]=t?JSON.parse(t):null}return this[i]},set:function(t){this[i]=t,localStorage[n+this.id]=JSON.stringify(t)}})})}(y[t],o),n&&Array.prototype.push.apply(i,o))},this.on("new-model",function(t){t.modelName in d&&d[t.modelName].handle(y[t.modelName]),t.modelName in g&&a.addPersistentAttributes(t.modelName)}),this.query=function(t,n,i,o){var r=this;this.describe(t,function(s){n=e(n).map(function(t,e){return[e,Array.isArray(t)?t:[t]]}).toObject();var a=w.makeFilter(s,n),c=x(t);r.fetch(t,n,i,function(t){o(c.filter(a).values().toArray())})})},this.delete=function(t,e,n){return this.$post(t+".delete",{id:e},n)},this.connect=function(t){this.connection.isLoggedIn?t():this.connection.connect(t)}};g.prototype.connect=function(){var t=this.$orm.connection;return new Promise(function(e,n){t.connect(e)})},g.prototype.login=function(t,e){return new Promise(function(n,i){this.$orm.connection.login(t,e,n)}.bind(this))},g.prototype.logout=function(t){return this.$orm.connection.logout()},g.prototype.getModel=function(t){var e=this;return new Promise(function(n,i){try{e.$orm.connect(function(){e.$orm.describe(t,n)})}catch(t){i(t)}})},g.prototype.get=function(t,e){var n,i=this,o=!1;return"number"==typeof e?(o=!0,n={id:[e]}):Array.isArray(e)?n={id:e}:"object"==typeof e?n=e:null===e&&(n={}),new Promise(function(e,r){try{i.$orm.connect(function(){i.$orm.query(t,n,null,function(t){e(o?t.length?t[0]:null:t)})})}catch(t){r(t)}})},g.prototype.delete=function(t,e){var n=this;return new Promise(function(i,o){try{n.$orm.connect(function(){n.$orm.delete(t,e,i)})}catch(t){o(t)}})},g.prototype.getLoggedUser=function(){var t=this;return this.$orm.connection.cachedStatus.user_id?this.get("auth_user",this.$orm.connection.cachedStatus.user_id):new Promise(function(e,n){t.once("logged-in",function(n){t.get("auth_user",n).then(e)})})},g.prototype.$sendToEndpoint=function(t,e){return this.$orm.$post(t,e)},g.prototype.login=function(t,e){return this.$orm.connection.login(t,e)},g.prototype.getResources=function(){var t=this.$orm;return new Promise(function(e,n){var i=t.connection;w.xdr(i.endPoint+"api/resources",null).then(function(t){t.responseData?e(t.responseData.sort()):n(t)})})},g.prototype.getCollection=function(t,e){return new p(orm.$orm,e||{})},t.rwt=g}(window,Lazy,SockJS);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
