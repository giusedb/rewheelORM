!function(t,e,n){"use strict";function i(){this.handlers=[],this.strHandlers={}}function r(){var t={},n={},i=0;this.on=function(e,r){e in t||(t[e]=new Array);var o=i++;return t[e].push(r),n[o]=r,o},this.emit=function(e){if(e in t){var n=Array.prototype.slice.call(arguments,1);t[e].forEach(function(t){t.apply(null,n)})}},this.unbind=function(i){var r=0;if(i in n){var o=n[i+""];e(t).each(function(t,e){var n=[];for(var i in t)t[i]===o&&(n.push(i),r++);n.reverse().forEach(function(e){t.splice(e,1)})})}return delete n[i],r},this.once=function(t,e){var n=this,i=this.on(t,function(){e.apply(this,arguments),n.unbind(i)})}}function o(){return new Proxy({},{get:function(t,e){return"string"==typeof e?"toString"===e?y:v.mock:t[e]}})}function s(t,e){var i=new n(t);i.onopen=function(t){console.log("open : "+t),i.tenant(),e.emit("realtime-connection-open",t)},i.onmessage=function(t){if("message"==t.type)try{e.emit("realtime-message-json",JSON.parse(t.data))}catch(n){e.emit("realtime-message-text",JSON.parse(t.data))}else console.log("from realtime ",t)},i.onclose=function(){setTimeout(v.wsConnect,1e3),e.emit("realtime-connection-closed")},i.tenant=function(){i.send("TENANT:"+e.cachedStatus.application+":"+e.cachedStatus.token)},this.close=function(){i.close()}}function a(t,e){var n=new r;this.getLogin=e,this.endPoint=t.endsWith("/")?t:t+"/",this.on=n.on,this.unbind=n.unbind,this.emit=n.emit,this.once=n.once,this.cachedStatus={},this.isConnected=!1,this.isLoggedIn=!1}function c(){var t=!1;this.touch=function(){t=!0},this.touched=function(){var e=t;return t=!1,e}}function u(t,n,i,r){if(!n)var n=[];var o=[];this.ask=function(s,a){r&&s in r.source||e(n).contains(s)||(console.info("asking ("+s+") from "+i),o.push(s),a||n.push(s),t.touch())},this.getAskedIndex=function(){return n},this.missings=function(){return e(o.splice(0,o.length)).unique().toArray()}}function l(t,n,i,r){var o=new c,s={},a={},l={},f={},h={};this.mainIndex=s,this.foreignKeys=a,this.m2m=l,this.m2mIndex=f,this.permissions=h,i.on("model-definition",function(t,n){var i=r.getIndexFor(t.name,"id");s[t.name]=new u(o,i,"mainIndex."+t.name,n),h[t.name]=new u(o,null,"permissions."+t.name),e(t.references).each(function(e){var n=t.name+"_"+e.id;a[n]=new u(o,r.getIndexFor(e.to,"id"),e.to+".id foreignKeys."+n)}),e(t.referencedBy).each(function(t){var e=t.by+"."+t.id;a[e]=new u(o,r.getIndexFor(t.by,t.id),t.by+"."+t.id+" foreignKeys."+e)}),e(t.manyToMany).each(function(t){t.indexName in l||(l[t.indexName]=[new u(o,null,"m2m."+t.indexName+"[0]"),new u(o,null,"m2m."+t.indexName+"[1]")]),t.indexName in f||(f[t.indexName]=new d(t,l[t.indexName]))})});var p=function(e,n,r,o){i.$post((n?v.reverse("/",e):e)+"s/list",{collection:r},function(n){i.gotData(n,o),delete t[e]})},m=function(n,i,r,o){e(i).each(l[n][r].ask.bind(l[n][r])),i=l[n][r].missings(),i.length?(t[n]=1,p(n,r,i,o)):o&&o()};this.getM2M=m;var g=function(){if(o.touched()){if(e(t).values().sum())return void o.touch();var r=!1;e(l).each(function(t,n){e(t).each(function(t,o){var a=t.missings();if(a=e(a).filter(Boolean).map(function(t){return parseInt(t)}).toArray(),a.length){var c=f[n],u=c["get"+(1-o)].bind(c);r=!0,p(n,o,a,function(t){var r=a.map(u);if(r.length){var c=n.split("/")[1-o];i.describe(c,function(){e(r).flatten().unique().each(function(t){s[c].ask(t,!0)})})}})}})}),e(s).each(function(t,o){var s=t.missings();if(s.length){r=!0;o in n?n[o].keys():e();i.fetch(o,{id:s},null,v.noop)}}),e(a).map(function(t,e){return[e,t.missings()]}).filter(function(t){return t[1].length}).each(function(t){r=!0;var e=t[1],n=t[0],o=n.split("."),s=o[0],a=o[1],c={};c[a]=e,i.fetch(s,c)}),e(e(h).map(function(t,e){return[e,t.missings()]}).filter(function(t){return t[1].length}).toObject()).each(function(n,o){r=!0,n.length&&(t[o]=1,i.$post(o+"/my_perms",{ids:e(n).unique().toArray()},function(e){i.gotPermissions(e.PERMISSIONS),delete t[o]}))})}};setInterval(g,50)}function f(){var t={},n={},i={},r=function(t,n,i){var r=[];if(i)for(var o in t)for(var s in n)r.push(e([t[o],n[s]]).flatten().toArray());else for(var o in t)for(var s in n)r.push([t[o],n[s]]);return r},o=function(t){for(var e=!1,n=t[0],i=1;i<t.length;++i)n=r(n,t[i],e),e=!0;return n},s=function(t){var n=o(e(t).values().toArray()),i=e(t).keys().toArray();return n.map(function(t){var e={};return i.forEach(function(n,i){e[n]=t[i]}),e})},a=function(t,n,i){var r=t.modelName,o=this.getIndexFor,s=(e(n).map(function(t,e){return[e,r+"."+e]}).toObject(),e(n).keys().map(function(t){return[t,o(r,t)]}).toObject());for(var a in n){var c=e(n[a]).difference(s[a]).toArray();if(c.length){var u=e([[a,c]]).toObject();return i||Array.prototype.push.apply(s[a],c),u}return null}},c=function(t,n){t.name in i||(i[t.name]=[]);var r=i[t.name],o=e(n).size();r.filter(v.makeFilter(t,n," && ",!0)).filter(function(t){e(t).size()>o})};this.filter=function(r,o){var u=r.modelName,l=e(o).size();switch(l){case 0:var f=t[u];return t[u]=!0,u in n&&delete n[u],u in i&&delete i[u],f?null:{};case 1:var d=a.call(this,r,o);return c.call(this,r,o),d}var h=this,p=e(o).keys().some(function(t){var e={};return e[t]=o[t],null==a.call(h,r,e,!0)});if(p)return null;u in i||(i[u]=[]);var m=s(o),g=i[u].filter(v.makeFilter(r,o," || ",!0));if(g.length){var y=[];for(var w in g)y.push.apply(y,m.filter(v.makeFilter(r,g[w]," && ",!0)));var b=e(m).difference(y).toArray()}else var b=m;if(b.length){i[u].push.apply(i[u],b);var b=e(o).keys().map(function(t){var n=e(b).pluck(t).unique().toArray();return[t,n.length?n:o[t]]}).toObject();return c(r,b),b}return null},this.getIndexFor=function(t,e){var i=t+"."+e;return i in n||(n[i]=[]),n[i]}}function d(t,n){var i=[];this.add=i.push.bind(i),this.add=function(t){e(i).find(t)||i.push(t)},this.get0=function(t){return n[1].ask(t),e(i).filter(function(e){return e[0]===t}).pluck("1").toArray()},this.get1=function(t){return n[0].ask(t),e(i).filter(function(e){return e[1]===t}).pluck("0").toArray()},this["get"+v.capitalize(t.indexName.split("/")[1])]=this.get1,this["get"+v.capitalize(t.indexName.split("/")[0])]=this.get0,this.del=function(t){for(var e=i.length,n=null,r=0;r<e;r++)if(i[r][0]===t[0]&&i[r][1]===t[1]){n=r;break}n&&i.splice(r,1),console.log("deleting ",t)}}function h(t,n,i,r){var o=Array.prototype.slice.call(arguments,4),s={};e(o).each(function(e){t.orm.on(e,function(){s={}})});var a={get:function(){return this.id in s||(s[this.id]=i.call(this)),s[this.id]}};r&&(a.set=function(t){isFinite(t)?(r.call(this,t),this.id in s&&delete s[this.id]):this.id in s&&delete s[this.id]}),Object.defineProperty(t,n,a)}function p(t){this.resource=t._resource,this.formIdx=t.formIdx,this.fields=t.errors}function m(t,e){this.$orm=new b(new v.reWheelConnection(t,e),this),this.on=this.$orm.on.bind(this.$orm),this.emit=this.$orm.emit.bind(this.$orm),this.unbind=this.$orm.unbind.bind(this.$orm),this.once=this.$orm.once,this.addModelHandler=this.$orm.addModelHandler.bind(this.$orm),this.addPersistentAttributes=this.$orm.addPersistentAttributes.bind(this.$orm),this.utils=v,this.logout=this.$orm.connection.logout.bind(this.$orm.connection)}i.prototype.addHandler=function(t){var e=v.hash(t.toString());e in this.strHandlers||(this.strHandlers[e]=t,this.handlers.push(t))},i.prototype.handle=function(){var t=Array.prototype.slice.call(arguments,0);this.handlers.forEach(function(e){e.apply(null,t)})},i.prototype.handleBy=function(){var t=Array.prototype.slice.call(arguments,1),e=arguments[0];this.handlers.forEach(function(n){n.apply(e,t)})};var g=0,y=function(){return""},v={renameFunction:function(t,e){return new Function("return function (call) { return function "+t+" () { return call(this, arguments) }; };")()(Function.apply.bind(e))},cached:function(t,e){function n(){return this[e]||(this[e]=t.call(this,[arguments])),this[e]}return e||(e="_"+g++),n},log:function(){console.log(arguments)},xdr:function(t,n,i,r,o){return new Promise(function(i,s){var a;n||(n={}),XMLHttpRequest?(a=new XMLHttpRequest,a.onreadystatechange=function(){if(4===a.readyState){try{var t=JSON.parse(a.responseText)}catch(t){var t=null}var e={responseData:t,responseText:a.responseText,status:a.status,request:a};a.status>=200&&a.status<400?i(e):s(e)}}):XDomainRequest?(a=new XDomainRequest,a.onload=function(){i(a.responseText,a.statusText,a)}):s(new Error("CORS not supported")),a.open("POST",t,!0),a.onerror=s,a.setRequestHeader("Accept","application/json"),r&&(n.__token__=r),o?(a.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),n=e(n).map(function(t,e){return e+"="+encodeURI(t.toString())}).toArray().join("&")):(a.setRequestHeader("Content-Type","text/plain"),n=e(n).size()?JSON.stringify(n):""),a.send(n)})},capitalize:function(t){return t[0].toUpperCase()+t.slice(1).toLowerCase()},hash:function(t){t=t.toString();for(var e=1,n=0;n<t.length;n++)e*=1+t.charCodeAt(n);return(e%34958374957).toString()},makeFilter:function(t,n,i,r){if(i||(i=" && "),0===e(n).size())return function(t){return!0};var o=e(n).map(function(n,i){return n||(n=[null]),Array.isArray(n)||(n=[n]),r||"reference"!==t.fields[i].type?"string"===t.fields[i].type&&(n=n.map(JSON.stringify)):(i="_"+i,n=e(n).map(function(t){return t&&t.constructor!==Number?t.id:t}).toArray()),"("+e(n).map(function(t){return t?t===orm.utils.mock&&console.error("makeFilter with Mock Object"):console.error("makeFilter x is null"),"(x."+i+" === "+t+")"}).join(" || ")+")"}).toArray().join(i);return new Function("x","return "+o)},sameAs:function(t,e){for(var n in t)if(e[n]!=t[n])return!1;return!0},pluralize:function(t,e){return t+"s"},beforeCall:function(t,e){var n=function(){e().then(t)};return n},cleanStorage:function(){e(localStorage).keys().each(function(t){delete localStorage[t]})},cleanDescription:function(){e(localStorage).filter(function(t,n){return e(n).startsWith("description:")}).keys().each(function(t){delete localStorage[t]})},reverse:function(t,e){return e.split(t).reverse().join(t)},permutations:function(t){for(var e=[],n=t.length-1;n>=0;n--)for(var i=t.length-1;i>=0;i--)n!==i&&e.push([t[n],t[i]]);return e},waitFor:function(t,e){var n=function(){t()?e():setTimeout(n,500)};setTimeout(n,500)},bool:Boolean,noop:function(){},tzOffset:6e4*(new Date).getTimezoneOffset(),transFieldType:{date:function(t){return new Date(1e3*t+v.tzOffset)},datetime:function(t){return new Date(1e3*t+v.tzOffset)},string:function(t){return t.toString()},text:function(t){return t.toString()},integer:function(t){return parseInt(t)},float:function(t){return parseFloat(t)}},mock:o()},w="lastRWTConnectionStatus";a.prototype.$post=function(t,e,n){var i=this,r=new Promise(function(r,o){v.xdr(i.endPoint+t,e,i.cachedStatus.application,i.cachedStatus.token).then(function(o){i.emit("http-response",o.responseText,o.status,t,e),i.emit("http-response-"+o.status,o.responseText,t,e),o.responseData&&i.emit("http-response-"+o.status+"-json",o.responseData,t,e),n&&n(o.responseData||o.responseText),r(o.responseData||o.responseText)},function(n){n.responseData?(i.emit("error-json",n.responseData,n.status,t,e,n),i.emit("error-json-"+n.status,n.responseData,t,e,n)):(i.emit("error-http",n.responseText,n.status,t,e,n),i.emit("error-http-"+n.status,n.responseText,t,e,n)),o(n.responseData||n.responseText)})});return r},a.prototype.status=function(t,n){var i="token:"+this.endPoint,r=this;if(n&&(this.cachedStatus={},delete localStorage[i]),this.statusWaiting)return void v.waitFor(function(){return!r.statusWaiting},function(){r.status(t,n)});if(!e(this.cachedStatus).size()){var o={};return i in localStorage&&(o.__token__=localStorage[i]),this.statusWaiting=!0,void this.$post("api/status",o,function(e){r.updateStatus(e),localStorage[i]=e.token,t(e),r.statusWaiting=!1})}t(this.cachedStatus),t(this.cachedStatus)},a.prototype.updateStatus=function(t){var e=parseFloat(localStorage.lastBuild)||1;e<t.last_build&&(v.cleanDescription(),localStorage.lastBuild=t.last_build),this.isConnected=Boolean(t.token),this.isLoggedIn=Boolean(t.user_id);var n=this.cachedStatus;if(this.cachedStatus=t,!n.user_id&&t.user_id)this.emit("logged-in",t.user_id);else if(n.user_id&&!t.user_id)this.emit("logged-out");else if(this.isConnected&&!this.isLoggedIn&&(this.emit("login-required"),this.getLogin)){var i=this.getLogin();i.constructor===Object?this.login(i.username,i.password,i.callBack):i.constructor===Promise&&i.then(function(t){this.login(t.username,t.password,t.callBack)})}!n.realtimeEndPoint&&t.realtimeEndPoint?this.wsConnection=new s(t.realtimeEndPoint,this):n.realtimeEndPoint&&!t.realtimeEndPoint&&(this.wsConnection.close(),delete this.wsConnection),this.emit("update-connection-status",t,n),localStorage[w]=JSON.stringify(t)},a.prototype.login=function(t,e){var n=this;return new Promise(function(i,r){v.xdr(n.endPoint+"api/login",{username:t||"",password:e||""},null,n.cachedStatus.token,!0).then(function(t){n.updateStatus(t.responseData),i({status:"success",userid:n.cachedStatus.user_id})},function(t){i({error:t.responseData.error,status:"error"})})})},a.prototype.logout=function(){var t=this;return new Promise(function(e,n){t.$post("api/logout").then(function(n){t.updateStatus({}),delete localStorage[w],e()},n)})},a.prototype.connect=function(t){this.isLoggedIn?t(this.cachedStatus.user_id):(this.once("logged-in",function(e){t(e)}),this.status(t||v.noop))},v.reWheelConnection=a;var b=function(t,n){function r(t,e,n){this.klass=e,this.permissions=[],this.id=t;for(var i in n)this.push.apply(this,[i,n[i]])}if(t.constructor===String)var o=new a(t);else if(t.constructor===v.reWheelConnection)var o=t;this.connection=o,o.on("connected",function(){this.connected=!0}),this.on=o.on,this.emit=o.emit,this.unbind=o.unbind,this.once=o.once,this.$post=o.$post.bind(o),this.on("ws-connected",function(t){console.info("Websocket connected"),t.onMessageJson(s.gotData.bind(s)),t.onMessageText(function(t){console.info("WS message : "+t)})}),this.on("ws-disconnected",function(t){console.error("Websocket disconnected")}),this.on("error-json-404",function(t,e,n,i){console.error("JSON error ",JSON.stringify(t)),delete b[e.split("/")[0]]}),this.on("realtime-message-json",function(t){s.gotData(t)});var s=this,c={auth_group:e({})},u={},d={},m={},g={},y={},w={},b={},S=new f(e),A=new l(b,c,this,S);window.IDB=c,this.validationEvent=this.on("error-json-513",function(t,e,n,i){currentContext.savingErrorHanlder&&currentContext.savingErrorHanlder(new p(t))});var k=function(t){return t in c?c[t]:(c[t]=e({}),c[t])};r.prototype.save=function(t){var n={permissions:e(this.permissions).map(function(t){return[t[0].id,t[1]]}).toObject()};n.id=this.id;this.klass.modelName;s.$post(this.klass.modelName+"/set_permissions",n,function(e,n,i,r){t(e)})},r.prototype.push=function(t,n){var i=e(n),r=e(this.klass.allPermissions).map(function(t){return[t,i.contains(t)]}).toObject(),o=e(this.permissions).map(function(t){return t[0].id});o.contains(t)?this.permissions[o.indexOf(t)][1]=r:this.permissions.push([c.auth_group.get(t),r])};var N=function(t){t.fields.id.readable=!1,t.fields.id.writable=!1;var i=e(t.fields);t.privateArgs&&(i=i.merge(t.privateArgs)),s.emit("model-definition",t,k(t.name));var o="if (!row) { row = {}};\n";o+=t.references.map(function(t){return"this._"+t.id+" = row."+t.id+";"}).join(";\n"),o+=i.map(function(t,e){return"date"==t.type||"datetime"==t.type?"this."+e+" = row."+e+"?new Date(row."+e+" * 1000 - "+v.tzOffset+"):null;\n":"boolean"==t.type?"this."+e+" = (row."+e+' === "T") || (row.'+e+" === true);\n":"this."+e+" = row."+e+";\n"}).toString("\n"),o+="if (permissions) {this._permissions = permissions && Lazy(permissions).map(function (x) { return [x, true] }).toObject();}";var a=new Function("row","permissions",o);a.prototype.orm=n,a.ref_translations={},a.modelName=t.name,a.references=e(t.references).pluck("id").toArray(),a.inverse_references=t.referencedBy.map(function(t){return t.by+"_"+t.id+"_set"}),a.referents=t.referencedBy.map(function(t){return[t.by,t.id]}),a.fieldsOrder=t.fieldOrder,a.allPermissions=t.permissions,e(t.representation).size()&&(a.prototype.toString=new Function("return this."+e(t.representation).toString(' + " " + this.'))),a.prototype.toUpperCase=function(){return this.toString().toUpperCase()},a.prototype.toLowerCase=function(){return this.toString().toLowerCase()},a.prototype.delete=function(){return n.delete(this.constructor.modelName,[this.id])},Object.defineProperty(a.prototype,"permissions",{get:function(){return this._permissions?this._permissions:void A.permissions[this.constructor.modelName].ask(this.id)}}),a.prototype.all_perms=function(t){var n=this.id;s.$post(this.constructor.modelName+"/all_perms",{id:this.id},function(i){var o=i,u={},l=e(o).pluck("group_id").unique().map(function(t){return""+t}).difference(c.auth_group.keys()).toArray();e(o).groupBy(function(t){return t.group_id}).each(function(t,n){u[n]=e(t).pluck("name").toArray()});var f=function(e){t(new r(n,a,u))};l.length?s.get("auth_group",l,f):f()})},a.prototype.save=function(t){var n=this.asRaw(),i=a.fields,r=this.id,o=this.constructor.modelName;if(t)for(var c in t)n[c]=t[c];e(a.fieldsOrder).filter(function(t){return!i[t].writable}).each(function(t){t in n&&delete n[t]}),r&&(n.id=r);var u=s.$post(o+(r?"/post":"/put"),n);return t&&t.constructor===Function&&(u.context.savingErrorHanlder=t),u},a.prototype.copy=function(){var t=new this.constructor(this.asRaw());return t._permissions=this._permissions,t};var l="return {\n"+e(t.references).map(function(t){return t.id+" : this._"+t.id}).concat(i.map(function(t,e){return"date"==t.type||"datetime"==t.type?e+" : (this."+e+"?(Math.round(this."+e+".getTime() - this."+e+".getTimezoneOffset() * 60000) / 1000):null)":"boolean"==t.type?e+" : this."+e+'?"T":"F"':e+" : this."+e})).toString(",\n")+"};";a.prototype.asRaw=new Function(l),a.saveMulti=function(t,n,i){var r=[],o=e(a.fields).filter(function(t){return!t.writable}).pluck("id").toArray();e(t).map(function(t){return t.asRaw()}).each(function(t){e(o).each(function(e){delete t[e]}),r.push(t)}),s.$post(a.modelName,"put",{multiple:r,formIdx:s.formIdx++},function(t){s.gotData(t);var i=c[a.modelName],r=e(t[a.modelName].results).pluck("id").map(function(t){return i.get(t)}).toArray();n&&n(r)},i)},"extra_verbs"in t&&e(t.extra_verbs).each(function(t){var n=t[0],i=t[1],r="data = {id : this.id";i.length&&(r+=", "+e(i).map(function(t){return t+" : "+t}).join(",")),r+="};",i.push("cb"),a.prototype[n]=new Function(i,r+'W2S.W2P_POST(this.constructor.modelName,"'+n+'", data,function(data,status,headers,x){try{\n   if (!headers("nomodel")) {window.W2S.gotData(data,cb);}\n   else {if (cb) {cb(data)}}\n} catch(e){\nif (cb) {cb(data);}\n}\n});\n')}),"privateArgs"in t&&(a.privateArgs=e(t.privateArgs).keys().map(function(t){return[t,!0]}).toObject(),a.prototype.savePA=function(t){var n=this,i={id:this.id},r=this.constructor.privateArgs,o=this.constructor.fields,a=(new this.constructor(t).asRaw(),e(r).keys().map(function(t){return[t,o[t]]}).toObject());e(t).each(function(t,e){e in r&&a[e].writable&&(i[e]=t)}),s.$post(this.constructor.modelName+"/savePA",i,function(){e(i).each(function(t,e){n[e]=t})})}),y[a.modelName]=a;for(var f in t.fields)t.fields[f].id=f;return a.fields=e(t.fields).concat(e(t.privateArgs)).concat(e(t.references).tap(function(t){t.type=t.type||"reference"})).indexBy("id").toObject(),e(a.fields).each(function(t){t.widget||("reference"===t.type?t.widget="choices":t.widget=t.type)}),e(t.references).each(function(t){var e=t.to,i="_"+t.id;h(a.prototype,t.id,function(){if(!this[i])return null;if(!(e in c)){var t=this;s.describe(e,function(n){A.mainIndex[e].ask(t[i],!0)})}var n=e in c&&this[i]&&c[e].get(this[i]);return!n&&e in A.mainIndex?("number"==typeof this[i]?A.mainIndex[e].ask(this[i],!0):console.warn("null reference for "+i+"("+this.id+") resource "+a.modelName),v.mock):n},function(n){if(n){if(n.constructor!==v.mock&&n.constructor.modelName!==e)throw new TypeError("You can assign only "+e+" to "+t.id);this[i]=n.id}else this[i]=null},"new-"+e,"deleted-"+e,"updated-"+e,"new-model-"+e),a.prototype["get"+v.capitalize(t.id)]=function(){return n.get(e,this[i])}}),e(t.referencedBy).each(function(t){var e=t.by+"."+t.id,i=t.by+"_"+v.pluralize(t.id),r=t.by;a.prototype.hasOwnProperty(i)?console.error("Tryed to redefine property "+i+"s for "+a.modelName):h(a.prototype,i,function(){var t=r in c?u[e].get(this.id+""):null;return A.foreignKeys[e].ask(this.id,!0),t},null,"new-"+r,"updated-"+r,"deleted-"+r),a.prototype["get"+v.capitalize(v.pluralize(t.by))]=function(){var e={};return e[t.id]=[this.id],n.get(t.by,e)}}),t.manyToMany&&(e(t.manyToMany).each(function(t){var n=t.indexName,i=t.first?0:1,r=t.model,o=A.m2mIndex[n]["get"+(1-i)];h(a.prototype,t.model+"s",function(){var t=this,n=[],i=o(t.id),s=null;return i.length&&(s=k(r).get.bind(c[r])),i&&s&&(n=e(i).map(s).filter(v.bool).toArray()),n},null,"received-m2m-"+n,"received-"+r),a.prototype["get"+v.capitalize(v.pluralize(r))]=function(){var t=this;return new Promise(function(a,u){try{A.getM2M(n,[t.id],i,function(n){var i=o(t.id);i.length?s.fetch(r,{id:i},null,function(){var t=c[r].get.bind(c[r]);a(e(i).map(t).filter(v.bool).toArray())}):a([])})}catch(t){console.error(t),u(t)}})},a.fields[v.capitalize(r)]={id:v.capitalize(r),name:v.capitalize(r),writable:!0,readable:!0,type:"M2M",validators:[]}}),a.prototype.unlinkReference=function(t){var n=!1,i=this.id,r=[];"Array"==t.constructor.name&&(n=!0,r=t,t=r[0]);var o=t.constructor.modelName;if(n)var c=e(r).pluck("id").map(function(t){return[i,t]}).toArray();else var c=[[i,t.id]];s.$post(a.modelName+"/"+o+"s/delete",{collection:c})},a.prototype.linkReference=function(t){var n=!1,i=this.id,r=[];"Array"==t.constructor.name&&(n=!0,r=t,t=r[0]);var o=t.constructor.modelName,c=a.modelName+"/"+o;if(n){var u=[];if(c in INDEX_M2M&&(u=e(r).pluck("id").difference(e(INDEX_M2M[c][0].get(this.id))).toArray()),c=o+"/"+a.modelName,c in INDEX_M2M&&(u=e(r).pluck("id").difference(e(INDEX_M2M[c][0].get(this.id))).toArray()),u.length){var l=e(u).map(function(t){return[i,t]}).toArray();W2P_POST(a.modelName,o+"s/put",{collection:l},function(t){})}}else{if(c in A.m2mIndex&&e(A.m2mIndex[c]["get"+v.capitalize(o)](t.id)).find(this))return;s.$post(a.modelName+"/"+o+"s/put",{collection:[[this.id,t.id]]})}}),s.emit("new-model",a),s.emit("new-model-"+a.modelName),a};this.gotData=function(t,n){if(console.info("gotData"),"string"!=typeof t){"_extra"in t&&delete t._extra;var i=(t.TOONE,t.TOMANY,t.MANYTOMANY,t.PERMISSIONS),r=t.PA;if(delete t.TOONE,delete t.TOMANY,delete t.MANYTOMANY,delete t.PERMISSIONS,delete t.PA,r||(r={}),t=e(t).filter(function(t,e){return!("deleted"in t)||e in y}).toObject(),"m2m"in t){var o=t.m2m;delete t.m2m}e(t).each(function(t,n){s.describe(n,function(i){var o=i;t.results&&t.results.length>0&&t.results[0].constructor==Array&&(t.results=e(t.results).map(function(t){return e(o.fieldsOrder).zip(t).toObject()}).toArray());var a=e(t.results),l=t.deleted;if(n in r){var f=r[n];e(a).each(function(t){t.id in f&&e(f[t.id]).each(function(e,n){t[n]=e})})}var d=k(n),h=d.source;l&&l.forEach(function(t){delete h[t]});var p=a.indexBy("id"),m=p.keys(),g=m.difference(d.keys().map(function(t){return parseInt(t)})),w=m.difference(g);w=w.filter(function(t){return!v.sameAs(p.get(t),d.get(t).asRaw())}).toArray();var b=e(t.permissions?t.permissions:{}),S=g.map(function(t){return new o(p.get(t),b.get(t))}),A=[];e(i.references).map(function(t){return[t,1]}).toObject();w.forEach(function(t){var n=h[t],r=n.copy(),o=p.get(t);e(i.fields).each(function(t,e){switch(t.type){case"reference":n["_"+e]=o[e],n[e]=NaN;break;case"date":n[e]=new Date(1e3*o[e]);break;case"datetime":n[e]=new Date(1e3*o[e]);break;case"boolean":switch(o[e]){case null:n[e]=null;break;case"T":n[e]=!0;break;case"F":n[e]=!1;break;case!0:n[e]=!0;break;case!1:n[e]=!1}break;default:n[e]=o[e]}}),A.push([o,r])}),A.length&&s.emit("updated-"+n,A);var N=S.toArray();e(N).each(function(t){h[t.id]=t}),e(y[n].references).each(function(t){u[n+"."+t]=c[n].groupBy("_"+t)}),N.length&&s.emit("new-"+n,e(N),t.totalResults),l&&s.emit("deleted-"+n,l),s.emit("received-"+n)})}),o&&s.gotM2M(o),i&&s.gotPermissions(i),n&&n(t),s.emit("got-data")}else if(console.log("data "+t+" refused from gotData()"),n)return n(t)},this.gotPermissions=function(t){e(t).each(function(t,n){e(t[0]).each(function(t,i){n in c&&i in c[n].source&&(c[n].get(i)._permissions=e(t).map(function(t){return[t,!0]}).toObject())}),e(t[0]).size()&&s.emit("update-permissions-"+n,e(t[0]).keys().toArray())}),this.emit("update-permissions")},this.gotM2M=function(t){e(t).each(function(t,n){var i=A.m2mIndex[n];e(t).each(function(t){e(t).each(function(t,e){i[e](t)})}),s.emit("received-m2m"),s.emit("received-m2m-"+n)})},this.fetch=function(t,e,n,i){t in b?setTimeout(function(){s.fetch(t,e,n,i)},500):s.describe(t,function(n){return s.connection.cachedStatus.realtimeEndPoint?(e=S.filter(n,e),e?(b[t]=!0,s.$post(t+"/list",{filter:e}).then(function(e){s.gotData(e,i),delete b[t]},function(e){delete b[t]})):i&&i(),e):void this.$post(t+"/list",sendData,function(n){e||GOT_ALL.source.push(t),s.gotData(n,i)})}.bind(this))},this.get=function(t,e,n){e.constructor!==Array&&(e=[e]),s.fetch(t,{id:e},null,function(){var i=[],r=c[t];for(var o in e)i.push(r.source[e[o]]);n(i)})},this.gotModel=function(t){for(var n in t){var i=t[n];localStorage["description:"+n]=JSON.stringify(t),y[n]=N(i),n in c||(c[n]=e({}))}},this.describe=function(t,e){var n=y[t];if(n)e&&e(n);else if(t in b)setTimeout(function(){s.describe(t,e)},500);else{if(t in w)return;var i="description:"+t;i in localStorage?(this.gotModel(JSON.parse(localStorage[i])),e&&e(y[t])):(b[t]=!0,this.$post(t+"/describe",null,function(n){s.gotModel(n),e&&e(y[t]),delete b[t]},function(e){this.modelNotFound.handle(t),w[t]=!0}))}},this.addModelHandler=function(t,e){var n=v.hash(e);t in d||(d[t]=new i),t in m||(m[t]={}),n in m[t]||(m[t][n]=!0,t in y?e(y[t]):d[t].addHandler(e))},this.addPersistentAttributes=function(t,n){var i=function(t,e){e.forEach(function(e){var n="pA:"+t.modelName+":"+e,i="__"+e;Object.defineProperty(t.prototype,e,{get:function(){if(!(i in this)){var t=localStorage[n+this.id];this[i]=t?JSON.parse(t):null}return this[i]},set:function(t){this[i]=t,localStorage[n+this.id]=JSON.stringify(t)}})})};t in g||(g[t]=[]);var r=g[t];if(n)var o=e(n).difference(r).toArray();else var o=r;o.length&&(t in y&&i(y[t],o),n&&Array.prototype.push.apply(r,o))},this.on("new-model",function(t){t.modelName in d&&d[t.modelName].handle(y[t.modelName]),t.modelName in g&&s.addPersistentAttributes(t.modelName)}),this.query=function(t,n,i,r){var o=this;this.describe(t,function(s){n=e(n).map(function(t,e){return[e,Array.isArray(t)?t:[t]]}).toObject();var a=v.makeFilter(s,n),c=k(t);o.fetch(t,n,i,function(t){r(c.filter(a).values().toArray())})})},this.delete=function(t,e,n){return this.$post(t+"/delete",{id:e},n)},this.connect=function(t){this.connection.isLoggedIn?t():this.connection.connect(t)}};m.prototype.connect=function(){var t=this.$orm.connection;return new Promise(function(e,n){t.connect(e)})},m.prototype.login=function(t,e){return new Promise(function(n,i){this.$orm.connection.login(t,e,n)}.bind(this))},m.prototype.logout=function(t){return this.$orm.connection.logout()},m.prototype.getModel=function(t){var e=this;return new Promise(function(n,i){try{e.$orm.connect(function(){e.$orm.describe(t,n)})}catch(t){i(t)}})},m.prototype.get=function(t,e){var n,i=this,r=!1;return"number"==typeof e?(r=!0,n={id:[e]}):Array.isArray(e)?n={id:e}:"object"==typeof e?n=e:null===e&&(n={}),new Promise(function(e,o){try{i.$orm.connect(function(){i.$orm.query(t,n,null,function(t){e(r?t.length?t[0]:null:t)})})}catch(t){o(t)}})},m.prototype.delete=function(t,e){var n=this;return new Promise(function(i,r){try{n.$orm.connect(function(){n.$orm.delete(t,e,i)})}catch(t){r(t)}})},m.prototype.getLoggedUser=function(){var t=this;return this.$orm.connection.cachedStatus.user_id?this.get("auth_user",this.$orm.connection.cachedStatus.user_id):new Promise(function(e,n){t.once("logged-in",function(n){t.get("auth_user",n).then(e)})})},m.prototype.$sendToEndpoint=function(t,e){return this.$orm.$post(t,e)},m.prototype.login=function(t,e){return this.$orm.connection.login(t,e)},t.rwt=m}(window,Lazy,SockJS);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
