!function(t,n,e){"use strict";function i(){this.handlers=[],this.strHandlers={}}function o(){var t={},e={},i=0;this.on=function(n,o){n in t||(t[n]=new Array);var r=i++;return t[n].push(o),e[r]=o,r},this.emit=function(n){if(n in t){var e=Array.prototype.slice.call(arguments,1);t[n].forEach(function(t){t.apply(null,e)})}},this.unbind=function(i){var o=0;if(i in e){var r=e[i+""];n(t).each(function(t,n){var e=[];for(var i in t)t[i]===r&&(e.push(i),o++);e.reverse().forEach(function(n){t.splice(n,1)})})}return delete e[i],o}}function r(){return new Proxy({},{get:function(t,n){return"string"==typeof n?"toString"===n?g:r():t[n]}})}function s(t,n){this.getLogin=n,this.events=new o,this.$POST=v.bind(this),this.options={endPoint:t},this.on=this.events.on.bind(this)}function a(){var t=!1;this.touch=function(){t=!0},this.touched=function(){var n=t;return t=!1,n}}function c(t,e,i){if(!e)var e=[];var o=[];this.ask=function(i,r){n(e).contains(i)||(o.push(i),r||e.push(i),t.touch())},this.getAskedIndex=function(){return e},this.missings=function(){return n(o.splice(0,o.length)).unique().toArray()}}function u(t,e,i,o,r){var s=new a,u={},l={},d={},p={},h={};this.mainIndex=u,this.foreignKeys=l,this.m2m=d,this.m2mIndex=p,this.permissions=h,t.on("model-definition",function(t){var e=r.getIndexFor(t.name,"id");u[t.name]=new c(s,e,"mainIndex."+t.name),h[t.name]=new c(s,null,"permissions."+t.name),n(t.references).each(function(n){var e=t.name+"_"+n.id;l[e]=new c(s,r.getIndexFor(n.to,"id"),n.to+".id foreignKeys."+e)}),n(t.referencedBy).each(function(t){var n=t.by+"."+t.id;l[n]=new c(s,r.getIndexFor(t.by,t.id),t.by+"."+t.id+" foreignKeys."+n)}),n(t.manyToMany).each(function(t){t.indexName in d||(d[t.indexName]=[new c(s,null,"m2m."+t.indexName+"[0]"),new c(s,null,"m2m."+t.indexName+"[1]")]),t.indexName in p||(p[t.indexName]=new f(t,d[t.indexName]))})});var m=function(t,n,i,r){o.$post((n?y.reverse("/",t):t)+"s/list",{collection:i},function(n){o.gotData(n,r),delete e[t]})},g=function(t,i,o,r){n(i).each(d[t][o].ask.bind(d[t][o])),i=d[t][o].missings(),i.length?(e[t]=1,m(t,o,i,r)):r&&r()};this.getM2M=g;var v=function(){if(s.touched()){if(n(e).values().sum())return void s.touch();var t=!1;n(d).each(function(e,i){n(e).each(function(e,r){var s=e.missings();if(s=n(s).filter(Boolean).map(function(t){return parseInt(t)}).toArray(),s.length){var a=p[i],c=a["get"+(1-r)].bind(a);t=!0,m(i,r,s,function(t){var e=s.map(c);if(e.length){var a=i.split("/")[1-r];o.describe(a,function(){n(e).flatten().unique().each(function(t){u[a].ask(t,!0)})})}})}})}),n(u).each(function(e,r){var s=e.missings();if(s.length){t=!0;r in i?i[r].keys():n();o.fetch(r,{id:s},null,y.noop)}}),n(l).map(function(t,n){return[n,t.missings()]}).filter(function(t){return t[1].length}).each(function(n){t=!0;var e=n[1],i=n[0],r=i.split("."),s=r[0],a=r[1],c={};c[a]=e,o.fetch(s,c)}),n(n(h).map(function(t,n){return[n,t.missings()]}).filter(function(t){return t[1].length}).toObject()).each(function(i,r){t=!0,i.length&&(e[r]=1,o.$post(r+"/my_perms",{ids:n(i).unique().toArray()},function(t){o.gotPermissions(t.PERMISSIONS),delete e[r]}))})}};setInterval(v,50)}function l(){var t={},e={},i={},o=function(t,e,i){var o=[];if(i)for(var r in t)for(var s in e)o.push(n([t[r],e[s]]).flatten().toArray());else for(var r in t)for(var s in e)o.push([t[r],e[s]]);return o},r=function(t){for(var n=!1,e=t[0],i=1;i<t.length;++i)e=o(e,t[i],n),n=!0;return e},s=function(t){var e=r(n(t).values().toArray()),i=n(t).keys().toArray();return e.map(function(t){var n={};return i.forEach(function(e,i){n[e]=t[i]}),n})},a=function(t,e,i){var o=t.modelName,r=this.getIndexFor,s=(n(e).map(function(t,n){return[n,o+"."+n]}).toObject(),n(e).keys().map(function(t){return[t,r(o,t)]}).toObject());for(var a in e){var c=n(e[a]).difference(s[a]).toArray();if(c.length){var u=n([[a,c]]).toObject();return i||Array.prototype.push.apply(s[a],c),u}return null}},c=function(t,e){t.name in i||(i[t.name]=[]);var o=i[t.name],r=n(e).size();o.filter(y.makeFilter(t,e," && ",!0)).filter(function(t){n(t).size()>r})};this.filter=function(o,r){var u=o.modelName,l=n(r).size();switch(l){case 0:var f=t[u];return t[u]=!0,u in e&&delete e[u],u in i&&delete i[u],f?null:{};case 1:var d=a.call(this,o,r);return c.call(this,o,r),d}var p=this,h=n(r).keys().some(function(t){var n={};return n[t]=r[t],null==a.call(p,o,n,!0)});if(h)return null;u in i||(i[u]=[]);var m=s(r),g=i[u].filter(y.makeFilter(o,r," || ",!0));if(g.length){var v=[];for(var w in g)v.push.apply(v,m.filter(y.makeFilter(o,g[w]," && ",!0)));var b=n(m).difference(v).toArray()}else var b=m;if(b.length){i[u].push.apply(i[u],b);var b=n(r).keys().map(function(t){var e=n(b).pluck(t).unique().toArray();return[t,e.length?e:r[t]]}).toObject();return c(o,b),b}return null},this.getIndexFor=function(t,n){var i=t+"."+n;return i in e||(e[i]=[]),e[i]}}function f(t,e){var i=[];this.add=i.push.bind(i),this.add=function(t){console.log("adding "+t),n(i).find(t)||i.push(t)},this.get0=function(t){return e[1].ask(t),n(i).filter(function(n){return n[0]===t}).pluck("1").toArray()},this.get1=function(t){return e[0].ask(t),n(i).filter(function(n){return n[1]===t}).pluck("0").toArray()},this["get"+y.capitalize(t.indexName.split("/")[1])]=this.get1,this["get"+y.capitalize(t.indexName.split("/")[0])]=this.get0,this.del=function(t){for(var n=i.length,e=null,o=0;o<n;o++)if(i[o][0]===t[0]&&i[o][1]===t[1]){e=o;break}e&&i.splice(o,1),console.log("deleting ",t)}}function d(t,e,i,o){var r=Array.prototype.slice.call(arguments,4),s={};n(r).each(function(n){t.orm.on(n,function(){s={}})});var a={get:function(){return this.id in s||(s[this.id]=i.call(this)),s[this.id]}};o&&(a.set=function(t){t!==s[this.id]&&(o.call(this,t),this.id in s&&delete s[this.id])}),Object.defineProperty(t,e,a)}function p(t){this.resource=t._resource,this.formIdx=t.formIdx,this.fields=t.errors}function h(t,n){this.$orm=new w(new y.reWheelConnection(t,n),this),this.on=this.$orm.on.bind(this.$orm),this.emit=this.$orm.emit.bind(this.$orm),this.unbind=this.$orm.unbind.bind(this.$orm),this.addModelHandler=this.$orm.addModelHandler.bind(this.$orm),this.addPersistentAttributes=this.$orm.addPersistentAttributes.bind(this.$orm),this.utils=y}i.prototype.addHandler=function(t){var n=y.hash(t.toString());n in this.strHandlers||(this.strHandlers[n]=t,this.handlers.push(t))},i.prototype.handle=function(){var t=Array.prototype.slice.call(arguments,0);this.handlers.forEach(function(n){n.apply(null,t)})},i.prototype.handleBy=function(){var t=Array.prototype.slice.call(arguments,1),n=arguments[0];this.handlers.forEach(function(e){e.apply(n,t)})};var m=0,g=function(){return""},v=function(t,n,e,i,o){var r={accepts:"application/json",url:t,data:JSON.stringify(n),dataType:"json",success:e,error:i,method:"POST",contentType:"application/json"};return o&&(r.headers=o,r.crossDomain=!0),$.ajax(r)};s.prototype.status=function(t,n){if("lastRWTStatus"in localStorage&&!n){try{var e=JSON.parse(localStorage.lastRWTStatus);for(var i in e)this.options[i]=e[i]}catch(n){return this.status(t,!0)}return t&&t(e)}if(this._status_calling){var o=this;return setTimeout(function(){o.status(t)},50)}if(!this.options||!this.options.timestamp){this._status_calling=!0;var o=this;return this.$post("api/status",null,function(n){localStorage.lastRWTStatus=JSON.stringify(n),o._status_calling=!1;for(var e in n)o.options[e]=n[e];if(!n.user_id&&o.getLogin){var i=o.getLogin();i.constructor===Object&&o.login(i.username,i.password).then(function(n){for(var e in n)o.options[e]=n[e];localStorage.lastRWTStatus=JSON.stringify(n),t&&t(n)})}else t&&t(o.options)})}t&&t(this.options)},s.prototype.$post=function(t,n,e){var i=this;if(this.options&&this.options.token&&(n||(n={})),this.options.token){({token:this.options.token,application:this.options.application})}else;var o=new Promise(function(o,r){y.xdr(i.options.endPoint+t,n,i.options.application,i.options.token).then(function(r){i.events.emit("http-response",r.responseText,r.status,t,n),i.events.emit("http-response-"+r.status,r.responseText,t,n),r.responseData&&i.events.emit("http-response-"+r.status+"-json",r.responseData,t,n),e&&e(r.responseData||r.responseText),o(r.responseData||r.responseText)},function(e){e.responseData?(i.events.emit("error-json",e.responseData,e.status,t,n,e),i.events.emit("error-json-"+e.status,e.responseData,t,n,e)):(i.events.emit("error-http",e.responseText,e.status,t,n,e),i.events.emit("error-http-"+e.status,e.responseText,t,n,e)),r(e.responseData||e.responseText)})});return o},s.prototype.login=function(t,n){var e=this.options.endPoint+"api/login",i=this;return new Promise(function(o,r){y.xdr(e,{username:t,password:n},null,i.options.token,!0).then(function(t){var n=t.responseData;for(var e in n)i.options[e]=n[e];o(n)},function(t){r(t.responseData||responseText)})})},s.prototype.connect=function(t){var n=this,e=function(t){t.wsConnection=new y.wsConnect(t.options),t.wsConnection.onConnect(function(){t.events.emit("ws-connected",t.wsConnection)}),t.wsConnection.onDisconnect(function(){setTimeout(function(){e(t)},1e3)})};return this.status(function(i){"token"in n.options?t&&t(i):(console.log("connecting to "+n.options.endPoint),n.options.username&&n.options.password&&n.login(n.options.username,n.options.password,function(n){t&&t(n),console.log("renewing connection")})),i.token&&i.realtimeEndPoint&&!n.wsConnection&&e(n)})};var y={renameFunction:function(t,n){return new Function("return function (call) { return function "+t+" () { return call(this, arguments) }; };")()(Function.apply.bind(n))},cached:function(t,n){function e(){return this[n]||(this[n]=t.call(this,[arguments])),this[n]}return n||(n="_"+m++),e},$POST:v,reWheelConnection:s,log:function(){console.log(arguments)},xdr:function(t,e,i,o,r){return new Promise(function(i,s){var a;e||(e={}),XMLHttpRequest?(a=new XMLHttpRequest,a.onreadystatechange=function(){if(4===a.readyState){try{var t=JSON.parse(a.responseText)}catch(t){var t=null}var n={responseData:t,responseText:a.responseText,status:a.statusText,request:a};a.status>=200&&a.status<400?i(n):s(n)}}):XDomainRequest?(a=new XDomainRequest,a.onload=function(){i(a.responseText,a.statusText,a)}):s(new Error("CORS not supported")),a.open("POST",t,!0),a.onerror=s,a.setRequestHeader("Accept","application/json"),o&&(e.__token__=o),r?(a.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),e=n(e).map(function(t,n){return n+"="+encodeURI(t.toString())}).toArray().join("&")):(a.setRequestHeader("Content-Type","text/plain"),e=n(e).size()?JSON.stringify(e):""),a.send(e)})},capitalize:function(t){return t[0].toUpperCase()+t.slice(1).toLowerCase()},hash:function(t){t=t.toString();for(var n=1,e=0;e<t.length;e++)n*=1+t.charCodeAt(e);return(n%34958374957).toString()},makeFilter:function(t,e,i,o){if(i||(i=" && "),0===n(e).size())return function(t){return!0};var r=n(e).map(function(e,i){return e||(e=[null]),Array.isArray(e)||(e=[e]),o||"reference"!==t.fields[i].type?"string"===t.fields[i].type&&(e=e.map(JSON.stringify)):(i="_"+i,e=n(e).map(function(t){return t&&t.constructor!==Number?t.id:t}).toArray()),"("+n(e).map(function(t){return"(x."+i+" === "+t+")"}).join(" || ")+")"}).toArray().join(i);return new Function("x","return "+r)},sameAs:function(t,n){for(var e in t)if(n[e]!=t[e])return!1;return!0},wsConnect:function(t){if(t){var n=this;this.handlers={wizard:new i,onConnection:new i,onDisconnection:new i,onMessageJson:new i,onMessageText:new i},this.onWizard=this.handlers.wizard.addHandler.bind(this.handlers.wizard),this.onConnect=this.handlers.onConnection.addHandler.bind(this.handlers.onConnection),this.onDisconnect=this.handlers.onDisconnection.addHandler.bind(this.handlers.onDisconnection),this.onMessageJson=this.handlers.onMessageJson.addHandler.bind(this.handlers.onMessageJson),this.onMessageText=this.handlers.onMessageText.addHandler.bind(this.handlers.onMessageText),this.options=t;var o=new e(t.realtimeEndPoint);o.onopen=function(t){console.log("open : "+t),o.tenant(),n.handlers.onConnection.handle(t)},o.onmessage=function(t){if("message"==t.type)try{n.handlers.onMessageJson.handle(JSON.parse(t.data))}catch(e){n.handlers.onMessageText.handle(t.data)}else console.log(t)},o.onclose=function(){setTimeout(y.wsConnect,1e3),n.handlers.onDisconnection.handle()},o.tenant=function(){o.send("TENANT:"+n.options.application+":"+n.options.token)}}},pluralize:function(t,n){return t+"s"},beforeCall:function(t,n){var e=function(){n().then(t)};return e},cleanStorage:function(){n(localStorage).keys().each(function(t){delete localStorage[t]})},reverse:function(t,n){return n.split(t).reverse().join(t)},permutations:function(t){for(var n=[],e=t.length-1;e>=0;e--)for(var i=t.length-1;i>=0;i--)e!==i&&n.push([t[e],t[i]]);return n},bool:Boolean,noop:function(){},tzOffset:6e4*(new Date).getTimezoneOffset(),transFieldType:{date:function(t){return new Date(1e3*t+y.tzOffset)},datetime:function(t){return new Date(1e3*t+y.tzOffset)},string:function(t){return t.toString()},text:function(t){return t.toString()},integer:function(t){return parseInt(t)},float:function(t){return parseFloat(t)}},mock:r},w=function(t,e){function o(t,n,e){this.klass=n,this.permissions=[],this.id=t;for(var i in e)this.push.apply(this,[i,e[i]])}if(t.constructor===String)var r=new s(t);else if(t.constructor===y.reWheelConnection)var r=t;this.connection=r,r.on("connected",function(){this.connected=!0});var a=r.events;this.on=a.on.bind(this),this.emit=a.emit.bind(this),this.unbind=a.unbind.bind(this),this.$post=r.$post.bind(r),a.on("ws-connected",function(t){console.info("Websocket connected"),t.onMessageJson(c.gotData.bind(c)),t.onMessageText(function(t){console.info("WS message : "+t)})}),a.on("ws-disconnected",function(t){console.error("Websocket disconnected")}),a.on("error-json-404",function(t,n,e,i){console.error("JSON error ",JSON.stringify(t)),delete N[n.split("/")[0]]});var c=this,f={auth_group:n({})},h={},m={},g={},v={},w={},b={},N={},A=new l(n),x=new u(a,N,f,this,A);this.validationEvent=a.on("error-json-513",function(t,n,e,i){currentContext.savingErrorHanlder&&currentContext.savingErrorHanlder(new p(t))});var S=function(t){return t in f?f[t]:(f[t]=n({}),f[t])},O=function(t){return t in UNLINKED?UNLINKED[t]:(UNLINKED[t]={},UNLINKED[t])};o.prototype.save=function(t){var e={permissions:n(this.permissions).map(function(t){return[t[0].id,t[1]]}).toObject()};e.id=this.id;this.klass.modelName;c.$post(this.klass.modelName+"/set_permissions",e,function(n,e,i,o){t(n)})},o.prototype.push=function(t,e){var i=n(e),o=n(this.klass.allPermissions).map(function(t){return[t,i.contains(t)]}).toObject(),r=n(this.permissions).map(function(t){return t[0].id});r.contains(t)?this.permissions[r.indexOf(t)][1]=o:this.permissions.push([f.auth_group.get(t),o])};var T=function(t){var i=n(t.fields);t.privateArgs&&(i=i.merge(t.privateArgs)),c.emit("model-definition",t);var r="if (!row) { row = {}};\n";r+=t.references.map(function(t){return"this._"+t.id+" = row."+t.id+";"}).join(";\n"),r+=i.map(function(t,n){return"date"==t.type||"datetime"==t.type?"this."+n+" = row."+n+"?new Date(row."+n+" * 1000 - "+y.tzOffset+"):null;\n":"boolean"==t.type?"this."+n+" = (row."+n+' === "T") || (row.'+n+" === true);\n":"this."+n+" = row."+n+";\n"}).toString("\n"),r+="if (permissions) {this._permissions = permissions && Lazy(permissions).map(function (x) { return [x, true] }).toObject();}";var s=new Function("row","permissions",r);s.prototype.orm=e,s.ref_translations={},s.modelName=t.name,s.references=n(t.references).pluck("id").toArray(),s.inverse_references=t.referencedBy.map(function(t){return t.by+"_"+t.id+"_set"}),s.referents=t.referencedBy.map(function(t){return[t.by,t.id]}),s.fieldsOrder=t.fieldOrder,s.allPermissions=t.permissions,n(t.representation).size()&&(s.prototype.toString=new Function("return this."+n(t.representation).toString(' + " " + this.'))),s.prototype.toUpperCase=function(){return this.toString().toUpperCase()},s.prototype.toLowerCase=function(){return this.toString().toLowerCase()},s.prototype.delete=function(){return e.delete(this.constructor.modelName,[this.id])},Object.defineProperty(s.prototype,"permissions",{get:function(){return this._permissions?this._permissions:void x.permissions[this.constructor.modelName].ask(this.id)}}),s.prototype.all_perms=function(t){var e=this.id;c.$post(this.constructor.modelName+"/all_perms",{id:this.id},function(i){var r=i,a={},u=n(r).pluck("group_id").unique().map(function(t){return""+t}).difference(f.auth_group.keys()).toArray();n(r).groupBy(function(t){return t.group_id}).each(function(t,e){a[e]=n(t).pluck("name").toArray()});var l=function(n){t(new o(e,s,a))};u.length?c.get("auth_group",u,l):l()})},s.prototype.save=function(t){var e=this.asRaw(),i=s.fields,o=this.id,r=this.constructor.modelName;if(t)for(var a in t)e[a]=t[a];n(s.fieldsOrder).filter(function(t){return!i[t].writable}).each(function(t){t in e&&delete e[t]});var u=c.$post(r+(o?"/post":"/put"),e);return t&&t.constructor===Function&&(u.context.savingErrorHanlder=t),u},s.prototype.copy=function(){var t=new this.constructor(this.asRaw());return t._permissions=this._permissions,t};var u="return {\n"+n(t.references).map(function(t){return t.id+" : this._"+t.id}).concat(i.map(function(t,n){return"date"==t.type||"datetime"==t.type?n+" : (this."+n+"?(Math.round(this."+n+".getTime() - this."+n+".getTimezoneOffset() * 60000) / 1000):null)":"boolean"==t.type?n+" : this."+n+'?"T":"F"':n+" : this."+n})).toString(",\n")+"};";s.prototype.asRaw=new Function(u),s.saveMulti=function(t,e,i){var o=[],r=n(s.fields).filter(function(t){return!t.writable}).pluck("id").toArray();n(t).map(function(t){return t.asRaw()}).each(function(t){n(r).each(function(n){delete t[n]}),o.push(t)}),c.$post(s.modelName,"put",{multiple:o,formIdx:c.formIdx++},function(t){c.gotData(t);var i=f[s.modelName],o=n(t[s.modelName].results).pluck("id").map(function(t){return i.get(t)}).toArray();e&&e(o)},i)},"extra_verbs"in t&&n(t.extra_verbs).each(function(t){var e=t[0],i=t[1],o="data = {id : this.id";i.length&&(o+=", "+n(i).map(function(t){return t+" : "+t}).join(",")),o+="};",i.push("cb"),s.prototype[e]=new Function(i,o+'W2S.W2P_POST(this.constructor.modelName,"'+e+'", data,function(data,status,headers,x){try{\n   if (!headers("nomodel")) {window.W2S.gotData(data,cb);}\n   else {if (cb) {cb(data)}}\n} catch(e){\nif (cb) {cb(data);}\n}\n});\n')}),"privateArgs"in t&&(s.privateArgs=n(t.privateArgs).keys().map(function(t){return[t,!0]}).toObject(),s.prototype.savePA=function(t){var e=this,i={id:this.id},o=this.constructor.privateArgs,r=this.constructor.fields,s=(new this.constructor(t).asRaw(),n(o).keys().map(function(t){return[t,r[t]]}).toObject());n(t).each(function(t,n){n in o&&s[n].writable&&(i[n]=t)}),c.$post(this.constructor.modelName+"/savePA",i,function(){n(i).each(function(t,n){e[n]=t})})}),w[s.modelName]=s;for(var l in t.fields)t.fields[l].id=l;return s.fields=n(t.fields).concat(n(t.privateArgs)).concat(n(t.references).tap(function(t){t.type=t.type||"reference"})).indexBy("id").toObject(),n(s.fields).each(function(t){t.widget||("reference"===t.type?t.widget="choices":t.widget=t.type)}),n(t.references).each(function(t){var n=t.to,i="_"+t.id;d(s.prototype,t.id,function(){if(!(n in f)){var t=this;c.describe(n,function(e){x.mainIndex[n].ask(t[i],!0)})}var e=n in f&&this[i]&&f[n].get(this[i]);return!e&&n in x.mainIndex?(x.mainIndex[n].ask(this[i],!0),y.mock()):e},function(e){if(e&&e.constructor.modelName!=n)throw new TypeError("You can assign only "+n+" to "+t.id);this[i]=e.id},"new-"+n,"deleted-"+n,"updated-"+n,"new-model-"+n),s.prototype["get"+y.capitalize(t.id)]=function(){return e.get(n,this[i])}}),n(t.referencedBy).each(function(t){var n=t.by+"."+t.id,i=t.by+"_"+y.pluralize(t.id),o=t.by;s.prototype.hasOwnProperty(i)?$log.error("Tryed to redefine property "+i+"s for "+s.modelName):d(s.prototype,i,function(){var t=o in f?h[n].get(this.id+""):null;return x.foreignKeys[n].ask(this.id,!0),t},null,"new-"+o,"updated-"+o,"deleted-"+o),s.prototype["get"+y.capitalize(y.pluralize(t.by))]=function(){var n={};return n[t.id]=[this.id],e.query(t.by,n)}}),t.manyToMany&&(n(t.manyToMany).each(function(t){var e=t.indexName,i=t.first?0:1,o=t.model,r=x.m2mIndex[e]["get"+(1-i)];d(s.prototype,t.model+"s",function(){var t=this,e=[],i=r(t.id),s=null;return i.length&&(s=S(o).get.bind(f[o])),i&&s&&(e=n(i).map(s).filter(y.bool).toArray()),e},null,"received-m2m-"+e,"received-"+o),s.prototype["get"+y.capitalize(y.pluralize(o))]=function(){var t=this;return new Promise(function(s,a){try{x.getM2M(e,[t.id],i,function(e){var i=r(t.id);i.length?c.fetch(o,{id:i},null,function(){var t=f[o].get.bind(f[o]);s(n(i).map(t).filter(y.bool).toArray())}):s([])})}catch(t){console.error(t),a(t)}})},s.fields[y.capitalize(o)]={id:y.capitalize(o),name:y.capitalize(o),writable:!0,readable:!0,type:"M2M",validators:[]}}),s.prototype.unlinkReference=function(t){var e=!1,i=this.id,o=[];"Array"==t.constructor.name&&(e=!0,o=t,t=o[0]);var r=t.constructor.modelName;if(e)var a=n(o).pluck("id").map(function(t){return[i,t]}).toArray();else var a=[[i,t.id]];c.$post(s.modelName+"/"+r+"s/delete",{collection:a})},s.prototype.linkReference=function(t){var e=!1,i=this.id,o=[];"Array"==t.constructor.name&&(e=!0,o=t,t=o[0]);var r=t.constructor.modelName,a=s.modelName+"/"+r;if(e){var u=[];if(a in INDEX_M2M&&(u=n(o).pluck("id").difference(n(INDEX_M2M[a][0].get(this.id))).toArray()),a=r+"/"+s.modelName,a in INDEX_M2M&&(u=n(o).pluck("id").difference(n(INDEX_M2M[a][0].get(this.id))).toArray()),u.length){var l=n(u).map(function(t){return[i,t]}).toArray();W2P_POST(s.modelName,r+"s/put",{collection:l},function(t){})}}else{if(a in x.m2mIndex&&n(x.m2mIndex[a]["get"+y.capitalize(r)](t.id)).find(this))return;c.$post(s.modelName+"/"+r+"s/put",{collection:[[this.id,t.id]]})}}),a.emit("new-model",s),a.emit("new-model-"+s.modelName),s};this.gotData=function(t,e){if(console.info("gotData"),"string"!=typeof t){"_extra"in t&&delete t._extra;var i=t.TOONE,o=t.TOMANY,r=t.MANYTOMANY,s=t.PERMISSIONS,u=t.PA;if(delete t.TOONE,delete t.TOMANY,delete t.MANYTOMANY,delete t.PERMISSIONS,delete t.PA,u||(u={}),t=n(t).filter(function(t,n){return!("deleted"in t)||n in w}).toObject(),"m2m"in t){var l=t.m2m;delete t.m2m}n(t).each(function(t,e){c.describe(e,function(i){var o=i;t.results&&t.results.length>0&&t.results[0].constructor==Array&&(t.results=n(t.results).map(function(t){return n(o.fieldsOrder).zip(t).toObject()}).toArray());var r=n(t.results),s=t.deleted;if(e in u){var c=u[e];n(r).each(function(t){t.id in c&&n(c[t.id]).each(function(n,e){t[e]=n})})}var l=S(e),d=l.source;s&&s.forEach(function(t){delete d[t]});var p=r.indexBy("id"),m=p.keys(),g=m.difference(l.keys().map(function(t){return parseInt(t)})),v=m.difference(g);v=v.filter(function(t){return!y.sameAs(p.get(t),l.get(t).asRaw())});var b=n(t.permissions?t.permissions:{}),N=g.map(function(t){return new o(p.get(t),b.get(t))}),A=[];v.each(function(t){var e=l.get(t),r=e.copy(),s=new o(p.get(t));n(i.fields).keys().each(function(t){e[t]=s[t]}),A.push([e,r])}),A.length&&a.emit("updated-"+e,A);var x=N.toArray();n(x).each(function(t){d[t.id]=t}),n(w[e].references).each(function(t){h[e+"."+t]=f[e].groupBy("_"+t)}),x.length&&a.emit("new-"+e,n(x),t.totalResults),s&&a.emit("deleted-"+e,s),a.emit("received-"+e)})}),i&&(console.error("TOONE"),n(i).each(function(t,n){console.log(n);O(n)})),o&&(console.error("TOMANY"),n(o).each(function(t,e){e in ASKED_UNLINKED||(ASKED_UNLINKED[e]=n([])),n(t).each(function(t){ASKED_UNLINKED[e].source.push(t)})})),r&&(console.error("MANYTOMANY"),n(r).each(function(t,e){var i=parseInt(e.split("|")[1]);e=e.split("|")[0],e in ASKED_M2M||(ASKED_M2M[e]=[{},{}]);var o=ASKED_M2M[e][i];n(t).each(function(t){o[t+""]=!0,o[t]=!0})})),l&&c.gotM2M(l),s&&c.gotPermissions(s),e&&e(t),a.emit("got-data")}else if(console.log("data "+t+" refused from gotData()"),e)return e(t)},this.gotPermissions=function(t){n(t).each(function(t,e){n(t[0]).each(function(t,i){e in f&&i in f[e].source&&(f[e].get(i)._permissions=n(t).map(function(t){return[t,!0]}).toObject())}),n(t[0]).size()&&c.emit("update-permissions-"+e,n(t[0]).keys().toArray())}),this.emit("update-permissions")},this.gotM2M=function(t){n(t).each(function(t,e){var i=x.m2mIndex[e];n(t).each(function(t){n(t).each(function(t,n){i[n](t)})}),a.emit("received-m2m"),a.emit("received-m2m-"+e)})},this.fetch=function(t,n,e,i){t in N?setTimeout(function(){c.fetch(t,n,e,i)},500):c.describe(t,function(e){return c.connection.options.realtimeEndPoint?(n=A.filter(e,n),n?(N[t]=!0,c.$post(t+"/list",{filter:n},function(n){c.gotData(n,i),delete N[t]},function(){delete N[t]})):i&&i(),n):void this.$post(t+"/list",sendData,function(e){n||GOT_ALL.source.push(t),c.gotData(e,i)})})},this.get=function(t,n,e){n.constructor!==Array&&(n=[n]),c.fetch(t,{id:n},null,function(){var i=[],o=f[t];for(var r in n)i.push(o.source[n[r]]);e(i)})},this.gotModel=function(t){for(var e in t){var i=t[e];localStorage["description:"+e]=JSON.stringify(t),w[e]=T(i),e in f||(f[e]=n({}))}},this.describe=function(t,n){var e=w[t];if(e)n&&n(e);else if(t in N)setTimeout(function(){c.describe(t,n)},500);else{if(t in b)return;var i="description:"+t;i in localStorage?(this.gotModel(JSON.parse(localStorage[i])),n&&n(w[t])):(N[t]=!0,this.$post(t+"/describe",null,function(e){c.gotModel(e),n&&n(w[t]),delete N[t]},function(n){this.events.modelNotFound.handle(t),b[t]=!0}))}},this.addModelHandler=function(t,n){var e=y.hash(n);t in m||(m[t]=new i),t in g||(g[t]={}),e in g[t]||(g[t][e]=!0,t in w?n(w[t]):m[t].addHandler(n))},this.addPersistentAttributes=function(t,e){var i=function(t,n){n.forEach(function(n){var e="pA:"+t.modelName+":"+n,i="__"+n;Object.defineProperty(t.prototype,n,{get:function(){if(!(i in this)){var t=localStorage[e+this.id];this[i]=t?JSON.parse(t):null}return this[i]},set:function(t){this[i]=t,localStorage[e+this.id]=JSON.stringify(t)}})})};t in v||(v[t]=[]);var o=v[t];if(e)var r=n(e).difference(o).toArray();else var r=o;r.length&&(t in w&&i(w[t],r),e&&Array.prototype.push.apply(o,r))},this.on("new-model",function(t){t.modelName in m&&m[t.modelName].handle(w[t.modelName]),t.modelName in v&&c.addPersistentAttributes(t.modelName)}),this.connect=function(t){this.isConnected?t(this.connection.options):this.connection.connect(function(n){c.isConnected=!0,t(n)})},this.query=function(t,e,i,o){var r=this;this.describe(t,function(s){e=n(e).map(function(t,n){return[n,Array.isArray(t)?t:[t]]}).toObject();var a=y.makeFilter(s,e),c=S(t);r.fetch(t,e,i,function(t){o(c.filter(a).values().toArray())})})},this.delete=function(t,n,e){return this.$post(t+"/delete",{id:n},e)}};h.prototype.getModel=function(t){var n=this;return new Promise(function(e,i){try{n.$orm.connect(function(){n.$orm.describe(t,e)})}catch(t){i(t)}})},h.prototype.get=function(t,n){var e=this,i=!1,o=t;return n.constructor!==Array&&(i=!0,n=[n]),new Promise(function(t,r){try{e.$orm.connect(function(){i?e.$orm.get(o,n,function(n){t(n[0])}):e.$orm.get(o,n,t)})}catch(t){r(t)}})},h.prototype.query=function(t,n,e){var i=this;return new Promise(function(o,r){var s=null;e&&e.constructor===Array&&e.length?s=e:e&&e.constructor===String&&e.length&&(s=e.split(","));try{i.$orm.isConnected?i.$orm.query(t,n,s,o):i.$orm.connect(function(){i.$orm.query(t,n,s,o)})}catch(t){r(t)}})},h.prototype.delete=function(t,n){var e=this;return new Promise(function(i,o){try{e.$orm.connected?e.$orm.delete(t,n,i):e.$orm.connect(function(){e.$orm.delete(t,n,i)})}catch(t){o(t)}})},h.prototype.getLoggedUser=function(){return this.$orm.connection.options.user_id?this.get("auth_user",this.$orm.connection.options.user_id):new Promse(function(t,n){this.on("login",function(n){t(n)})})},h.prototype.$sendToEndpoint=function(t,n){return this.$orm.$post(t,n)},t.rwt=h}(window,Lazy,SockJS);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
